{"version":3,"file":"utils.umd.production.min.js","sources":["../src/isObject.ts","../src/constants.ts","../src/getUiOptions.ts","../src/deepEquals.ts","../src/findSchemaDefinition.ts","../src/schema/getMatchingOption.ts","../src/schema/getFirstMatchingOption.ts","../src/getDiscriminatorFieldFromSchema.ts","../src/guessType.ts","../src/getSchemaType.ts","../src/mergeSchemas.ts","../src/schema/retrieveSchema.ts","../src/schema/getClosestMatchingOption.ts","../src/isFixedItems.ts","../src/mergeDefaultsWithFormData.ts","../src/mergeObjects.ts","../src/isConstant.ts","../src/schema/isSelect.ts","../src/schema/isMultiSelect.ts","../src/schema/getDefaultFormState.ts","../src/isCustomWidget.ts","../src/schema/isFilesArray.ts","../src/schema/getDisplayLabel.ts","../src/schema/mergeValidationData.ts","../src/schema/sanitizeDataForNewSchema.ts","../src/schema/toIdSchema.ts","../src/schema/toPathSchema.ts","../src/createSchemaUtils.ts","../src/replaceStringParameters.ts","../src/enumOptionsValueForIndex.ts","../src/enumOptionsIsSelected.ts","../src/ErrorSchemaBuilder.ts","../src/rangeSpec.ts","../src/getSubmitButtonOptions.ts","../src/getWidget.tsx","../src/hashForSchema.ts","../src/idGenerators.ts","../src/toConstant.ts","../src/pad.ts","../src/toErrorList.ts","../src/enums.ts","../src/parser/ParserValidator.ts","../src/parser/schemaParser.ts","../src/allowAdditionalItems.ts","../src/asNumber.ts","../src/canExpand.ts","../src/createErrorHandler.ts","../src/dataURItoBlob.ts","../src/englishStringTranslator.ts","../src/enumOptionsDeselectValue.ts","../src/enumOptionsIndexForValue.ts","../src/enumOptionsSelectValue.ts","../src/getInputProps.ts","../src/getTemplate.ts","../src/hasWidget.ts","../src/labelValue.ts","../src/localToUTC.ts","../src/optionsList.ts","../src/orderProperties.ts","../src/parseDateString.ts","../src/schemaRequiresTrueValue.ts","../src/shouldRender.ts","../src/toDateString.ts","../src/toErrorSchema.ts","../src/unwrapErrorHandler.ts","../src/utcToLocal.ts","../src/validationDataMerge.ts","../src/withIdRefPrefix.ts"],"sourcesContent":["/** Determines whether a `thing` is an object for the purposes of RSJF. In this case, `thing` is an object if it has\n * the type `object` but is NOT null, an array or a File.\n *\n * @param thing - The thing to check to see whether it is an object\n * @returns - True if it is a non-null, non-array, non-File object\n */\nexport default function isObject(thing: any) {\n  if (typeof File !== 'undefined' && thing instanceof File) {\n    return false;\n  }\n  if (typeof Date !== 'undefined' && thing instanceof Date) {\n    return false;\n  }\n  return typeof thing === 'object' && thing !== null && !Array.isArray(thing);\n}\n","/** Below are the list of all the keys into various elements of a RJSFSchema or UiSchema that are used by the various\n * utility functions. In addition to those keys, there are the special `ADDITIONAL_PROPERTY_FLAG` and\n * `RJSF_ADDITONAL_PROPERTIES_FLAG` flags that is added to a schema under certain conditions by the `retrieveSchema()`\n * utility.\n */\nexport const ADDITIONAL_PROPERTY_FLAG = '__additional_property';\nexport const ADDITIONAL_PROPERTIES_KEY = 'additionalProperties';\nexport const ALL_OF_KEY = 'allOf';\nexport const ANY_OF_KEY = 'anyOf';\nexport const CONST_KEY = 'const';\nexport const DEFAULT_KEY = 'default';\nexport const DEFINITIONS_KEY = 'definitions';\nexport const DEPENDENCIES_KEY = 'dependencies';\nexport const ENUM_KEY = 'enum';\nexport const ERRORS_KEY = '__errors';\nexport const ID_KEY = '$id';\nexport const IF_KEY = 'if';\nexport const ITEMS_KEY = 'items';\nexport const JUNK_OPTION_ID = '_$junk_option_schema_id$_';\nexport const NAME_KEY = '$name';\nexport const ONE_OF_KEY = 'oneOf';\nexport const PROPERTIES_KEY = 'properties';\nexport const REQUIRED_KEY = 'required';\nexport const SUBMIT_BTN_OPTIONS_KEY = 'submitButtonOptions';\nexport const REF_KEY = '$ref';\nexport const RJSF_ADDITONAL_PROPERTIES_FLAG = '__rjsf_additionalProperties';\nexport const ROOT_SCHEMA_PREFIX = '__rjsf_rootSchema';\nexport const UI_FIELD_KEY = 'ui:field';\nexport const UI_WIDGET_KEY = 'ui:widget';\nexport const UI_OPTIONS_KEY = 'ui:options';\nexport const UI_GLOBAL_OPTIONS_KEY = 'ui:globalOptions';\n","import { UI_OPTIONS_KEY, UI_WIDGET_KEY } from './constants';\nimport isObject from './isObject';\nimport { FormContextType, GlobalUISchemaOptions, RJSFSchema, StrictRJSFSchema, UIOptionsType, UiSchema } from './types';\n\n/** Get all passed options from ui:options, and ui:<optionName>, returning them in an object with the `ui:`\n * stripped off. Any `globalOptions` will always be returned, unless they are overridden by options in the `uiSchema`.\n *\n * @param [uiSchema={}] - The UI Schema from which to get any `ui:xxx` options\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - An object containing all the `ui:xxx` options with the `ui:` stripped off along with all `globalOptions`\n */\nexport default function getUiOptions<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  uiSchema: UiSchema<T, S, F> = {},\n  globalOptions: GlobalUISchemaOptions = {}\n): UIOptionsType<T, S, F> {\n  return Object.keys(uiSchema)\n    .filter((key) => key.indexOf('ui:') === 0)\n    .reduce(\n      (options, key) => {\n        const value = uiSchema[key];\n        if (key === UI_WIDGET_KEY && isObject(value)) {\n          console.error('Setting options via ui:widget object is no longer supported, use ui:options instead');\n          return options;\n        }\n        if (key === UI_OPTIONS_KEY && isObject(value)) {\n          return { ...options, ...value };\n        }\n        return { ...options, [key.substring(3)]: value };\n      },\n      { ...globalOptions }\n    );\n}\n","import isEqualWith from 'lodash/isEqualWith';\n\n/** Implements a deep equals using the `lodash.isEqualWith` function, that provides a customized comparator that\n * assumes all functions are equivalent.\n *\n * @param a - The first element to compare\n * @param b - The second element to compare\n * @returns - True if the `a` and `b` are deeply equal, false otherwise\n */\nexport default function deepEquals(a: any, b: any): boolean {\n  return isEqualWith(a, b, (obj: any, other: any) => {\n    if (typeof obj === 'function' && typeof other === 'function') {\n      // Assume all functions are equivalent\n      // see https://github.com/rjsf-team/react-jsonschema-form/issues/255\n      return true;\n    }\n    return undefined; // fallback to default isEquals behavior\n  });\n}\n","import jsonpointer from 'jsonpointer';\nimport omit from 'lodash/omit';\n\nimport { REF_KEY } from './constants';\nimport { GenericObjectType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Splits out the value at the `key` in `object` from the `object`, returning an array that contains in the first\n * location, the `object` minus the `key: value` and in the second location the `value`.\n *\n * @param key - The key from the object to extract\n * @param object - The object from which to extract the element\n * @returns - An array with the first value being the object minus the `key` element and the second element being the\n *      value from `object[key]`\n */\nexport function splitKeyElementFromObject(key: string, object: GenericObjectType) {\n  const value = object[key];\n  const remaining = omit(object, [key]);\n  return [remaining, value];\n}\n\n/** Given the name of a `$ref` from within a schema, using the `rootSchema`, look up and return the sub-schema using the\n * path provided by that reference. If `#` is not the first character of the reference, or the path does not exist in\n * the schema, then throw an Error. Otherwise return the sub-schema. Also deals with nested `$ref`s in the sub-schema.\n *\n * @param $ref - The ref string for which the schema definition is desired\n * @param [rootSchema={}] - The root schema in which to search for the definition\n * @returns - The sub-schema within the `rootSchema` which matches the `$ref` if it exists\n * @throws - Error indicating that no schema for that reference exists\n */\nexport default function findSchemaDefinition<S extends StrictRJSFSchema = RJSFSchema>(\n  $ref?: string,\n  rootSchema: S = {} as S\n): S {\n  let ref = $ref || '';\n  if (ref.startsWith('#')) {\n    // Decode URI fragment representation.\n    ref = decodeURIComponent(ref.substring(1));\n  } else {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  const current: S = jsonpointer.get(rootSchema, ref);\n  if (current === undefined) {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  if (current[REF_KEY]) {\n    const [remaining, theRef] = splitKeyElementFromObject(REF_KEY, current);\n    const subSchema = findSchemaDefinition<S>(theRef, rootSchema);\n    if (Object.keys(remaining).length > 0) {\n      return { ...remaining, ...subSchema };\n    }\n    return subSchema;\n  }\n  return current;\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\n\nimport { PROPERTIES_KEY } from '../constants';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n * Deprecated, use `getFirstMatchingOption()` instead.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the matched option or 0 if none is available\n * @deprecated\n */\nexport default function getMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S,\n  discriminatorField?: string\n): number {\n  // For performance, skip validating subschemas if formData is undefined. We just\n  // want to get the first option in that case.\n  if (formData === undefined) {\n    return 0;\n  }\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n\n    // If we have a discriminator field, then we will use this to make the determination\n    if (discriminatorField && has(option, [PROPERTIES_KEY, discriminatorField])) {\n      const value = get(formData, discriminatorField);\n      const discriminator = get(option, [PROPERTIES_KEY, discriminatorField], {});\n      if (validator.isValid(discriminator, value, rootSchema)) {\n        return i;\n      }\n    } else if (option[PROPERTIES_KEY]) {\n      // If the schema describes an object then we need to add slightly more\n      // strict matching to the schema, because unless the schema uses the\n      // \"requires\" keyword, an object will match the schema as long as it\n      // doesn't have matching keys with a conflicting type. To do this we use an\n      // \"anyOf\" with an array of requires. This augmentation expresses that the\n      // schema should match if any of the keys in the schema are present on the\n      // object and pass validation.\n      //\n      // Create an \"anyOf\" schema that requires at least one of the keys in the\n      // \"properties\" object\n      const requiresAnyOf = {\n        anyOf: Object.keys(option[PROPERTIES_KEY]).map((key) => ({\n          required: [key],\n        })),\n      };\n\n      let augmentedSchema;\n\n      // If the \"anyOf\" keyword already exists, wrap the augmentation in an \"allOf\"\n      if (option.anyOf) {\n        // Create a shallow clone of the option\n        const { ...shallowClone } = option;\n\n        if (!shallowClone.allOf) {\n          shallowClone.allOf = [];\n        } else {\n          // If \"allOf\" already exists, shallow clone the array\n          shallowClone.allOf = shallowClone.allOf.slice();\n        }\n\n        shallowClone.allOf.push(requiresAnyOf);\n\n        augmentedSchema = shallowClone;\n      } else {\n        augmentedSchema = Object.assign({}, option, requiresAnyOf);\n      }\n\n      // Remove the \"required\" field as it's likely that not all fields have\n      // been filled in yet, which will mean that the schema is not valid\n      delete augmentedSchema.required;\n\n      if (validator.isValid(augmentedSchema, formData, rootSchema)) {\n        return i;\n      }\n    } else if (validator.isValid(option, formData, rootSchema)) {\n      return i;\n    }\n  }\n  return 0;\n}\n","import getMatchingOption from './getMatchingOption';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n * Always returns the first option if there is nothing that matches.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the first matched option or 0 if none is available\n */\nexport default function getFirstMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S,\n  discriminatorField?: string\n): number {\n  return getMatchingOption<T, S, F>(validator, formData, options, rootSchema, discriminatorField);\n}\n","import get from 'lodash/get';\nimport isString from 'lodash/isString';\n\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the `discriminator.propertyName` when defined in the `schema` if it is a string. A warning is generated when\n * it is not a string. Returns `undefined` when a valid discriminator is not present.\n *\n * @param schema - The schema from which the discriminator is potentially obtained\n * @returns - The `discriminator.propertyName` if it exists in the schema, otherwise `undefined`\n */\nexport default function getDiscriminatorFieldFromSchema<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  let discriminator: string | undefined;\n  const maybeString = get(schema, 'discriminator.propertyName', undefined);\n  if (isString(maybeString)) {\n    discriminator = maybeString;\n  } else if (maybeString !== undefined) {\n    console.warn(`Expecting discriminator to be a string, got \"${typeof maybeString}\" instead`);\n  }\n  return discriminator;\n}\n","/** Given a specific `value` attempts to guess the type of a schema element. In the case where we have to implicitly\n *  create a schema, it is useful to know what type to use based on the data we are defining.\n *\n * @param value - The value from which to guess the type\n * @returns - The best guess for the object type\n */\nexport default function guessType(value: any) {\n  if (Array.isArray(value)) {\n    return 'array';\n  }\n  if (typeof value === 'string') {\n    return 'string';\n  }\n  if (value == null) {\n    return 'null';\n  }\n  if (typeof value === 'boolean') {\n    return 'boolean';\n  }\n  if (!isNaN(value)) {\n    return 'number';\n  }\n  if (typeof value === 'object') {\n    return 'object';\n  }\n  // Default to string if we can't figure it out\n  return 'string';\n}\n","import guessType from './guessType';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Gets the type of a given `schema`. If the type is not explicitly defined, then an attempt is made to infer it from\n * other elements of the schema as follows:\n * - schema.const: Returns the `guessType()` of that value\n * - schema.enum: Returns `string`\n * - schema.properties: Returns `object`\n * - schema.additionalProperties: Returns `object`\n * - type is an array with a length of 2 and one type is 'null': Returns the other type\n *\n * @param schema - The schema for which to get the type\n * @returns - The type of the schema\n */\nexport default function getSchemaType<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): string | string[] | undefined {\n  let { type } = schema;\n\n  if (!type && schema.const) {\n    return guessType(schema.const);\n  }\n\n  if (!type && schema.enum) {\n    return 'string';\n  }\n\n  if (!type && (schema.properties || schema.additionalProperties)) {\n    return 'object';\n  }\n\n  if (Array.isArray(type) && type.length === 2 && type.includes('null')) {\n    type = type.find((type) => type !== 'null');\n  }\n\n  return type;\n}\n","import union from 'lodash/union';\n\nimport { REQUIRED_KEY } from './constants';\nimport getSchemaType from './getSchemaType';\nimport isObject from './isObject';\nimport { GenericObjectType } from './types';\n\n/** Recursively merge deeply nested schemas. The difference between `mergeSchemas` and `mergeObjects` is that\n * `mergeSchemas` only concats arrays for values under the 'required' keyword, and when it does, it doesn't include\n * duplicate values.\n *\n * @param obj1 - The first schema object to merge\n * @param obj2 - The second schema object to merge\n * @returns - The merged schema object\n */\nexport default function mergeSchemas(obj1: GenericObjectType, obj2: GenericObjectType) {\n  const acc = Object.assign({}, obj1); // Prevent mutation of source object.\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeSchemas(left, right);\n    } else if (\n      obj1 &&\n      obj2 &&\n      (getSchemaType(obj1) === 'object' || getSchemaType(obj2) === 'object') &&\n      key === REQUIRED_KEY &&\n      Array.isArray(left) &&\n      Array.isArray(right)\n    ) {\n      // Don't include duplicate values when merging 'required' fields.\n      acc[key] = union(left, right);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, acc);\n}\n","import get from 'lodash/get';\nimport set from 'lodash/set';\nimport times from 'lodash/times';\nimport transform from 'lodash/transform';\nimport mergeAllOf, { Options } from 'json-schema-merge-allof';\n\nimport {\n  ADDITIONAL_PROPERTIES_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  DEPENDENCIES_KEY,\n  IF_KEY,\n  ONE_OF_KEY,\n  REF_KEY,\n  PROPERTIES_KEY,\n  ITEMS_KEY,\n} from '../constants';\nimport findSchemaDefinition, { splitKeyElementFromObject } from '../findSchemaDefinition';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport guessType from '../guessType';\nimport isObject from '../isObject';\nimport mergeSchemas from '../mergeSchemas';\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport getFirstMatchingOption from './getFirstMatchingOption';\n\n/** Retrieves an expanded schema that has had all of its conditions, additional properties, references and dependencies\n * resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData` that is used to do the\n * potentially recursive resolution.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n */\nexport default function retrieveSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S = {} as S, rawFormData?: T): S {\n  return retrieveSchemaInternal<T, S, F>(validator, schema, rootSchema, rawFormData)[0];\n}\n\n/** Resolves a conditional block (if/else/then) by removing the condition and merging the appropriate conditional branch\n * with the rest of the schema. If `expandAllBranches` is true, then the `retrieveSchemaInteral()` results for both\n * conditions will be returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that is used to detect valid schema conditions\n * @param schema - The schema for which resolving a condition is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and\n *          dependencies as a list of schemas\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns - A list of schemas with the appropriate conditions resolved, possibly with all branches expanded\n */\nexport function resolveCondition<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  const { if: expression, then, else: otherwise, ...resolvedSchemaLessConditional } = schema;\n\n  const conditionValue = validator.isValid(expression as S, formData || ({} as T), rootSchema);\n  let resolvedSchemas = [resolvedSchemaLessConditional as S];\n  let schemas: S[] = [];\n  if (expandAllBranches) {\n    if (then && typeof then !== 'boolean') {\n      schemas = schemas.concat(\n        retrieveSchemaInternal<T, S, F>(validator, then as S, rootSchema, formData, expandAllBranches)\n      );\n    }\n    if (otherwise && typeof otherwise !== 'boolean') {\n      schemas = schemas.concat(\n        retrieveSchemaInternal<T, S, F>(validator, otherwise as S, rootSchema, formData, expandAllBranches)\n      );\n    }\n  } else {\n    const conditionalSchema = conditionValue ? then : otherwise;\n    if (conditionalSchema && typeof conditionalSchema !== 'boolean') {\n      schemas = schemas.concat(\n        retrieveSchemaInternal<T, S, F>(validator, conditionalSchema as S, rootSchema, formData, expandAllBranches)\n      );\n    }\n  }\n  if (schemas.length) {\n    resolvedSchemas = schemas.map((s) => mergeSchemas(resolvedSchemaLessConditional, s) as S);\n  }\n  return resolvedSchemas.flatMap((s) =>\n    retrieveSchemaInternal<T, S, F>(validator, s, rootSchema, formData, expandAllBranches)\n  );\n}\n\n/** Given a list of lists of allOf, anyOf or oneOf values, create a list of lists of all permutations of the values. The\n * `listOfLists` is expected to be all resolved values of the 1st...nth schemas within an `allOf`, `anyOf` or `oneOf`.\n * From those lists, build a matrix for each `xxxOf` where there is more than one schema for a row in the list of lists.\n *\n * For example:\n * - If there are three xxxOf rows (A, B, C) and they have been resolved such that there is only one A, two B and three\n *   C schemas then:\n *   - The permutation for the first row is `[[A]]`\n *   - The permutations for the second row are `[[A,B1], [A,B2]]`\n *   - The permutations for the third row are `[[A,B1,C1], [A,B1,C2], [A,B1,C3], [A,B2,C1], [A,B2,C2], [A,B2,C3]]`\n *\n * @param listOfLists - The list of lists of elements that represent the allOf, anyOf or oneOf resolved values in order\n * @returns - The list of all permutations of schemas for a set of `xxxOf`s\n */\nexport function getAllPermutationsOfXxxOf<S extends StrictRJSFSchema = RJSFSchema>(listOfLists: S[][]) {\n  const allPermutations: S[][] = listOfLists.reduce<S[][]>(\n    (permutations, list) => {\n      // When there are more than one set of schemas for a row, duplicate the set of permutations and add in the values\n      if (list.length > 1) {\n        return list.flatMap((element) => times(permutations.length, (i) => [...permutations[i]].concat(element)));\n      }\n      // Otherwise just push in the single value into the current set of permutations\n      permutations.forEach((permutation) => permutation.push(list[0]));\n      return permutations;\n    },\n    [[]] as S[][] // Start with an empty list\n  );\n\n  return allPermutations;\n}\n\n/** Resolves references and dependencies within a schema and its 'allOf' children. Passes the `expandAllBranches` flag\n * down to the `retrieveSchemaInternal()`, `resolveReference()` and `resolveDependencies()` helper calls. If\n * `expandAllBranches` is true, then all possible dependencies and/or allOf branches are returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list of schemas having its references, dependencies and allOf schemas resolved\n */\nexport function resolveSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  if (REF_KEY in schema) {\n    return resolveReference<T, S, F>(validator, schema, rootSchema, expandAllBranches, formData);\n  }\n  if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchemas = resolveDependencies<T, S, F>(validator, schema, rootSchema, expandAllBranches, formData);\n    return resolvedSchemas.flatMap((s) => {\n      return retrieveSchemaInternal<T, S, F>(validator, s, rootSchema, formData, expandAllBranches);\n    });\n  }\n  if (ALL_OF_KEY in schema && Array.isArray(schema.allOf)) {\n    const allOfSchemaElements: S[][] = schema.allOf.map((allOfSubschema) =>\n      retrieveSchemaInternal<T, S, F>(validator, allOfSubschema as S, rootSchema, formData, expandAllBranches)\n    );\n    const allPermutations = getAllPermutationsOfXxxOf<S>(allOfSchemaElements);\n    return allPermutations.map((permutation) => ({ ...schema, allOf: permutation }));\n  }\n  // No $ref or dependencies or allOf attribute was found, returning the original schema.\n  return [schema];\n}\n\n/** Resolves references within a schema and then returns the `retrieveSchemaInternal()` of the resolved schema. Passes\n * the `expandAllBranches` flag down to the `retrieveSchemaInternal()` helper call.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a reference is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list schemas retrieved after having all references resolved\n */\nexport function resolveReference<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  // Drop the $ref property of the source schema.\n  const { $ref, ...localSchema } = schema;\n  // Retrieve the referenced schema definition.\n  const refSchema = findSchemaDefinition<S>($ref, rootSchema);\n  // Update referenced schema definition with local schema properties.\n  return retrieveSchemaInternal<T, S, F>(\n    validator,\n    { ...refSchema, ...localSchema },\n    rootSchema,\n    formData,\n    expandAllBranches\n  );\n}\n\n/** Resolves all references within a schema's properties and array items.\n *\n * @param schema - The schema for which resolving all references is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @returns - given schema will all references resolved\n */\nexport function resolveAllReferences<S extends StrictRJSFSchema = RJSFSchema>(schema: S, rootSchema: S): S {\n  let resolvedSchema: S = schema;\n  // resolve top level ref\n  if (REF_KEY in resolvedSchema) {\n    const { $ref, ...localSchema } = resolvedSchema;\n    // Retrieve the referenced schema definition.\n    const refSchema = findSchemaDefinition<S>($ref, rootSchema);\n    resolvedSchema = { ...refSchema, ...localSchema };\n  }\n\n  if (PROPERTIES_KEY in resolvedSchema) {\n    const updatedProps = transform(\n      resolvedSchema[PROPERTIES_KEY]!,\n      (result, value, key: string) => {\n        result[key] = resolveAllReferences(value as S, rootSchema);\n      },\n      {} as RJSFSchema\n    );\n    resolvedSchema = { ...resolvedSchema, [PROPERTIES_KEY]: updatedProps };\n  }\n\n  if (\n    ITEMS_KEY in resolvedSchema &&\n    !Array.isArray(resolvedSchema.items) &&\n    typeof resolvedSchema.items !== 'boolean'\n  ) {\n    resolvedSchema = { ...resolvedSchema, items: resolveAllReferences(resolvedSchema.items as S, rootSchema) };\n  }\n\n  return resolvedSchema;\n}\n\n/** Creates new 'properties' items for each key in the `formData`\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the existing additional properties is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s * @param validator\n * @param [aFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The updated schema with additional properties stubbed\n */\nexport function stubExistingAdditionalProperties<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, theSchema: S, rootSchema?: S, aFormData?: T): S {\n  // Clone the schema so that we don't ruin the consumer's original\n  const schema = {\n    ...theSchema,\n    properties: { ...theSchema.properties },\n  };\n\n  // make sure formData is an object\n  const formData: GenericObjectType = aFormData && isObject(aFormData) ? aFormData : {};\n  Object.keys(formData).forEach((key) => {\n    if (key in schema.properties) {\n      // No need to stub, our schema already has the property\n      return;\n    }\n\n    let additionalProperties: S['additionalProperties'] = {};\n    if (typeof schema.additionalProperties !== 'boolean') {\n      if (REF_KEY in schema.additionalProperties!) {\n        additionalProperties = retrieveSchema<T, S, F>(\n          validator,\n          { $ref: get(schema.additionalProperties, [REF_KEY]) } as S,\n          rootSchema,\n          formData as T\n        );\n      } else if ('type' in schema.additionalProperties!) {\n        additionalProperties = { ...schema.additionalProperties };\n      } else if (ANY_OF_KEY in schema.additionalProperties! || ONE_OF_KEY in schema.additionalProperties!) {\n        additionalProperties = {\n          type: 'object',\n          ...schema.additionalProperties,\n        };\n      } else {\n        additionalProperties = { type: guessType(get(formData, [key])) };\n      }\n    } else {\n      additionalProperties = { type: guessType(get(formData, [key])) };\n    }\n\n    // The type of our new key should match the additionalProperties value;\n    schema.properties[key] = additionalProperties;\n    // Set our additional property flag so we know it was dynamically added\n    set(schema.properties, [key, ADDITIONAL_PROPERTY_FLAG], true);\n  });\n\n  return schema;\n}\n\n/** Internal handler that retrieves an expanded schema that has had all of its conditions, additional properties,\n * references and dependencies resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData`\n * that is used to do the potentially recursive resolution. If `expandAllBranches` is true, then all possible branches\n * of the schema and its references, conditions and dependencies are returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @param [expandAllBranches=false] - Flag, if true, will return all possible branches of conditions, any/oneOf and\n *          dependencies as a list of schemas\n * @returns - The schema(s) resulting from having its conditions, additional properties, references and dependencies\n *          resolved. Multiple schemas may be returned if `expandAllBranches` is true.\n */\nexport function retrieveSchemaInternal<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S, rawFormData?: T, expandAllBranches = false): S[] {\n  if (!isObject(schema)) {\n    return [{} as S];\n  }\n  const resolvedSchemas = resolveSchema<T, S, F>(validator, schema, rootSchema, expandAllBranches, rawFormData);\n  return resolvedSchemas.flatMap((s: S) => {\n    let resolvedSchema = s;\n    if (IF_KEY in resolvedSchema) {\n      return resolveCondition<T, S, F>(validator, resolvedSchema, rootSchema, expandAllBranches, rawFormData as T);\n    }\n    if (ALL_OF_KEY in resolvedSchema) {\n      // resolve allOf schemas\n      if (expandAllBranches) {\n        return [...(resolvedSchema.allOf as S[])];\n      }\n      try {\n        resolvedSchema = mergeAllOf(resolvedSchema, {\n          deep: false,\n        } as Options) as S;\n      } catch (e) {\n        console.warn('could not merge subschemas in allOf:\\n', e);\n        const { allOf, ...resolvedSchemaWithoutAllOf } = resolvedSchema;\n        return resolvedSchemaWithoutAllOf as S;\n      }\n    }\n    const hasAdditionalProperties =\n      ADDITIONAL_PROPERTIES_KEY in resolvedSchema && resolvedSchema.additionalProperties !== false;\n    if (hasAdditionalProperties) {\n      return stubExistingAdditionalProperties<T, S, F>(validator, resolvedSchema, rootSchema, rawFormData as T);\n    }\n\n    return resolvedSchema;\n  });\n}\n\n/** Resolves an `anyOf` or `oneOf` within a schema (if present) to the list of schemas returned from\n * `retrieveSchemaInternal()` for the best matching option. If `expandAllBranches` is true, then a list of schemas for ALL\n * options are retrieved and returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema, defaults to an empty object\n * @returns - Either an array containing the best matching option or all options if `expandAllBranches` is true\n */\nexport function resolveAnyOrOneOfSchemas<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S, expandAllBranches: boolean, rawFormData?: T) {\n  let anyOrOneOf: S[] | undefined;\n  const { oneOf, anyOf, ...remaining } = schema;\n  if (Array.isArray(oneOf)) {\n    anyOrOneOf = oneOf as S[];\n  } else if (Array.isArray(anyOf)) {\n    anyOrOneOf = anyOf as S[];\n  }\n  if (anyOrOneOf) {\n    // Ensure that during expand all branches we pass an object rather than undefined so that all options are interrogated\n    const formData = rawFormData === undefined && expandAllBranches ? ({} as T) : rawFormData;\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    anyOrOneOf = anyOrOneOf.map((s) => {\n      return resolveAllReferences(s, rootSchema);\n    });\n    // Call this to trigger the set of isValid() calls that the schema parser will need\n    const option = getFirstMatchingOption<T, S, F>(validator, formData, anyOrOneOf, rootSchema, discriminator);\n    if (expandAllBranches) {\n      return anyOrOneOf.map((item) => mergeSchemas(remaining, item) as S);\n    }\n    schema = mergeSchemas(remaining, anyOrOneOf[option]) as S;\n  }\n  return [schema];\n}\n\n/** Resolves dependencies within a schema and its 'anyOf/oneOf' children. Passes the `expandAllBranches` flag down to\n * the `resolveAnyOrOneOfSchema()` and `processDependencies()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependency is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list of schemas with their dependencies resolved\n */\nexport function resolveDependencies<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  // Drop the dependencies from the source schema.\n  const { dependencies, ...remainingSchema } = schema;\n  const resolvedSchemas = resolveAnyOrOneOfSchemas<T, S, F>(\n    validator,\n    remainingSchema as S,\n    rootSchema,\n    expandAllBranches,\n    formData\n  );\n  return resolvedSchemas.flatMap((resolvedSchema) =>\n    processDependencies<T, S, F>(validator, dependencies, resolvedSchema, rootSchema, expandAllBranches, formData)\n  );\n}\n\n/** Processes all the `dependencies` recursively into the list of `resolvedSchema`s as needed. Passes the\n * `expandAllBranches` flag down to the `withDependentSchema()` and the recursive `processDependencies()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param dependencies - The set of dependencies that needs to be processed\n * @param resolvedSchema - The schema for which processing dependencies is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with the `dependencies` resolved into it\n */\nexport function processDependencies<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  dependencies: S['dependencies'],\n  resolvedSchema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  let schemas = [resolvedSchema];\n  // Process dependencies updating the local schema properties as appropriate.\n  for (const dependencyKey in dependencies) {\n    // Skip this dependency if its trigger property is not present.\n    if (!expandAllBranches && get(formData, [dependencyKey]) === undefined) {\n      continue;\n    }\n    // Skip this dependency if it is not included in the schema (such as when dependencyKey is itself a hidden dependency.)\n    if (resolvedSchema.properties && !(dependencyKey in resolvedSchema.properties)) {\n      continue;\n    }\n    const [remainingDependencies, dependencyValue] = splitKeyElementFromObject(\n      dependencyKey,\n      dependencies as GenericObjectType\n    );\n    if (Array.isArray(dependencyValue)) {\n      schemas[0] = withDependentProperties<S>(resolvedSchema, dependencyValue);\n    } else if (isObject(dependencyValue)) {\n      schemas = withDependentSchema<T, S, F>(\n        validator,\n        resolvedSchema,\n        rootSchema,\n        dependencyKey,\n        dependencyValue as S,\n        expandAllBranches,\n        formData\n      );\n    }\n    return schemas.flatMap((schema) =>\n      processDependencies<T, S, F>(validator, remainingDependencies, schema, rootSchema, expandAllBranches, formData)\n    );\n  }\n  return schemas;\n}\n\n/** Updates a schema with additionally required properties added\n *\n * @param schema - The schema for which resolving a dependent properties is desired\n * @param [additionallyRequired] - An optional array of additionally required names\n * @returns - The schema with the additional required values merged in\n */\nexport function withDependentProperties<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  additionallyRequired?: string[]\n) {\n  if (!additionallyRequired) {\n    return schema;\n  }\n  const required = Array.isArray(schema.required)\n    ? Array.from(new Set([...schema.required, ...additionallyRequired]))\n    : additionallyRequired;\n  return { ...schema, required: required };\n}\n\n/** Merges a dependent schema into the `schema` dealing with oneOfs and references. Passes the `expandAllBranches` flag\n * down to the `retrieveSchemaInternal()`, `resolveReference()` and `withExactlyOneSubschema()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependent schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the dependency\n * @param dependencyValue - The potentially dependent schema\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData]- The current formData to assist retrieving a schema\n * @returns - The list of schemas with the dependent schema resolved into them\n */\nexport function withDependentSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  dependencyValue: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  const dependentSchemas = retrieveSchemaInternal<T, S, F>(\n    validator,\n    dependencyValue,\n    rootSchema,\n    formData,\n    expandAllBranches\n  );\n  return dependentSchemas.flatMap((dependent) => {\n    const { oneOf, ...dependentSchema } = dependent;\n    schema = mergeSchemas(schema, dependentSchema) as S;\n    // Since it does not contain oneOf, we return the original schema.\n    if (oneOf === undefined) {\n      return schema;\n    }\n    // Resolve $refs inside oneOf.\n    const resolvedOneOfs = oneOf.map((subschema) => {\n      if (typeof subschema === 'boolean' || !(REF_KEY in subschema)) {\n        return [subschema as S];\n      }\n      return resolveReference<T, S, F>(validator, subschema as S, rootSchema, expandAllBranches, formData);\n    });\n    const allPermutations = getAllPermutationsOfXxxOf(resolvedOneOfs);\n    return allPermutations.flatMap((resolvedOneOf) =>\n      withExactlyOneSubschema<T, S, F>(\n        validator,\n        schema,\n        rootSchema,\n        dependencyKey,\n        resolvedOneOf,\n        expandAllBranches,\n        formData\n      )\n    );\n  });\n}\n\n/** Returns a list of `schema`s with the best choice from the `oneOf` options merged into it. If `expandAllBranches` is\n * true, then a list of schemas for ALL options are retrieved and returned. Passes the `expandAllBranches` flag down to\n * the `retrieveSchemaInternal()` helper call.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used to validate oneOf options\n * @param schema - The schema for which resolving a oneOf subschema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the oneOf dependency\n * @param oneOf - The list of schemas representing the oneOf options\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns - Either an array containing the best matching option or all options if `expandAllBranches` is true\n */\nexport function withExactlyOneSubschema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  oneOf: S['oneOf'],\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  const validSubschemas = oneOf!.filter((subschema) => {\n    if (typeof subschema === 'boolean' || !subschema || !subschema.properties) {\n      return false;\n    }\n    const { [dependencyKey]: conditionPropertySchema } = subschema.properties;\n    if (conditionPropertySchema) {\n      const conditionSchema: S = {\n        type: 'object',\n        properties: {\n          [dependencyKey]: conditionPropertySchema,\n        },\n      } as S;\n      return validator.isValid(conditionSchema, formData, rootSchema) || expandAllBranches;\n    }\n    return false;\n  });\n\n  if (!expandAllBranches && validSubschemas!.length !== 1) {\n    console.warn(\"ignoring oneOf in dependencies because there isn't exactly one subschema that is valid\");\n    return [schema];\n  }\n  return validSubschemas.flatMap((s) => {\n    const subschema: S = s as S;\n    const [dependentSubschema] = splitKeyElementFromObject(dependencyKey, subschema.properties as GenericObjectType);\n    const dependentSchema = { ...subschema, properties: dependentSubschema };\n    const schemas = retrieveSchemaInternal<T, S, F>(\n      validator,\n      dependentSchema,\n      rootSchema,\n      formData,\n      expandAllBranches\n    );\n    return schemas.map((s) => mergeSchemas(schema, s) as S);\n  });\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport reduce from 'lodash/reduce';\nimport times from 'lodash/times';\n\nimport getFirstMatchingOption from './getFirstMatchingOption';\nimport retrieveSchema, { resolveAllReferences } from './retrieveSchema';\nimport { ONE_OF_KEY, REF_KEY, JUNK_OPTION_ID, ANY_OF_KEY } from '../constants';\nimport guessType from '../guessType';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\n\n/** A junk option used to determine when the getFirstMatchingOption call really matches an option rather than returning\n * the first item\n */\nexport const JUNK_OPTION: StrictRJSFSchema = {\n  type: 'object',\n  $id: JUNK_OPTION_ID,\n  properties: {\n    __not_really_there__: {\n      type: 'number',\n    },\n  },\n};\n\n/** Recursive function that calculates the score of a `formData` against the given `schema`. The computation is fairly\n * simple. Initially the total score is 0. When `schema.properties` object exists, then all the `key/value` pairs within\n * the object are processed as follows after obtaining the formValue from `formData` using the `key`:\n * - If the `value` contains a `$ref`, `calculateIndexScore()` is called recursively with the formValue and the new\n *   schema that is the result of the ref in the schema being resolved and that sub-schema's resulting score is added to\n *   the total.\n * - If the `value` contains a `oneOf` and there is a formValue, then score based on the index returned from calling\n *   `getClosestMatchingOption()` of that oneOf.\n * - If the type of the `value` is 'object', `calculateIndexScore()` is called recursively with the formValue and the\n *   `value` itself as the sub-schema, and the score is added to the total.\n * - If the type of the `value` matches the guessed-type of the `formValue`, the score is incremented by 1, UNLESS the\n *   value has a `default` or `const`. In those case, if the `default` or `const` and the `formValue` match, the score\n *   is incremented by another 1 otherwise it is decremented by 1.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param schema - The schema for which the score is being calculated\n * @param formData - The form data associated with the schema, used to calculate the score\n * @returns - The score a schema against the formData\n */\nexport function calculateIndexScore<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  schema?: S,\n  formData: any = {}\n): number {\n  let totalScore = 0;\n  if (schema) {\n    if (isObject(schema.properties)) {\n      totalScore += reduce(\n        schema.properties,\n        (score, value, key) => {\n          const formValue = get(formData, key);\n          if (typeof value === 'boolean') {\n            return score;\n          }\n          if (has(value, REF_KEY)) {\n            const newSchema = retrieveSchema<T, S, F>(validator, value as S, rootSchema, formValue);\n            return score + calculateIndexScore<T, S, F>(validator, rootSchema, newSchema, formValue || {});\n          }\n          if ((has(value, ONE_OF_KEY) || has(value, ANY_OF_KEY)) && formValue) {\n            const key = has(value, ONE_OF_KEY) ? ONE_OF_KEY : ANY_OF_KEY;\n            const discriminator = getDiscriminatorFieldFromSchema<S>(value as S);\n            return (\n              score +\n              getClosestMatchingOption<T, S, F>(\n                validator,\n                rootSchema,\n                formValue,\n                get(value, key) as S[],\n                -1,\n                discriminator\n              )\n            );\n          }\n          if (value.type === 'object') {\n            return score + calculateIndexScore<T, S, F>(validator, rootSchema, value as S, formValue || {});\n          }\n          if (value.type === guessType(formValue)) {\n            // If the types match, then we bump the score by one\n            let newScore = score + 1;\n            if (value.default) {\n              // If the schema contains a readonly default value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.default ? 1 : -1;\n            } else if (value.const) {\n              // If the schema contains a const value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.const ? 1 : -1;\n            }\n            // TODO eventually, deal with enums/arrays\n            return newScore;\n          }\n          return score;\n        },\n        0\n      );\n    } else if (isString(schema.type) && schema.type === guessType(formData)) {\n      totalScore += 1;\n    }\n  }\n  return totalScore;\n}\n\n/** Determines which of the given `options` provided most closely matches the `formData`. Using\n * `getFirstMatchingOption()` to match two schemas that differ only by the readOnly, default or const value of a field\n * based on the `formData` and returns 0 when there is no match. Rather than passing in all the `options` at once to\n * this utility, instead an array of valid option indexes is created by iterating over the list of options, call\n * `getFirstMatchingOptions` with a list of one junk option and one good option, seeing if the good option is considered\n * matched.\n *\n * Once the list of valid indexes is created, if there is only one valid index, just return it. Otherwise, if there are\n * no valid indexes, then fill the valid indexes array with the indexes of all the options. Next, the index of the\n * option with the highest score is determined by iterating over the list of valid options, calling\n * `calculateIndexScore()` on each, comparing it against the current best score, and returning the index of the one that\n * eventually has the best score.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param formData - The form data associated with the schema\n * @param options - The list of options that can be selected from\n * @param [selectedOption=-1] - The index of the currently selected option, defaulted to -1 if not specified\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n */\nexport default function getClosestMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  formData: T | undefined,\n  options: S[],\n  selectedOption = -1,\n  discriminatorField?: string\n): number {\n  // First resolve any refs in the options\n  const resolvedOptions = options.map((option) => {\n    return resolveAllReferences(option, rootSchema);\n  });\n  // Reduce the array of options down to a list of the indexes that are considered matching options\n  const allValidIndexes = resolvedOptions.reduce((validList: number[], option, index: number) => {\n    const testOptions: S[] = [JUNK_OPTION as S, option];\n    const match = getFirstMatchingOption<T, S, F>(validator, formData, testOptions, rootSchema, discriminatorField);\n    // The match is the real option, so add its index to list of valid indexes\n    if (match === 1) {\n      validList.push(index);\n    }\n    return validList;\n  }, []);\n\n  // There is only one valid index, so return it!\n  if (allValidIndexes.length === 1) {\n    return allValidIndexes[0];\n  }\n  if (!allValidIndexes.length) {\n    // No indexes were valid, so we'll score all the options, add all the indexes\n    times(resolvedOptions.length, (i) => allValidIndexes.push(i));\n  }\n  type BestType = { bestIndex: number; bestScore: number };\n  const scoreCount = new Set<number>();\n  // Score all the options in the list of valid indexes and return the index with the best score\n  const { bestIndex }: BestType = allValidIndexes.reduce(\n    (scoreData: BestType, index: number) => {\n      const { bestScore } = scoreData;\n      const option = resolvedOptions[index];\n      const score = calculateIndexScore(validator, rootSchema, option, formData);\n      scoreCount.add(score);\n      if (score > bestScore) {\n        return { bestIndex: index, bestScore: score };\n      }\n      return scoreData;\n    },\n    { bestIndex: selectedOption, bestScore: 0 }\n  );\n  // if all scores are the same go with selectedOption\n  if (scoreCount.size === 1 && selectedOption >= 0) {\n    return selectedOption;\n  }\n\n  return bestIndex;\n}\n","import isObject from './isObject';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Detects whether the given `schema` contains fixed items. This is the case when `schema.items` is a non-empty array\n * that only contains objects.\n *\n * @param schema - The schema in which to check for fixed items\n * @returns - True if there are fixed items in the schema, false otherwise\n */\nexport default function isFixedItems<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every((item) => isObject(item));\n}\n","import get from 'lodash/get';\n\nimport isObject from './isObject';\nimport { GenericObjectType } from '../src';\n\n/** Merges the `defaults` object of type `T` into the `formData` of type `T`\n *\n * When merging defaults and form data, we want to merge in this specific way:\n * - objects are deeply merged\n * - arrays are merged in such a way that:\n *   - when the array is set in form data, only array entries set in form data\n *     are deeply merged; additional entries from the defaults are ignored unless `mergeExtraArrayDefaults` is true, in\n *     which case the extras are appended onto the end of the form data\n *   - when the array is not set in form data, the default is copied over\n * - scalars are overwritten/set by form data\n *\n * @param [defaults] - The defaults to merge\n * @param [formData] - The form data into which the defaults will be merged\n * @param [mergeExtraArrayDefaults=false] - If true, any additional default array entries are appended onto the formData\n * @returns - The resulting merged form data with defaults\n */\nexport default function mergeDefaultsWithFormData<T = any>(\n  defaults?: T,\n  formData?: T,\n  mergeExtraArrayDefaults = false\n): T | undefined {\n  if (Array.isArray(formData)) {\n    const defaultsArray = Array.isArray(defaults) ? defaults : [];\n    const mapped = formData.map((value, idx) => {\n      if (defaultsArray[idx]) {\n        return mergeDefaultsWithFormData<any>(defaultsArray[idx], value, mergeExtraArrayDefaults);\n      }\n      return value;\n    });\n    // Merge any extra defaults when mergeExtraArrayDefaults is true\n    if (mergeExtraArrayDefaults && mapped.length < defaultsArray.length) {\n      mapped.push(...defaultsArray.slice(mapped.length));\n    }\n    return mapped as unknown as T;\n  }\n  if (isObject(formData)) {\n    const acc: { [key in keyof T]: any } = Object.assign({}, defaults); // Prevent mutation of source object.\n    return Object.keys(formData as GenericObjectType).reduce((acc, key) => {\n      acc[key as keyof T] = mergeDefaultsWithFormData<T>(\n        defaults ? get(defaults, key) : {},\n        get(formData, key),\n        mergeExtraArrayDefaults\n      );\n      return acc;\n    }, acc);\n  }\n  return formData;\n}\n","import isObject from './isObject';\nimport { GenericObjectType } from './types';\n\n/** Recursively merge deeply nested objects.\n *\n * @param obj1 - The first object to merge\n * @param obj2 - The second object to merge\n * @param [concatArrays=false] - Optional flag that, when true, will cause arrays to be concatenated. Use\n *          \"preventDuplicates\" to merge arrays in a manner that prevents any duplicate entries from being merged.\n *          NOTE: Uses shallow comparison for the duplicate checking.\n * @returns - A new object that is the merge of the two given objects\n */\nexport default function mergeObjects(\n  obj1: GenericObjectType,\n  obj2: GenericObjectType,\n  concatArrays: boolean | 'preventDuplicates' = false\n) {\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeObjects(left, right, concatArrays);\n    } else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {\n      let toMerge = right;\n      if (concatArrays === 'preventDuplicates') {\n        toMerge = right.reduce((result, value) => {\n          if (!left.includes(value)) {\n            result.push(value);\n          }\n          return result;\n        }, []);\n      }\n      acc[key] = left.concat(toMerge);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, Object.assign({}, obj1)); // Prevent mutation of source object.\n}\n","import { CONST_KEY } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** This function checks if the given `schema` matches a single constant value. This happens when either the schema has\n * an `enum` array with a single value or there is a `const` defined.\n *\n * @param schema - The schema for a field\n * @returns - True if the `schema` has a single constant value, false otherwise\n */\nexport default function isConstant<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return (Array.isArray(schema.enum) && schema.enum.length === 1) || CONST_KEY in schema;\n}\n","import isConstant from '../isConstant';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` combination represents a select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which check for a select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a select, otherwise false\n */\nexport default function isSelect<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  rootSchema: S = {} as S\n) {\n  const schema = retrieveSchema<T, S, F>(validator, theSchema, rootSchema, undefined);\n  const altSchemas = schema.oneOf || schema.anyOf;\n  if (Array.isArray(schema.enum)) {\n    return true;\n  }\n  if (Array.isArray(altSchemas)) {\n    return altSchemas.every((altSchemas) => typeof altSchemas !== 'boolean' && isConstant(altSchemas));\n  }\n  return false;\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\nimport isSelect from './isSelect';\n\n/** Checks to see if the `schema` combination represents a multi-select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for a multi-select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a multi-select, otherwise false\n */\nexport default function isMultiSelect<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema?: S) {\n  if (!schema.uniqueItems || !schema.items || typeof schema.items === 'boolean') {\n    return false;\n  }\n  return isSelect<T, S, F>(validator, schema.items as S, rootSchema);\n}\n","import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { ANY_OF_KEY, DEFAULT_KEY, DEPENDENCIES_KEY, PROPERTIES_KEY, ONE_OF_KEY, REF_KEY } from '../constants';\nimport findSchemaDefinition from '../findSchemaDefinition';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport getSchemaType from '../getSchemaType';\nimport isObject from '../isObject';\nimport isFixedItems from '../isFixedItems';\nimport mergeDefaultsWithFormData from '../mergeDefaultsWithFormData';\nimport mergeObjects from '../mergeObjects';\nimport mergeSchemas from '../mergeSchemas';\nimport {\n  Experimental_DefaultFormStateBehavior,\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from '../types';\nimport isMultiSelect from './isMultiSelect';\nimport retrieveSchema, { resolveDependencies } from './retrieveSchema';\n\n/** Enum that indicates how `schema.additionalItems` should be handled by the `getInnerSchemaForArrayItem()` function.\n */\nexport enum AdditionalItemsHandling {\n  Ignore,\n  Invert,\n  Fallback,\n}\n\n/** Given a `schema` will return an inner schema that for an array item. This is computed differently based on the\n * `additionalItems` enum and the value of `idx`. There are four possible returns:\n * 1. If `idx` is >= 0, then if `schema.items` is an array the `idx`th element of the array is returned if it is a valid\n *    index and not a boolean, otherwise it falls through to 3.\n * 2. If `schema.items` is not an array AND truthy and not a boolean, then `schema.items` is returned since it actually\n *    is a schema, otherwise it falls through to 3.\n * 3. If `additionalItems` is not `AdditionalItemsHandling.Ignore` and `schema.additionalItems` is an object, then\n *    `schema.additionalItems` is returned since it actually is a schema, otherwise it falls through to 4.\n * 4. {} is returned representing an empty schema\n *\n * @param schema - The schema from which to get the particular item\n * @param [additionalItems=AdditionalItemsHandling.Ignore] - How do we want to handle additional items?\n * @param [idx=-1] - Index, if non-negative, will be used to return the idx-th element in a `schema.items` array\n * @returns - The best fit schema object from the `schema` given the `additionalItems` and `idx` modifiers\n */\nexport function getInnerSchemaForArrayItem<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  additionalItems: AdditionalItemsHandling = AdditionalItemsHandling.Ignore,\n  idx = -1\n): S {\n  if (idx >= 0) {\n    if (Array.isArray(schema.items) && idx < schema.items.length) {\n      const item = schema.items[idx];\n      if (typeof item !== 'boolean') {\n        return item as S;\n      }\n    }\n  } else if (schema.items && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n    return schema.items as S;\n  }\n  if (additionalItems !== AdditionalItemsHandling.Ignore && isObject(schema.additionalItems)) {\n    return schema.additionalItems as S;\n  }\n  return {} as S;\n}\n\n/** Either add `computedDefault` at `key` into `obj` or not add it based on its value, the value of\n * `includeUndefinedValues`, the value of `emptyObjectFields` and if its parent field is required. Generally undefined\n * `computedDefault` values are added only when `includeUndefinedValues` is either true/\"excludeObjectChildren\". If `\n * includeUndefinedValues` is false and `emptyObjectFields` is not \"skipDefaults\", then non-undefined and non-empty-object\n * values will be added based on certain conditions.\n *\n * @param obj - The object into which the computed default may be added\n * @param key - The key into the object at which the computed default may be added\n * @param computedDefault - The computed default value that maybe should be added to the obj\n * @param includeUndefinedValues - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties. If \"allowEmptyObject\", prevents undefined\n *          values in this object while allow the object itself to be empty and passing `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param isParentRequired - The optional boolean that indicates whether the parent field is required\n * @param requiredFields - The list of fields that are required\n * @param experimental_defaultFormStateBehavior - Optional configuration object, if provided, allows users to override\n *        default form state behavior\n */\nfunction maybeAddDefaultToObject<T = any>(\n  obj: GenericObjectType,\n  key: string,\n  computedDefault: T | T[] | undefined,\n  includeUndefinedValues: boolean | 'excludeObjectChildren',\n  isParentRequired?: boolean,\n  requiredFields: string[] = [],\n  experimental_defaultFormStateBehavior: Experimental_DefaultFormStateBehavior = {}\n) {\n  const { emptyObjectFields = 'populateAllDefaults' } = experimental_defaultFormStateBehavior;\n  if (includeUndefinedValues) {\n    obj[key] = computedDefault;\n  } else if (emptyObjectFields !== 'skipDefaults') {\n    if (isObject(computedDefault)) {\n      // If isParentRequired is undefined, then we are at the root level of the schema so defer to the requiredness of\n      // the field key itself in the `requiredField` list\n      const isSelfOrParentRequired = isParentRequired === undefined ? requiredFields.includes(key) : isParentRequired;\n      // Store computedDefault if it's a non-empty object(e.g. not {}) and satisfies certain conditions\n      // Condition 1: If computedDefault is not empty or if the key is a required field\n      // Condition 2: If the parent object is required or emptyObjectFields is not 'populateRequiredDefaults'\n      if (\n        (!isEmpty(computedDefault) || requiredFields.includes(key)) &&\n        (isSelfOrParentRequired || emptyObjectFields !== 'populateRequiredDefaults')\n      ) {\n        obj[key] = computedDefault;\n      }\n    } else if (\n      // Store computedDefault if it's a defined primitive (e.g., true) and satisfies certain conditions\n      // Condition 1: computedDefault is not undefined\n      // Condition 2: If emptyObjectFields is 'populateAllDefaults' or if the key is a required field\n      computedDefault !== undefined &&\n      (emptyObjectFields === 'populateAllDefaults' || requiredFields.includes(key))\n    ) {\n      obj[key] = computedDefault;\n    }\n  }\n}\n\ninterface ComputeDefaultsProps<T = any, S extends StrictRJSFSchema = RJSFSchema> {\n  parentDefaults?: T;\n  rootSchema?: S;\n  rawFormData?: T;\n  includeUndefinedValues?: boolean | 'excludeObjectChildren';\n  _recurseList?: string[];\n  experimental_defaultFormStateBehavior?: Experimental_DefaultFormStateBehavior;\n  required?: boolean;\n}\n\n/** Computes the defaults for the current `schema` given the `rawFormData` and `parentDefaults` if any. This drills into\n * each level of the schema, recursively, to fill out every level of defaults provided by the schema.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be used when necessary\n * @param rawSchema - The schema for which the default state is desired\n * @param [props] - Optional props for this function\n * @param [props.parentDefaults] - Any defaults provided by the parent field in the schema\n * @param [props.rootSchema] - The options root schema, used to primarily to look up `$ref`s\n * @param [props.rawFormData] - The current formData, if any, onto which to provide any missing defaults\n * @param [props.includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param [props._recurseList=[]] - The list of ref names currently being recursed, used to prevent infinite recursion\n * @param [props.experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @param [props.required] - Optional flag, if true, indicates this schema was required in the parent schema.\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport function computeDefaults<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  rawSchema: S,\n  {\n    parentDefaults,\n    rawFormData,\n    rootSchema = {} as S,\n    includeUndefinedValues = false,\n    _recurseList = [],\n    experimental_defaultFormStateBehavior = undefined,\n    required,\n  }: ComputeDefaultsProps<T, S> = {}\n): T | T[] | undefined {\n  const formData: T = (isObject(rawFormData) ? rawFormData : {}) as T;\n  const schema: S = isObject(rawSchema) ? rawSchema : ({} as S);\n  // Compute the defaults recursively: give highest priority to deepest nodes.\n  let defaults: T | T[] | undefined = parentDefaults;\n  // If we get a new schema, then we need to recompute defaults again for the new schema found.\n  let schemaToCompute: S | null = null;\n  let updatedRecurseList = _recurseList;\n\n  if (isObject(defaults) && isObject(schema.default)) {\n    // For object defaults, only override parent defaults that are defined in\n    // schema.default.\n    defaults = mergeObjects(defaults!, schema.default as GenericObjectType) as T;\n  } else if (DEFAULT_KEY in schema) {\n    defaults = schema.default as unknown as T;\n  } else if (REF_KEY in schema) {\n    const refName = schema[REF_KEY];\n    // Use referenced schema defaults for this node.\n    if (!_recurseList.includes(refName!)) {\n      updatedRecurseList = _recurseList.concat(refName!);\n      schemaToCompute = findSchemaDefinition<S>(refName, rootSchema);\n    }\n  } else if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchema = resolveDependencies<T, S, F>(validator, schema, rootSchema, false, formData);\n    schemaToCompute = resolvedSchema[0]; // pick the first element from resolve dependencies\n  } else if (isFixedItems(schema)) {\n    defaults = (schema.items! as S[]).map((itemSchema: S, idx: number) =>\n      computeDefaults<T, S>(validator, itemSchema, {\n        rootSchema,\n        includeUndefinedValues,\n        _recurseList,\n        experimental_defaultFormStateBehavior,\n        parentDefaults: Array.isArray(parentDefaults) ? parentDefaults[idx] : undefined,\n        rawFormData: formData as T,\n        required,\n      })\n    ) as T[];\n  } else if (ONE_OF_KEY in schema) {\n    const { oneOf, ...remaining } = schema;\n    if (oneOf!.length === 0) {\n      return undefined;\n    }\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    schemaToCompute = oneOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        oneOf as S[],\n        0,\n        discriminator\n      )\n    ] as S;\n    schemaToCompute = mergeSchemas(remaining, schemaToCompute) as S;\n  } else if (ANY_OF_KEY in schema) {\n    const { anyOf, ...remaining } = schema;\n    if (anyOf!.length === 0) {\n      return undefined;\n    }\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    schemaToCompute = anyOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        anyOf as S[],\n        0,\n        discriminator\n      )\n    ] as S;\n    schemaToCompute = mergeSchemas(remaining, schemaToCompute) as S;\n  }\n\n  if (schemaToCompute) {\n    return computeDefaults<T, S, F>(validator, schemaToCompute, {\n      rootSchema,\n      includeUndefinedValues,\n      _recurseList: updatedRecurseList,\n      experimental_defaultFormStateBehavior,\n      parentDefaults: defaults as T | undefined,\n      rawFormData: formData as T,\n      required,\n    });\n  }\n\n  // No defaults defined for this node, fallback to generic typed ones.\n  if (defaults === undefined) {\n    defaults = schema.default as unknown as T;\n  }\n\n  switch (getSchemaType<S>(schema)) {\n    // We need to recurse for object schema inner default values.\n    case 'object': {\n      const objectDefaults = Object.keys(schema.properties || {}).reduce((acc: GenericObjectType, key: string) => {\n        // Compute the defaults for this node, with the parent defaults we might\n        // have from a previous run: defaults[key].\n        const computedDefault = computeDefaults<T, S, F>(validator, get(schema, [PROPERTIES_KEY, key]), {\n          rootSchema,\n          _recurseList,\n          experimental_defaultFormStateBehavior,\n          includeUndefinedValues: includeUndefinedValues === true,\n          parentDefaults: get(defaults, [key]),\n          rawFormData: get(formData, [key]),\n          required: schema.required?.includes(key),\n        });\n        maybeAddDefaultToObject<T>(\n          acc,\n          key,\n          computedDefault,\n          includeUndefinedValues,\n          required,\n          schema.required,\n          experimental_defaultFormStateBehavior\n        );\n        return acc;\n      }, {}) as T;\n      if (schema.additionalProperties) {\n        // as per spec additionalProperties may be either schema or boolean\n        const additionalPropertiesSchema = isObject(schema.additionalProperties) ? schema.additionalProperties : {};\n        const keys = new Set<string>();\n        if (isObject(defaults)) {\n          Object.keys(defaults as GenericObjectType)\n            .filter((key) => !schema.properties || !schema.properties[key])\n            .forEach((key) => keys.add(key));\n        }\n        let formDataRequired: string[];\n        if (isObject(formData)) {\n          formDataRequired = [];\n          Object.keys(formData as GenericObjectType)\n            .filter((key) => !schema.properties || !schema.properties[key])\n            .forEach((key) => {\n              keys.add(key);\n              formDataRequired.push(key);\n            });\n        }\n        keys.forEach((key) => {\n          const computedDefault = computeDefaults(validator, additionalPropertiesSchema as S, {\n            rootSchema,\n            _recurseList,\n            experimental_defaultFormStateBehavior,\n            includeUndefinedValues: includeUndefinedValues === true,\n            parentDefaults: get(defaults, [key]),\n            rawFormData: get(formData, [key]),\n            required: schema.required?.includes(key),\n          });\n          // Since these are additional properties we don’t need to add the `experimental_defaultFormStateBehavior` prop\n          maybeAddDefaultToObject<T>(\n            objectDefaults as GenericObjectType,\n            key,\n            computedDefault,\n            includeUndefinedValues,\n            required,\n            formDataRequired\n          );\n        });\n      }\n      return objectDefaults;\n    }\n    case 'array': {\n      // Inject defaults into existing array defaults\n      if (Array.isArray(defaults)) {\n        defaults = defaults.map((item, idx) => {\n          const schemaItem: S = getInnerSchemaForArrayItem<S>(schema, AdditionalItemsHandling.Fallback, idx);\n          return computeDefaults<T, S, F>(validator, schemaItem, {\n            rootSchema,\n            _recurseList,\n            experimental_defaultFormStateBehavior,\n            parentDefaults: item,\n            required,\n          });\n        }) as T[];\n      }\n\n      // Deeply inject defaults into already existing form data\n      if (Array.isArray(rawFormData)) {\n        const schemaItem: S = getInnerSchemaForArrayItem<S>(schema);\n        defaults = rawFormData.map((item: T, idx: number) => {\n          return computeDefaults<T, S, F>(validator, schemaItem, {\n            rootSchema,\n            _recurseList,\n            experimental_defaultFormStateBehavior,\n            rawFormData: item,\n            parentDefaults: get(defaults, [idx]),\n            required,\n          });\n        }) as T[];\n      }\n\n      const ignoreMinItemsFlagSet = experimental_defaultFormStateBehavior?.arrayMinItems?.populate === 'requiredOnly';\n      if (ignoreMinItemsFlagSet && !required) {\n        // If no form data exists or defaults are set leave the field empty/non-existent, otherwise\n        // return form data/defaults\n        return defaults ? defaults : undefined;\n      }\n\n      const defaultsLength = Array.isArray(defaults) ? defaults.length : 0;\n      if (\n        !schema.minItems ||\n        isMultiSelect<T, S, F>(validator, schema, rootSchema) ||\n        schema.minItems <= defaultsLength\n      ) {\n        return defaults ? defaults : [];\n      }\n\n      const defaultEntries: T[] = (defaults || []) as T[];\n      const fillerSchema: S = getInnerSchemaForArrayItem<S>(schema, AdditionalItemsHandling.Invert);\n      const fillerDefault = fillerSchema.default;\n\n      // Calculate filler entries for remaining items (minItems - existing raw data/defaults)\n      const fillerEntries: T[] = new Array(schema.minItems - defaultsLength).fill(\n        computeDefaults<any, S, F>(validator, fillerSchema, {\n          parentDefaults: fillerDefault,\n          rootSchema,\n          _recurseList,\n          experimental_defaultFormStateBehavior,\n          required,\n        })\n      ) as T[];\n      // then fill up the rest with either the item default or empty, up to minItems\n      return defaultEntries.concat(fillerEntries);\n    }\n  }\n\n  return defaults;\n}\n\n/** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n * computed to have defaults provided in the `schema`.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the default state is desired\n * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport default function getDefaultFormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  formData?: T,\n  rootSchema?: S,\n  includeUndefinedValues: boolean | 'excludeObjectChildren' = false,\n  experimental_defaultFormStateBehavior?: Experimental_DefaultFormStateBehavior\n) {\n  if (!isObject(theSchema)) {\n    throw new Error('Invalid schema: ' + theSchema);\n  }\n  const schema = retrieveSchema<T, S, F>(validator, theSchema, rootSchema, formData);\n  const defaults = computeDefaults<T, S, F>(validator, schema, {\n    rootSchema,\n    includeUndefinedValues,\n    experimental_defaultFormStateBehavior,\n    rawFormData: formData,\n  });\n  if (formData === undefined || formData === null || (typeof formData === 'number' && isNaN(formData))) {\n    // No form data? Use schema defaults.\n    return defaults;\n  }\n  const { mergeExtraDefaults } = experimental_defaultFormStateBehavior?.arrayMinItems || {};\n  if (isObject(formData)) {\n    return mergeDefaultsWithFormData<T>(defaults as T, formData, mergeExtraDefaults);\n  }\n  if (Array.isArray(formData)) {\n    return mergeDefaultsWithFormData<T[]>(defaults as T[], formData, mergeExtraDefaults);\n  }\n  return formData;\n}\n","import getUiOptions from './getUiOptions';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\n\n/** Checks to see if the `uiSchema` contains the `widget` field and that the widget is not `hidden`\n *\n * @param uiSchema - The UI Schema from which to detect if it is customized\n * @returns - True if the `uiSchema` describes a custom widget, false otherwise\n */\nexport default function isCustomWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}) {\n  return (\n    // TODO: Remove the `&& uiSchema['ui:widget'] !== 'hidden'` once we support hidden widgets for arrays.\n    // https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/#hidden-widgets\n    'widget' in getUiOptions<T, S, F>(uiSchema) && getUiOptions<T, S, F>(uiSchema)['widget'] !== 'hidden'\n  );\n}\n","import { UI_WIDGET_KEY } from '../constants';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for array of files flag is desired\n * @param [uiSchema={}] - The UI schema from which to check the widget\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema/uiSchema contains an array of files, otherwise false\n */\nexport default function isFilesArray<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S\n) {\n  if (uiSchema[UI_WIDGET_KEY] === 'files') {\n    return true;\n  }\n  if (schema.items) {\n    const itemsSchema = retrieveSchema<T, S, F>(validator, schema.items as S, rootSchema);\n    return itemsSchema.type === 'string' && itemsSchema.format === 'data-url';\n  }\n  return false;\n}\n","import { UI_FIELD_KEY, UI_WIDGET_KEY } from '../constants';\nimport getSchemaType from '../getSchemaType';\nimport getUiOptions from '../getUiOptions';\nimport isCustomWidget from '../isCustomWidget';\nimport {\n  FormContextType,\n  GlobalUISchemaOptions,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidatorType,\n} from '../types';\nimport isFilesArray from './isFilesArray';\nimport isMultiSelect from './isMultiSelect';\n\n/** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n * should be displayed in a UI.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the display label flag is desired\n * @param [uiSchema={}] - The UI schema from which to derive potentially displayable information\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - True if the label should be displayed or false if it should not\n */\nexport default function getDisplayLabel<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S,\n  globalOptions?: GlobalUISchemaOptions\n): boolean {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalOptions);\n  const { label = true } = uiOptions;\n  let displayLabel = !!label;\n  const schemaType = getSchemaType<S>(schema);\n\n  if (schemaType === 'array') {\n    displayLabel =\n      isMultiSelect<T, S, F>(validator, schema, rootSchema) ||\n      isFilesArray<T, S, F>(validator, schema, uiSchema, rootSchema) ||\n      isCustomWidget(uiSchema);\n  }\n\n  if (schemaType === 'object') {\n    displayLabel = false;\n  }\n  if (schemaType === 'boolean' && !uiSchema[UI_WIDGET_KEY]) {\n    displayLabel = false;\n  }\n  if (uiSchema[UI_FIELD_KEY]) {\n    displayLabel = false;\n  }\n  return displayLabel;\n}\n","import isEmpty from 'lodash/isEmpty';\n\nimport mergeObjects from '../mergeObjects';\nimport { ErrorSchema, FormContextType, RJSFSchema, StrictRJSFSchema, ValidationData, ValidatorType } from '../types';\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `validator.toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validator - The validator used to convert an ErrorSchema to a list of errors\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n *        removed in the next major release.\n */\nexport default function mergeValidationData<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = validator.toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\n\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport { PROPERTIES_KEY, REF_KEY } from '../constants';\nimport retrieveSchema from './retrieveSchema';\n\nconst NO_VALUE = Symbol('no Value');\n\n/** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the new\n * schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the nature\n * of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the old schema\n * that are non-existent in the new schema are set to `undefined`. The data sanitization process has the following flow:\n *\n * - If the new schema is an object that contains a `properties` object then:\n *   - Create a `removeOldSchemaData` object, setting each key in the `oldSchema.properties` having `data` to undefined\n *   - Create an empty `nestedData` object for use in the key filtering below:\n *   - Iterate over each key in the `newSchema.properties` as follows:\n *     - Get the `formValue` of the key from the `data`\n *     - Get the `oldKeySchema` and `newKeyedSchema` for the key, defaulting to `{}` when it doesn't exist\n *     - Retrieve the schema for any refs within each `oldKeySchema` and/or `newKeySchema`\n *     - Get the types of the old and new keyed schemas and if the old doesn't exist or the old & new are the same then:\n *       - If `removeOldSchemaData` has an entry for the key, delete it since the new schema has the same property\n *       - If type of the key in the new schema is `object`:\n *         - Store the value from the recursive `sanitizeDataForNewSchema` call in `nestedData[key]`\n *       - Otherwise, check for default or const values:\n *         - Get the old and new `default` values from the schema and check:\n *           - If the new `default` value does not match the form value:\n *             - If the old `default` value DOES match the form value, then:\n *               - Replace `removeOldSchemaData[key]` with the new `default`\n *               - Otherwise, if the new schema is `readOnly` then replace `removeOldSchemaData[key]` with undefined\n *         - Get the old and new `const` values from the schema and check:\n *           - If the new `const` value does not match the form value:\n *           - If the old `const` value DOES match the form value, then:\n *             - Replace `removeOldSchemaData[key]` with the new `const`\n *             - Otherwise, replace `removeOldSchemaData[key]` with undefined\n *   - Once all keys have been processed, return an object built as follows:\n *     - `{ ...removeOldSchemaData, ...nestedData, ...pick(data, keysToKeep) }`\n * - If the new and old schema types are array and the `data` is an array then:\n *   - If the type of the old and new schema `items` are a non-array objects:\n *     - Retrieve the schema for any refs within each `oldKeySchema.items` and/or `newKeySchema.items`\n *     - If the `type`s of both items are the same (or the old does not have a type):\n *       - If the type is \"object\", then:\n *         - For each element in the `data` recursively sanitize the data, stopping at `maxItems` if specified\n *       - Otherwise, just return the `data` removing any values after `maxItems` if it is set\n *   - If the type of the old and new schema `items` are booleans of the same value, return `data` as is\n * - Otherwise return `undefined`\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param [newSchema] - The new schema for which the data is being sanitized\n * @param [oldSchema] - The old schema from which the data originated\n * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n * @returns - The new form data, with all the fields uniquely associated with the old schema set\n *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n */\nexport default function sanitizeDataForNewSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, rootSchema: S, newSchema?: S, oldSchema?: S, data: any = {}): T {\n  // By default, we will clear the form data\n  let newFormData;\n  // If the new schema is of type object and that object contains a list of properties\n  if (has(newSchema, PROPERTIES_KEY)) {\n    // Create an object containing root-level keys in the old schema, setting each key to undefined to remove the data\n    const removeOldSchemaData: GenericObjectType = {};\n    if (has(oldSchema, PROPERTIES_KEY)) {\n      const properties = get(oldSchema, PROPERTIES_KEY, {});\n      Object.keys(properties).forEach((key) => {\n        if (has(data, key)) {\n          removeOldSchemaData[key] = undefined;\n        }\n      });\n    }\n    const keys: string[] = Object.keys(get(newSchema, PROPERTIES_KEY, {}));\n    // Create a place to store nested data that will be a side-effect of the filter\n    const nestedData: GenericObjectType = {};\n    keys.forEach((key) => {\n      const formValue = get(data, key);\n      let oldKeyedSchema: S = get(oldSchema, [PROPERTIES_KEY, key], {});\n      let newKeyedSchema: S = get(newSchema, [PROPERTIES_KEY, key], {});\n      // Resolve the refs if they exist\n      if (has(oldKeyedSchema, REF_KEY)) {\n        oldKeyedSchema = retrieveSchema<T, S, F>(validator, oldKeyedSchema, rootSchema, formValue);\n      }\n      if (has(newKeyedSchema, REF_KEY)) {\n        newKeyedSchema = retrieveSchema<T, S, F>(validator, newKeyedSchema, rootSchema, formValue);\n      }\n      // Now get types and see if they are the same\n      const oldSchemaTypeForKey = get(oldKeyedSchema, 'type');\n      const newSchemaTypeForKey = get(newKeyedSchema, 'type');\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaTypeForKey || oldSchemaTypeForKey === newSchemaTypeForKey) {\n        if (has(removeOldSchemaData, key)) {\n          // SIDE-EFFECT: remove the undefined value for a key that has the same type between the old and new schemas\n          delete removeOldSchemaData[key];\n        }\n        // If it is an object, we'll recurse and store the resulting sanitized data for the key\n        if (newSchemaTypeForKey === 'object' || (newSchemaTypeForKey === 'array' && Array.isArray(formValue))) {\n          // SIDE-EFFECT: process the new schema type of object recursively to save iterations\n          const itemData = sanitizeDataForNewSchema<T, S, F>(\n            validator,\n            rootSchema,\n            newKeyedSchema,\n            oldKeyedSchema,\n            formValue\n          );\n          if (itemData !== undefined || newSchemaTypeForKey === 'array') {\n            // only put undefined values for the array type and not the object type\n            nestedData[key] = itemData;\n          }\n        } else {\n          // Ok, the non-object types match, let's make sure that a default or a const of a different value is replaced\n          // with the new default or const. This allows the case where two schemas differ that only by the default/const\n          // value to be properly selected\n          const newOptionDefault = get(newKeyedSchema, 'default', NO_VALUE);\n          const oldOptionDefault = get(oldKeyedSchema, 'default', NO_VALUE);\n          if (newOptionDefault !== NO_VALUE && newOptionDefault !== formValue) {\n            if (oldOptionDefault === formValue) {\n              // If the old default matches the formValue, we'll update the new value to match the new default\n              removeOldSchemaData[key] = newOptionDefault;\n            } else if (get(newKeyedSchema, 'readOnly') === true) {\n              // If the new schema has the default set to read-only, treat it like a const and remove the value\n              removeOldSchemaData[key] = undefined;\n            }\n          }\n\n          const newOptionConst = get(newKeyedSchema, 'const', NO_VALUE);\n          const oldOptionConst = get(oldKeyedSchema, 'const', NO_VALUE);\n          if (newOptionConst !== NO_VALUE && newOptionConst !== formValue) {\n            // Since this is a const, if the old value matches, replace the value with the new const otherwise clear it\n            removeOldSchemaData[key] = oldOptionConst === formValue ? newOptionConst : undefined;\n          }\n        }\n      }\n    });\n\n    newFormData = {\n      ...data,\n      ...removeOldSchemaData,\n      ...nestedData,\n    };\n    // First apply removing the old schema data, then apply the nested data, then apply the old data keys to keep\n  } else if (get(oldSchema, 'type') === 'array' && get(newSchema, 'type') === 'array' && Array.isArray(data)) {\n    let oldSchemaItems = get(oldSchema, 'items');\n    let newSchemaItems = get(newSchema, 'items');\n    // If any of the array types `items` are arrays (remember arrays are objects) then we'll just drop the data\n    // Eventually, we may want to deal with when either of the `items` are arrays since those tuple validations\n    if (\n      typeof oldSchemaItems === 'object' &&\n      typeof newSchemaItems === 'object' &&\n      !Array.isArray(oldSchemaItems) &&\n      !Array.isArray(newSchemaItems)\n    ) {\n      if (has(oldSchemaItems, REF_KEY)) {\n        oldSchemaItems = retrieveSchema<T, S, F>(validator, oldSchemaItems as S, rootSchema, data as T);\n      }\n      if (has(newSchemaItems, REF_KEY)) {\n        newSchemaItems = retrieveSchema<T, S, F>(validator, newSchemaItems as S, rootSchema, data as T);\n      }\n      // Now get types and see if they are the same\n      const oldSchemaType = get(oldSchemaItems, 'type');\n      const newSchemaType = get(newSchemaItems, 'type');\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaType || oldSchemaType === newSchemaType) {\n        const maxItems = get(newSchema, 'maxItems', -1);\n        if (newSchemaType === 'object') {\n          newFormData = data.reduce((newValue, aValue) => {\n            const itemValue = sanitizeDataForNewSchema<T, S, F>(\n              validator,\n              rootSchema,\n              newSchemaItems as S,\n              oldSchemaItems as S,\n              aValue\n            );\n            if (itemValue !== undefined && (maxItems < 0 || newValue.length < maxItems)) {\n              newValue.push(itemValue);\n            }\n            return newValue;\n          }, []);\n        } else {\n          newFormData = maxItems > 0 && data.length > maxItems ? data.slice(0, maxItems) : data;\n        }\n      }\n    } else if (\n      typeof oldSchemaItems === 'boolean' &&\n      typeof newSchemaItems === 'boolean' &&\n      oldSchemaItems === newSchemaItems\n    ) {\n      // If they are both booleans and have the same value just return the data as is otherwise fall-thru to undefined\n      newFormData = data;\n    }\n    // Also probably want to deal with `prefixItems` as tuples with the latest 2020 draft\n  }\n  return newFormData as T;\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { ALL_OF_KEY, DEPENDENCIES_KEY, ID_KEY, ITEMS_KEY, PROPERTIES_KEY, REF_KEY } from '../constants';\nimport isObject from '../isObject';\nimport { FormContextType, IdSchema, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\nimport getSchemaType from '../getSchemaType';\n\n/** An internal helper that generates an `IdSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param idPrefix - The prefix to use for the id\n * @param idSeparator - The separator to use for the path segments in the id\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `IdSchema` object for the `schema`\n */\nfunction toIdSchemaInternal<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  idPrefix: string,\n  idSeparator: string,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  _recurseList: S[] = []\n): IdSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(validator, schema, rootSchema, formData);\n    const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n    if (sameSchemaIndex === -1) {\n      return toIdSchemaInternal<T, S, F>(\n        validator,\n        _schema,\n        idPrefix,\n        idSeparator,\n        id,\n        rootSchema,\n        formData,\n        _recurseList.concat(_schema)\n      );\n    }\n  }\n  if (ITEMS_KEY in schema && !get(schema, [ITEMS_KEY, REF_KEY])) {\n    return toIdSchemaInternal<T, S, F>(\n      validator,\n      get(schema, ITEMS_KEY) as S,\n      idPrefix,\n      idSeparator,\n      id,\n      rootSchema,\n      formData,\n      _recurseList\n    );\n  }\n  const $id = id || idPrefix;\n  const idSchema: IdSchema = { $id } as IdSchema<T>;\n  if (getSchemaType<S>(schema) === 'object' && PROPERTIES_KEY in schema) {\n    for (const name in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, name]);\n      const fieldId = idSchema[ID_KEY] + idSeparator + name;\n      idSchema[name] = toIdSchemaInternal<T, S, F>(\n        validator,\n        isObject(field) ? field : {},\n        idPrefix,\n        idSeparator,\n        fieldId,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [name]),\n        _recurseList\n      );\n    }\n  }\n  return idSchema as IdSchema<T>;\n}\n\n/** Generates an `IdSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [idPrefix='root'] - The prefix to use for the id\n * @param [idSeparator='_'] - The separator to use for the path segments in the id\n * @returns - The `IdSchema` object for the `schema`\n */\nexport default function toIdSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  idPrefix = 'root',\n  idSeparator = '_'\n): IdSchema<T> {\n  return toIdSchemaInternal<T, S, F>(validator, schema, idPrefix, idSeparator, id, rootSchema, formData);\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport set from 'lodash/set';\n\nimport {\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  ADDITIONAL_PROPERTIES_KEY,\n  DEPENDENCIES_KEY,\n  ITEMS_KEY,\n  NAME_KEY,\n  ONE_OF_KEY,\n  PROPERTIES_KEY,\n  REF_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from '../constants';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport { FormContextType, PathSchema, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport retrieveSchema from './retrieveSchema';\n\n/** An internal helper that generates an `PathSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `PathSchema` object for the `schema`\n */\nfunction toPathSchemaInternal<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  name: string,\n  rootSchema?: S,\n  formData?: T,\n  _recurseList: S[] = []\n): PathSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(validator, schema, rootSchema, formData);\n    const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n    if (sameSchemaIndex === -1) {\n      return toPathSchemaInternal<T, S, F>(\n        validator,\n        _schema,\n        name,\n        rootSchema,\n        formData,\n        _recurseList.concat(_schema)\n      );\n    }\n  }\n\n  let pathSchema: PathSchema = {\n    [NAME_KEY]: name.replace(/^\\./, ''),\n  } as PathSchema;\n\n  if (ONE_OF_KEY in schema || ANY_OF_KEY in schema) {\n    const xxxOf: S[] = ONE_OF_KEY in schema ? (schema.oneOf as S[]) : (schema.anyOf as S[]);\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    const index = getClosestMatchingOption<T, S, F>(validator, rootSchema!, formData, xxxOf, 0, discriminator);\n    const _schema: S = xxxOf![index] as S;\n    pathSchema = {\n      ...pathSchema,\n      ...toPathSchemaInternal<T, S, F>(validator, _schema, name, rootSchema, formData, _recurseList),\n    };\n  }\n\n  if (ADDITIONAL_PROPERTIES_KEY in schema && schema[ADDITIONAL_PROPERTIES_KEY] !== false) {\n    set(pathSchema, RJSF_ADDITONAL_PROPERTIES_FLAG, true);\n  }\n\n  if (ITEMS_KEY in schema && Array.isArray(formData)) {\n    formData.forEach((element, i: number) => {\n      pathSchema[i] = toPathSchemaInternal<T, S, F>(\n        validator,\n        schema.items as S,\n        `${name}.${i}`,\n        rootSchema,\n        element,\n        _recurseList\n      );\n    });\n  } else if (PROPERTIES_KEY in schema) {\n    for (const property in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, property]);\n      pathSchema[property] = toPathSchemaInternal<T, S, F>(\n        validator,\n        field,\n        `${name}.${property}`,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [property]),\n        _recurseList\n      );\n    }\n  }\n  return pathSchema as PathSchema<T>;\n}\n\n/** Generates an `PathSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The `PathSchema` object for the `schema`\n */\nexport default function toPathSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  name = '',\n  rootSchema?: S,\n  formData?: T\n): PathSchema<T> {\n  return toPathSchemaInternal(validator, schema, name, rootSchema, formData);\n}\n","import deepEquals from './deepEquals';\nimport {\n  ErrorSchema,\n  Experimental_DefaultFormStateBehavior,\n  FormContextType,\n  GlobalUISchemaOptions,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  SchemaUtilsType,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from './types';\nimport {\n  getDefaultFormState,\n  getDisplayLabel,\n  getClosestMatchingOption,\n  getFirstMatchingOption,\n  getMatchingOption,\n  isFilesArray,\n  isMultiSelect,\n  isSelect,\n  mergeValidationData,\n  retrieveSchema,\n  sanitizeDataForNewSchema,\n  toIdSchema,\n  toPathSchema,\n} from './schema';\n\n/** The `SchemaUtils` class provides a wrapper around the publicly exported APIs in the `utils/schema` directory such\n * that one does not have to explicitly pass the `validator`, `rootSchema`, or `experimental_defaultFormStateBehavior` to each method.\n * Since these generally do not change across a `Form`, this allows for providing a simplified set of APIs to the\n * `@rjsf/core` components and the various themes as well. This class implements the `SchemaUtilsType` interface.\n */\nclass SchemaUtils<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements SchemaUtilsType<T, S, F>\n{\n  rootSchema: S;\n  validator: ValidatorType<T, S, F>;\n  experimental_defaultFormStateBehavior: Experimental_DefaultFormStateBehavior;\n\n  /** Constructs the `SchemaUtils` instance with the given `validator` and `rootSchema` stored as instance variables\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n   * @param rootSchema - The root schema that will be forwarded to all the APIs\n   * @param experimental_defaultFormStateBehavior - Configuration flags to allow users to override default form state behavior\n   */\n  constructor(\n    validator: ValidatorType<T, S, F>,\n    rootSchema: S,\n    experimental_defaultFormStateBehavior: Experimental_DefaultFormStateBehavior\n  ) {\n    this.rootSchema = rootSchema;\n    this.validator = validator;\n    this.experimental_defaultFormStateBehavior = experimental_defaultFormStateBehavior;\n  }\n\n  /** Returns the `ValidatorType` in the `SchemaUtilsType`\n   *\n   * @returns - The `ValidatorType`\n   */\n  getValidator() {\n    return this.validator;\n  }\n\n  /** Determines whether either the `validator` and `rootSchema` differ from the ones associated with this instance of\n   * the `SchemaUtilsType`. If either `validator` or `rootSchema` are falsy, then return false to prevent the creation\n   * of a new `SchemaUtilsType` with incomplete properties.\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be compared against the current one\n   * @param rootSchema - The root schema that will be compared against the current one\n   * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n   * @returns - True if the `SchemaUtilsType` differs from the given `validator` or `rootSchema`\n   */\n  doesSchemaUtilsDiffer(\n    validator: ValidatorType<T, S, F>,\n    rootSchema: S,\n    experimental_defaultFormStateBehavior = {}\n  ): boolean {\n    if (!validator || !rootSchema) {\n      return false;\n    }\n    return (\n      this.validator !== validator ||\n      !deepEquals(this.rootSchema, rootSchema) ||\n      !deepEquals(this.experimental_defaultFormStateBehavior, experimental_defaultFormStateBehavior)\n    );\n  }\n\n  /** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n   * computed to have defaults provided in the `schema`.\n   *\n   * @param schema - The schema for which the default state is desired\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n   *          If \"excludeObjectChildren\", pass `includeUndefinedValues` as false when computing defaults for any nested\n   *          object properties.\n   * @returns - The resulting `formData` with all the defaults provided\n   */\n  getDefaultFormState(\n    schema: S,\n    formData?: T,\n    includeUndefinedValues: boolean | 'excludeObjectChildren' = false\n  ): T | T[] | undefined {\n    return getDefaultFormState<T, S, F>(\n      this.validator,\n      schema,\n      formData,\n      this.rootSchema,\n      includeUndefinedValues,\n      this.experimental_defaultFormStateBehavior\n    );\n  }\n\n  /** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n   * should be displayed in a UI.\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [uiSchema] - The UI schema from which to derive potentially displayable information\n   * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n   * @returns - True if the label should be displayed or false if it should not\n   */\n  getDisplayLabel(schema: S, uiSchema?: UiSchema<T, S, F>, globalOptions?: GlobalUISchemaOptions) {\n    return getDisplayLabel<T, S, F>(this.validator, schema, uiSchema, this.rootSchema, globalOptions);\n  }\n\n  /** Determines which of the given `options` provided most closely matches the `formData`.\n   * Returns the index of the option that is valid and is the closest match, or 0 if there is no match.\n   *\n   * The closest match is determined using the number of matching properties, and more heavily favors options with\n   * matching readOnly, default, or const values.\n   *\n   * @param formData - The form data associated with the schema\n   * @param options - The list of options that can be selected from\n   * @param [selectedOption] - The index of the currently selected option, defaulted to -1 if not specified\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n   */\n  getClosestMatchingOption(\n    formData: T | undefined,\n    options: S[],\n    selectedOption?: number,\n    discriminatorField?: string\n  ): number {\n    return getClosestMatchingOption<T, S, F>(\n      this.validator,\n      this.rootSchema,\n      formData,\n      options,\n      selectedOption,\n      discriminatorField\n    );\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n   * Always returns the first option if there is nothing that matches.\n   *\n   * @param formData - The current formData, if any, used to figure out a match\n   * @param options - The list of options to find a matching options from\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The firstindex of the matched option or 0 if none is available\n   */\n  getFirstMatchingOption(formData: T | undefined, options: S[], discriminatorField?: string): number {\n    return getFirstMatchingOption<T, S, F>(this.validator, formData, options, this.rootSchema, discriminatorField);\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n   * Deprecated, use `getFirstMatchingOption()` instead.\n   *\n   * @param formData - The current formData, if any, onto which to provide any missing defaults\n   * @param options - The list of options to find a matching options from\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The index of the matched option or 0 if none is available\n   * @deprecated\n   */\n  getMatchingOption(formData: T | undefined, options: S[], discriminatorField?: string) {\n    return getMatchingOption<T, S, F>(this.validator, formData, options, this.rootSchema, discriminatorField);\n  }\n\n  /** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n   *\n   * @param schema - The schema for which check for array of files flag is desired\n   * @param [uiSchema] - The UI schema from which to check the widget\n   * @returns - True if schema/uiSchema contains an array of files, otherwise false\n   */\n  isFilesArray(schema: S, uiSchema?: UiSchema<T, S, F>) {\n    return isFilesArray<T, S, F>(this.validator, schema, uiSchema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a multi-select\n   *\n   * @param schema - The schema for which check for a multi-select flag is desired\n   * @returns - True if schema contains a multi-select, otherwise false\n   */\n  isMultiSelect(schema: S) {\n    return isMultiSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a select\n   *\n   * @param schema - The schema for which check for a select flag is desired\n   * @returns - True if schema contains a select, otherwise false\n   */\n  isSelect(schema: S) {\n    return isSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in\n   * the two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n   * `getValidator().toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed,\n   * then `validationData` is returned.\n   *\n   * @param validationData - The current `ValidationData` into which to merge the additional errors\n   * @param [additionalErrorSchema] - The additional set of errors\n   * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n   * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n   *        removed in the next major release.\n   */\n  mergeValidationData(validationData: ValidationData<T>, additionalErrorSchema?: ErrorSchema<T>): ValidationData<T> {\n    return mergeValidationData<T, S, F>(this.validator, validationData, additionalErrorSchema);\n  }\n\n  /** Retrieves an expanded schema that has had all of its conditions, additional properties, references and\n   * dependencies resolved and merged into the `schema` given a `rawFormData` that is used to do the potentially\n   * recursive resolution.\n   *\n   * @param schema - The schema for which retrieving a schema is desired\n   * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n   * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n   */\n  retrieveSchema(schema: S, rawFormData?: T) {\n    return retrieveSchema<T, S, F>(this.validator, schema, this.rootSchema, rawFormData);\n  }\n\n  /** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the\n   * new schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the\n   * nature of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the\n   * old schemas that are non-existent in the new schema are set to `undefined`.\n   *\n   * @param [newSchema] - The new schema for which the data is being sanitized\n   * @param [oldSchema] - The old schema from which the data originated\n   * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n   * @returns - The new form data, with all the fields uniquely associated with the old schema set\n   *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n   */\n  sanitizeDataForNewSchema(newSchema?: S, oldSchema?: S, data?: any): T {\n    return sanitizeDataForNewSchema(this.validator, this.rootSchema, newSchema, oldSchema, data);\n  }\n\n  /** Generates an `IdSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [id] - The base id for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [idPrefix='root'] - The prefix to use for the id\n   * @param [idSeparator='_'] - The separator to use for the path segments in the id\n   * @returns - The `IdSchema` object for the `schema`\n   */\n  toIdSchema(schema: S, id?: string | null, formData?: T, idPrefix = 'root', idSeparator = '_'): IdSchema<T> {\n    return toIdSchema<T, S, F>(this.validator, schema, id, this.rootSchema, formData, idPrefix, idSeparator);\n  }\n\n  /** Generates an `PathSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [name] - The base name for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @returns - The `PathSchema` object for the `schema`\n   */\n  toPathSchema(schema: S, name?: string, formData?: T): PathSchema<T> {\n    return toPathSchema<T, S, F>(this.validator, schema, name, this.rootSchema, formData);\n  }\n}\n\n/** Creates a `SchemaUtilsType` interface that is based around the given `validator` and `rootSchema` parameters. The\n * resulting interface implementation will forward the `validator` and `rootSchema` to all the wrapped APIs.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @returns - An implementation of a `SchemaUtilsType` interface\n */\nexport default function createSchemaUtils<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  experimental_defaultFormStateBehavior = {}\n): SchemaUtilsType<T, S, F> {\n  return new SchemaUtils<T, S, F>(validator, rootSchema, experimental_defaultFormStateBehavior);\n}\n","/** Potentially substitutes all replaceable parameters with the associated value(s) from the `params` if available. When\n * a `params` array is provided, each value in the array is used to replace any of the replaceable parameters in the\n * `inputString` using the `%1`, `%2`, etc. replacement specifiers.\n *\n * @param inputString - The string which will be potentially updated with replacement parameters\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The updated string with any replacement specifiers replaced\n */\nexport default function replaceStringParameters(inputString: string, params?: string[]) {\n  let output = inputString;\n  if (Array.isArray(params)) {\n    const parts = output.split(/(%\\d)/);\n    params.forEach((param, index) => {\n      const partIndex = parts.findIndex((part) => part === `%${index + 1}`);\n      if (partIndex >= 0) {\n        parts[partIndex] = param;\n      }\n    });\n    output = parts.join('');\n  }\n  return output;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the value(s) from `allEnumOptions` at the index(es) provided by `valueIndex`. If `valueIndex` is not an\n * array AND the index is not valid for `allEnumOptions`, `emptyValue` is returned. If `valueIndex` is an array, AND it\n * contains an invalid index, the returned array will have the resulting undefined values filtered out, leaving only\n * valid values or in the worst case, an empty array.\n *\n * @param valueIndex - The index(es) of the value(s) that should be returned\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [emptyValue] - The value to return when the non-array `valueIndex` does not refer to a real option\n * @returns - The single or list of values specified by the single or list of indexes if they are valid. Otherwise,\n *        `emptyValue` or an empty list.\n */\nexport default function enumOptionsValueForIndex<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number | Array<string | number>,\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  emptyValue?: EnumOptionsType<S>['value']\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  if (Array.isArray(valueIndex)) {\n    return valueIndex.map((index) => enumOptionsValueForIndex(index, allEnumOptions)).filter((val) => val);\n  }\n  // So Number(null) and Number('') both return 0, so use emptyValue for those two values\n  const index = valueIndex === '' || valueIndex === null ? -1 : Number(valueIndex);\n  const option = allEnumOptions[index];\n  return option ? option.value : emptyValue;\n}\n","import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Determines whether the given `value` is (one of) the `selected` value(s).\n *\n * @param value - The value being checked to see if it is selected\n * @param selected - The current selected value or list of values\n * @returns - true if the `value` is one of the `selected` ones, false otherwise\n */\nexport default function enumOptionsIsSelected<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'],\n  selected: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][]\n) {\n  if (Array.isArray(selected)) {\n    return selected.some((sel) => isEqual(sel, value));\n  }\n  return isEqual(selected, value);\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { ErrorSchema } from './types';\nimport { ERRORS_KEY } from './constants';\n\n/** The `ErrorSchemaBuilder<T>` is used to build an `ErrorSchema<T>` since the definition of the `ErrorSchema` type is\n * designed for reading information rather than writing it. Use this class to add, replace or clear errors in an error\n * schema by using either dotted path or an array of path names. Once you are done building the `ErrorSchema`, you can\n * get the result and/or reset all the errors back to an initial set and start again.\n */\nexport default class ErrorSchemaBuilder<T = any> {\n  /** The error schema being built\n   *\n   * @private\n   */\n  private errorSchema: ErrorSchema<T> = {};\n\n  /** Construct an `ErrorSchemaBuilder` with an optional initial set of errors in an `ErrorSchema`.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   */\n  constructor(initialSchema?: ErrorSchema<T>) {\n    this.resetAllErrors(initialSchema);\n  }\n\n  /** Returns the `ErrorSchema` that has been updated by the methods of the `ErrorSchemaBuilder`\n   */\n  get ErrorSchema() {\n    return this.errorSchema;\n  }\n\n  /** Will get an existing `ErrorSchema` at the specified `pathOfError` or create and return one.\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The error block for the given `pathOfError` or the root if not provided\n   * @private\n   */\n  private getOrCreateErrorBlock(pathOfError?: string | string[]) {\n    const hasPath = (Array.isArray(pathOfError) && pathOfError.length > 0) || typeof pathOfError === 'string';\n    let errorBlock: ErrorSchema = hasPath ? get(this.errorSchema, pathOfError) : this.errorSchema;\n    if (!errorBlock && pathOfError) {\n      errorBlock = {};\n      set(this.errorSchema, pathOfError, errorBlock);\n    }\n    return errorBlock;\n  }\n\n  /** Resets all errors in the `ErrorSchemaBuilder` back to the `initialSchema` if provided, otherwise an empty set.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  resetAllErrors(initialSchema?: ErrorSchema<T>) {\n    this.errorSchema = initialSchema ? cloneDeep(initialSchema) : {};\n    return this;\n  }\n\n  /** Adds the `errorOrList` to the list of errors in the `ErrorSchema` at either the root level or the location within\n   * the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to add into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  addErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    let errorsList = get(errorBlock, ERRORS_KEY);\n    if (!Array.isArray(errorsList)) {\n      errorsList = [];\n      errorBlock[ERRORS_KEY] = errorsList;\n    }\n\n    if (Array.isArray(errorOrList)) {\n      errorsList.push(...errorOrList);\n    } else {\n      errorsList.push(errorOrList);\n    }\n    return this;\n  }\n\n  /** Sets/replaces the `errorOrList` as the error(s) in the `ErrorSchema` at either the root level or the location\n   * within the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to set into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to set the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  setErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    // Effectively clone the array being given to prevent accidental outside manipulation of the given list\n    const listToAdd = Array.isArray(errorOrList) ? [...errorOrList] : [errorOrList];\n    set(errorBlock, ERRORS_KEY, listToAdd);\n    return this;\n  }\n\n  /** Clears the error(s) in the `ErrorSchema` at either the root level or the location within the schema described by\n   * the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to clear the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  clearErrors(pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    set(errorBlock, ERRORS_KEY, []);\n    return this;\n  }\n}\n","import { RangeSpecType, StrictRJSFSchema } from './types';\nimport { RJSFSchema } from './types';\n\n/** Extracts the range spec information `{ step?: number, min?: number, max?: number }` that can be spread onto an HTML\n * input from the range analog in the schema `{ multipleOf?: number, minimum?: number, maximum?: number }`.\n *\n * @param schema - The schema from which to extract the range spec\n * @returns - A range specification from the schema\n */\nexport default function rangeSpec<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  const spec: RangeSpecType = {};\n  if (schema.multipleOf) {\n    spec.step = schema.multipleOf;\n  }\n  if (schema.minimum || schema.minimum === 0) {\n    spec.min = schema.minimum;\n  }\n  if (schema.maximum || schema.maximum === 0) {\n    spec.max = schema.maximum;\n  }\n  return spec;\n}\n","import { SUBMIT_BTN_OPTIONS_KEY } from './constants';\nimport getUiOptions from './getUiOptions';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema, UISchemaSubmitButtonOptions } from './types';\n\n/** The default submit button options, exported for testing purposes\n */\nexport const DEFAULT_OPTIONS: UISchemaSubmitButtonOptions = {\n  props: {\n    disabled: false,\n  },\n  submitText: 'Submit',\n  norender: false,\n};\n\n/** Extracts any `ui:submitButtonOptions` from the `uiSchema` and merges them onto the `DEFAULT_OPTIONS`\n *\n * @param [uiSchema={}] - the UI Schema from which to extract submit button props\n * @returns - The merging of the `DEFAULT_OPTIONS` with any custom ones\n */\nexport default function getSubmitButtonOptions<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}): UISchemaSubmitButtonOptions {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  if (uiOptions && uiOptions[SUBMIT_BTN_OPTIONS_KEY]) {\n    const options = uiOptions[SUBMIT_BTN_OPTIONS_KEY] as UISchemaSubmitButtonOptions;\n    return { ...DEFAULT_OPTIONS, ...options };\n  }\n\n  return DEFAULT_OPTIONS;\n}\n","import { createElement } from 'react';\nimport ReactIs from 'react-is';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { FormContextType, RJSFSchema, Widget, RegistryWidgetsType, StrictRJSFSchema } from './types';\nimport getSchemaType from './getSchemaType';\n\n/** The map of schema types to widget type to widget name\n */\nconst widgetMap: { [k: string]: { [j: string]: string } } = {\n  boolean: {\n    checkbox: 'CheckboxWidget',\n    radio: 'RadioWidget',\n    select: 'SelectWidget',\n    hidden: 'HiddenWidget',\n  },\n  string: {\n    text: 'TextWidget',\n    password: 'PasswordWidget',\n    email: 'EmailWidget',\n    hostname: 'TextWidget',\n    ipv4: 'TextWidget',\n    ipv6: 'TextWidget',\n    uri: 'URLWidget',\n    'data-url': 'FileWidget',\n    radio: 'RadioWidget',\n    select: 'SelectWidget',\n    textarea: 'TextareaWidget',\n    hidden: 'HiddenWidget',\n    date: 'DateWidget',\n    datetime: 'DateTimeWidget',\n    'date-time': 'DateTimeWidget',\n    'alt-date': 'AltDateWidget',\n    'alt-datetime': 'AltDateTimeWidget',\n    time: 'TimeWidget',\n    color: 'ColorWidget',\n    file: 'FileWidget',\n  },\n  number: {\n    text: 'TextWidget',\n    select: 'SelectWidget',\n    updown: 'UpDownWidget',\n    range: 'RangeWidget',\n    radio: 'RadioWidget',\n    hidden: 'HiddenWidget',\n  },\n  integer: {\n    text: 'TextWidget',\n    select: 'SelectWidget',\n    updown: 'UpDownWidget',\n    range: 'RangeWidget',\n    radio: 'RadioWidget',\n    hidden: 'HiddenWidget',\n  },\n  array: {\n    select: 'SelectWidget',\n    checkboxes: 'CheckboxesWidget',\n    files: 'FileWidget',\n    hidden: 'HiddenWidget',\n  },\n};\n\n/** Wraps the given widget with stateless functional component that will merge any `defaultProps.options` with the\n * `options` that are provided in the props. It will add the wrapper component as a `MergedWidget` property onto the\n * `Widget` so that future attempts to wrap `AWidget` will return the already existing wrapper.\n *\n * @param AWidget - A widget that will be wrapped or one that is already wrapped\n * @returns - The wrapper widget\n */\nfunction mergeWidgetOptions<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  AWidget: Widget<T, S, F>\n) {\n  let MergedWidget: Widget<T, S, F> | undefined = get(AWidget, 'MergedWidget');\n  // cache return value as property of widget for proper react reconciliation\n  if (!MergedWidget) {\n    const defaultOptions = (AWidget.defaultProps && AWidget.defaultProps.options) || {};\n    MergedWidget = ({ options, ...props }) => {\n      return <AWidget options={{ ...defaultOptions, ...options }} {...props} />;\n    };\n    set(AWidget, 'MergedWidget', MergedWidget);\n  }\n  return MergedWidget;\n}\n\n/** Given a schema representing a field to render and either the name or actual `Widget` implementation, returns the\n * React component that is used to render the widget. If the `widget` is already a React component, then it is wrapped\n * with a `MergedWidget`. Otherwise an attempt is made to look up the widget inside of the `registeredWidgets` map based\n * on the schema type and `widget` name. If no widget component can be found an `Error` is thrown.\n *\n * @param schema - The schema for the field\n * @param [widget] - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - The `Widget` component to use\n * @throws - An error if there is no `Widget` component that can be returned\n */\nexport default function getWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  widget?: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n): Widget<T, S, F> {\n  const type = getSchemaType(schema);\n\n  if (\n    typeof widget === 'function' ||\n    (widget && ReactIs.isForwardRef(createElement(widget))) ||\n    ReactIs.isMemo(widget)\n  ) {\n    return mergeWidgetOptions<T, S, F>(widget as Widget<T, S, F>);\n  }\n\n  if (typeof widget !== 'string') {\n    throw new Error(`Unsupported widget definition: ${typeof widget}`);\n  }\n\n  if (widget in registeredWidgets) {\n    const registeredWidget = registeredWidgets[widget];\n    return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n  }\n\n  if (typeof type === 'string') {\n    if (!(type in widgetMap)) {\n      throw new Error(`No widget for type '${type}'`);\n    }\n\n    if (widget in widgetMap[type]) {\n      const registeredWidget = registeredWidgets[widgetMap[type][widget]];\n      return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n    }\n  }\n\n  throw new Error(`No widget '${widget}' for type '${type}'`);\n}\n","import { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** JS has no built-in hashing function, so rolling our own\n *  based on Java's hashing fn:\n *  http://www.java2s.com/example/nodejs-utility-method/string-hash/hashcode-4dc2b.html\n *\n * @param string - The string for which to get the hash\n * @returns - The resulting hash of the string in hex format\n */\nfunction hashString(string: string): string {\n  let hash = 0;\n  for (let i = 0; i < string.length; i += 1) {\n    const chr = string.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash.toString(16);\n}\n\n/** Stringifies the schema and returns the hash of the resulting string. Sorts schema fields\n * in consistent order before stringify to prevent different hash ids for the same schema.\n *\n * @param schema - The schema for which the hash is desired\n * @returns - The string obtained from the hash of the stringified schema\n */\nexport default function hashForSchema<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  const allKeys = new Set<string>();\n  // solution source: https://stackoverflow.com/questions/16167581/sort-object-properties-and-json-stringify/53593328#53593328\n  JSON.stringify(schema, (key, value) => (allKeys.add(key), value));\n  return hashString(JSON.stringify(schema, Array.from(allKeys).sort()));\n}\n","import isString from 'lodash/isString';\n\nimport { IdSchema } from './types';\nimport { ID_KEY } from './constants';\n\n/** Generates a consistent `id` pattern for a given `id` and a `suffix`\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param suffix - The suffix to append to the id\n */\nfunction idGenerator<T = any>(id: IdSchema<T> | string, suffix: string) {\n  const theId = isString(id) ? id : id[ID_KEY];\n  return `${theId}__${suffix}`;\n}\n/** Return a consistent `id` for the field description element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field description element from the given `id`\n */\nexport function descriptionId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'description');\n}\n\n/** Return a consistent `id` for the field error element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field error element from the given `id`\n */\nexport function errorId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'error');\n}\n\n/** Return a consistent `id` for the field examples element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field examples element from the given `id`\n */\nexport function examplesId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'examples');\n}\n\n/** Return a consistent `id` for the field help element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field help element from the given `id`\n */\nexport function helpId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'help');\n}\n\n/** Return a consistent `id` for the field title element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field title element from the given `id`\n */\nexport function titleId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'title');\n}\n\n/** Return a list of element ids that contain additional information about the field that can be used to as the aria\n * description of the field. This is correctly omitting `titleId` which would be \"labeling\" rather than \"describing\" the\n * element.\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param [includeExamples=false] - Optional flag, if true, will add the `examplesId` into the list\n * @returns - The string containing the list of ids for use in an `aria-describedBy` attribute\n */\nexport function ariaDescribedByIds<T = any>(id: IdSchema<T> | string, includeExamples = false) {\n  const examples = includeExamples ? ` ${examplesId<T>(id)}` : '';\n  return `${errorId<T>(id)} ${descriptionId<T>(id)} ${helpId<T>(id)}${examples}`;\n}\n\n/** Return a consistent `id` for the `optionIndex`s of a `Radio` or `Checkboxes` widget\n *\n * @param id - The id of the parent component for the option\n * @param optionIndex - The index of the option for which the id is desired\n * @returns - An id for the option index based on the parent `id`\n */\nexport function optionId(id: string, optionIndex: number) {\n  return `${id}-${optionIndex}`;\n}\n","import { CONST_KEY, ENUM_KEY } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the constant value from the schema when it is either a single value enum or has a const key. Otherwise\n * throws an error.\n *\n * @param schema - The schema from which to obtain the constant value\n * @returns - The constant value for the schema\n * @throws - Error when the schema does not have a constant value\n */\nexport default function toConstant<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  if (ENUM_KEY in schema && Array.isArray(schema.enum) && schema.enum.length === 1) {\n    return schema.enum[0];\n  }\n  if (CONST_KEY in schema) {\n    return schema.const;\n  }\n  throw new Error('schema cannot be inferred as a constant');\n}\n","/** Returns a string representation of the `num` that is padded with leading \"0\"s if necessary\n *\n * @param num - The number to pad\n * @param width - The width of the string at which no lead padding is necessary\n * @returns - The number converted to a string with leading zero padding if the number of digits is less than `width`\n */\nexport default function pad(num: number, width: number) {\n  let s = String(num);\n  while (s.length < width) {\n    s = '0' + s;\n  }\n  return s;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { ErrorSchema, GenericObjectType, RJSFValidationError } from './types';\n\n/** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n *\n * @param errorSchema - The `ErrorSchema` instance to convert\n * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n * @returns - The list of `RJSFValidationErrors` extracted from the `errorSchema`\n */\nexport default function toErrorList<T = any>(\n  errorSchema?: ErrorSchema<T>,\n  fieldPath: string[] = []\n): RJSFValidationError[] {\n  if (!errorSchema) {\n    return [];\n  }\n  let errorList: RJSFValidationError[] = [];\n  if (ERRORS_KEY in errorSchema) {\n    errorList = errorList.concat(\n      errorSchema[ERRORS_KEY]!.map((message: string) => {\n        const property = `.${fieldPath.join('.')}`;\n        return {\n          property,\n          message,\n          stack: `${property} ${message}`,\n        };\n      })\n    );\n  }\n  return Object.keys(errorSchema).reduce((acc, key) => {\n    if (key !== ERRORS_KEY) {\n      const childSchema = (errorSchema as GenericObjectType)[key];\n      if (isPlainObject(childSchema)) {\n        acc = acc.concat(toErrorList(childSchema, [...fieldPath, key]));\n      }\n    }\n    return acc;\n  }, errorList);\n}\n","/** An enumeration of all the translatable strings used by `@rjsf/core` and its themes. The value of each of the\n * enumeration keys is expected to be the actual english string. Some strings contain replaceable parameter values\n * as indicated by `%1`, `%2`, etc. The number after the `%` indicates the order of the parameter. The ordering of\n * parameters is important because some languages may choose to put the second parameter before the first in its\n * translation. Also, some strings are rendered using `markdown-to-jsx` and thus support markdown and inline html.\n */\nexport enum TranslatableString {\n  /** Fallback title of an array item, used by ArrayField */\n  ArrayItemTitle = 'Item',\n  /** Missing items reason, used by ArrayField */\n  MissingItems = 'Missing items definition',\n  /** Yes label, used by BooleanField */\n  YesLabel = 'Yes',\n  /** No label, used by BooleanField */\n  NoLabel = 'No',\n  /** Close label, used by ErrorList */\n  CloseLabel = 'Close',\n  /** Errors label, used by ErrorList */\n  ErrorsLabel = 'Errors',\n  /** New additionalProperties string default value, used by ObjectField */\n  NewStringDefault = 'New Value',\n  /** Add button title, used by AddButton */\n  AddButton = 'Add',\n  /** Add button title, used by AddButton */\n  AddItemButton = 'Add Item',\n  /** Copy button title, used by IconButton */\n  CopyButton = 'Copy',\n  /** Move down button title, used by IconButton */\n  MoveDownButton = 'Move down',\n  /** Move up button title, used by IconButton */\n  MoveUpButton = 'Move up',\n  /** Remove button title, used by IconButton */\n  RemoveButton = 'Remove',\n  /** Now label, used by AltDateWidget */\n  NowLabel = 'Now',\n  /** Clear label, used by AltDateWidget */\n  ClearLabel = 'Clear',\n  /** Aria date label, used by DateWidget */\n  AriaDateLabel = 'Select a date',\n  /** File preview label, used by FileWidget */\n  PreviewLabel = 'Preview',\n  /** Decrement button aria label, used by UpDownWidget */\n  DecrementAriaLabel = 'Decrease value by 1',\n  /** Increment button aria label, used by UpDownWidget */\n  IncrementAriaLabel = 'Increase value by 1',\n  // Strings with replaceable parameters\n  /** Unknown field type reason, where %1 will be replaced with the type as provided by SchemaField */\n  UnknownFieldType = 'Unknown field type %1',\n  /** Option prefix, where %1 will be replaced with the option index as provided by MultiSchemaField */\n  OptionPrefix = 'Option %1',\n  /** Option prefix, where %1 and %2 will be replaced by the schema title and option index, respectively as provided by\n   * MultiSchemaField\n   */\n  TitleOptionPrefix = '%1 option %2',\n  /** Key label, where %1 will be replaced by the label as provided by WrapIfAdditionalTemplate */\n  KeyLabel = '%1 Key',\n  // Strings with replaceable parameters AND/OR that support markdown and html\n  /** Invalid object field configuration as provided by the ObjectField */\n  InvalidObjectField = 'Invalid \"%1\" object field configuration: <em>%2</em>.',\n  /** Unsupported field schema, used by UnsupportedField */\n  UnsupportedField = 'Unsupported field schema.',\n  /** Unsupported field schema, where %1 will be replaced by the idSchema.$id as provided by UnsupportedField */\n  UnsupportedFieldWithId = 'Unsupported field schema for field <code>%1</code>.',\n  /** Unsupported field schema, where %1 will be replaced by the reason string as provided by UnsupportedField */\n  UnsupportedFieldWithReason = 'Unsupported field schema: <em>%1</em>.',\n  /** Unsupported field schema, where %1 and %2 will be replaced by the idSchema.$id and reason strings, respectively,\n   * as provided by UnsupportedField\n   */\n  UnsupportedFieldWithIdAndReason = 'Unsupported field schema for field <code>%1</code>: <em>%2</em>.',\n  /** File name, type and size info, where %1, %2 and %3 will be replaced by the file name, file type and file size as\n   * provided by FileWidget\n   */\n  FilesInfo = '<strong>%1</strong> (%2, %3 bytes)',\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { ID_KEY } from '../constants';\nimport hashForSchema from '../hashForSchema';\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  RJSFSchema,\n  RJSFValidationError,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from '../types';\n\n/** The type of the map of schema hash to schema\n */\nexport type SchemaMap<S extends StrictRJSFSchema = RJSFSchema> = {\n  [hash: string]: S;\n};\n\n/** An implementation of the `ValidatorType` interface that is designed for use in capturing schemas used by the\n * `isValid()` function. The rest of the implementation of the interface throws errors when it is attempted to be used.\n * An instance of the object allows the caller to capture the schemas used in calls to the `isValid()` function. These\n * captured schema, along with the root schema used to construct the object are stored in the map of schemas keyed by\n * the hashed value of the schema. NOTE: After hashing the schema, an $id with the hash value is added to the\n * schema IF that schema doesn't already have an $id, prior to putting the schema into the map.\n */\nexport default class ParserValidator<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements ValidatorType<T, S, F>\n{\n  /** The rootSchema provided during construction of the class */\n  readonly rootSchema: S;\n\n  /** The map of schemas encountered by the ParserValidator */\n  schemaMap: SchemaMap<S> = {};\n\n  /** Construct the ParserValidator for the given `rootSchema`. This `rootSchema` will be stashed in the `schemaMap`\n   * first.\n   *\n   * @param rootSchema - The root schema against which this validator will be executed\n   */\n  constructor(rootSchema: S) {\n    this.rootSchema = rootSchema;\n    this.addSchema(rootSchema, hashForSchema<S>(rootSchema));\n  }\n\n  /** Adds the given `schema` to the `schemaMap` keyed by the `hash` or `ID_KEY` if present on the `schema`. If the\n   * schema does not have an `ID_KEY`, then the `hash` will be added as the `ID_KEY` to allow the schema to be\n   * associated with it's `hash` for future use (by a schema compiler).\n   *\n   * @param schema - The schema which is to be added to the map\n   * @param hash - The hash value at which to map the schema\n   */\n  addSchema(schema: S, hash: string) {\n    const key = get(schema, ID_KEY, hash);\n    const identifiedSchema = { ...schema, [ID_KEY]: key };\n    const existing = this.schemaMap[key];\n    if (!existing) {\n      this.schemaMap[key] = identifiedSchema;\n    } else if (!isEqual(existing, identifiedSchema)) {\n      console.error('existing schema:', JSON.stringify(existing, null, 2));\n      console.error('new schema:', JSON.stringify(identifiedSchema, null, 2));\n      throw new Error(\n        `Two different schemas exist with the same key ${key}! What a bad coincidence. If possible, try adding an $id to one of the schemas`\n      );\n    }\n  }\n\n  /** Returns the current `schemaMap` to the caller\n   */\n  getSchemaMap() {\n    return this.schemaMap;\n  }\n\n  /** Implements the `ValidatorType` `isValid()` method to capture the `schema` in the `schemaMap`. Throws an error when\n   * the `rootSchema` is not the same as the root schema provided during construction.\n   *\n   * @param schema - The schema to record in the `schemaMap`\n   * @param _formData - The formData parameter that is ignored\n   * @param rootSchema - The root schema associated with the schema\n   * @throws - Error when the given `rootSchema` differs from the root schema provided during construction\n   */\n  isValid(schema: S, _formData: T, rootSchema: S): boolean {\n    if (!isEqual(rootSchema, this.rootSchema)) {\n      throw new Error('Unexpectedly calling isValid() with a rootSchema that differs from the construction rootSchema');\n    }\n    this.addSchema(schema, hashForSchema<S>(schema));\n\n    return false;\n  }\n\n  /** Implements the `ValidatorType` `rawValidation()` method to throw an error since it is never supposed to be called\n   *\n   * @param _schema - The schema parameter that is ignored\n   * @param _formData - The formData parameter that is ignored\n   */\n  rawValidation<Result = any>(_schema: S, _formData?: T): { errors?: Result[]; validationError?: Error } {\n    throw new Error('Unexpectedly calling the `rawValidation()` method during schema parsing');\n  }\n\n  /** Implements the `ValidatorType` `toErrorList()` method to throw an error since it is never supposed to be called\n   *\n   * @param _errorSchema - The error schema parameter that is ignored\n   * @param _fieldPath - The field path parameter that is ignored\n   */\n  toErrorList(_errorSchema?: ErrorSchema<T>, _fieldPath?: string[]): RJSFValidationError[] {\n    throw new Error('Unexpectedly calling the `toErrorList()` method during schema parsing');\n  }\n\n  /** Implements the `ValidatorType` `validateFormData()` method to throw an error since it is never supposed to be\n   * called\n   *\n   * @param _formData - The formData parameter that is ignored\n   * @param _schema - The schema parameter that is ignored\n   * @param _customValidate - The customValidate parameter that is ignored\n   * @param _transformErrors - The transformErrors parameter that is ignored\n   * @param _uiSchema - The uiSchema parameter that is ignored\n   */\n  validateFormData(\n    _formData: T,\n    _schema: S,\n    _customValidate?: CustomValidator<T, S, F>,\n    _transformErrors?: ErrorTransformer<T, S, F>,\n    _uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    throw new Error('Unexpectedly calling the `validateFormData()` method during schema parsing');\n  }\n}\n","import forEach from 'lodash/forEach';\nimport isEqual from 'lodash/isEqual';\n\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '../types';\nimport { PROPERTIES_KEY, ITEMS_KEY } from '../constants';\nimport ParserValidator, { SchemaMap } from './ParserValidator';\nimport { retrieveSchemaInternal, resolveAnyOrOneOfSchemas } from '../schema/retrieveSchema';\n\n/** Recursive function used to parse the given `schema` belonging to the `rootSchema`. The `validator` is used to\n * capture the sub-schemas that the `isValid()` function is called with. For each schema returned by the\n * `retrieveSchemaInternal()`, the `resolveAnyOrOneOfSchemas()` function is called. For each of the schemas returned\n * from THAT call have `properties`, then each of the sub-schema property objects are then recursively parsed.\n *\n * @param validator - The `ParserValidator` implementation used to capture `isValid()` calls during parsing\n * @param recurseList - The list of schemas returned from the `retrieveSchemaInternal`, preventing infinite recursion\n * @param rootSchema - The root schema from which the schema parsing began\n * @param schema - The current schema element being parsed\n */\nfunction parseSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ParserValidator<T, S, F>,\n  recurseList: S[],\n  rootSchema: S,\n  schema: S\n) {\n  const schemas = retrieveSchemaInternal<T, S, F>(validator, schema, rootSchema, undefined, true);\n  schemas.forEach((schema) => {\n    const sameSchemaIndex = recurseList.findIndex((item) => isEqual(item, schema));\n    if (sameSchemaIndex === -1) {\n      recurseList.push(schema);\n      const allOptions = resolveAnyOrOneOfSchemas<T, S, F>(validator, schema, rootSchema, true);\n      allOptions.forEach((s) => {\n        if (PROPERTIES_KEY in s && s[PROPERTIES_KEY]) {\n          forEach(schema[PROPERTIES_KEY], (value) => {\n            parseSchema<T, S, F>(validator, recurseList, rootSchema, value as S);\n          });\n        }\n      });\n      if (ITEMS_KEY in schema && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n        parseSchema<T, S, F>(validator, recurseList, rootSchema, schema.items as S);\n      }\n    }\n  });\n}\n\n/** Parses the given `rootSchema` to extract out all the sub-schemas that maybe contained within it. Returns a map of\n * the hash of the schema to schema/sub-schema.\n *\n * @param rootSchema - The root schema to parse for sub-schemas used by `isValid()` calls\n * @returns - The `SchemaMap` of all schemas that were parsed\n */\nexport default function schemaParser<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  rootSchema: S\n): SchemaMap<S> {\n  const validator = new ParserValidator<T, S, F>(rootSchema);\n  const recurseList: S[] = [];\n\n  parseSchema(validator, recurseList, rootSchema, rootSchema);\n\n  return validator.getSchemaMap();\n}\n","import isObject from './isObject';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Checks the schema to see if it is allowing additional items, by verifying that `schema.additionalItems` is an\n * object. The user is warned in the console if `schema.additionalItems` has the value `true`.\n *\n * @param schema - The schema object to check\n * @returns - True if additional items is allowed, otherwise false\n */\nexport default function allowAdditionalItems<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  if (schema.additionalItems === true) {\n    console.warn('additionalItems=true is currently not supported');\n  }\n  return isObject(schema.additionalItems);\n}\n","/** Attempts to convert the string into a number. If an empty string is provided, then `undefined` is returned. If a\n * `null` is provided, it is returned. If the string ends in a `.` then the string is returned because the user may be\n * in the middle of typing a float number. If a number ends in a pattern like `.0`, `.20`, `.030`, string is returned\n * because the user may be typing number that will end in a non-zero digit. Otherwise, the string is wrapped by\n * `Number()` and if that result is not `NaN`, that number will be returned, otherwise the string `value` will be.\n *\n * @param value - The string or null value to convert to a number\n * @returns - The `value` converted to a number when appropriate, otherwise the `value`\n */\nexport default function asNumber(value: string | null) {\n  if (value === '') {\n    return undefined;\n  }\n  if (value === null) {\n    return null;\n  }\n  if (/\\.$/.test(value)) {\n    // '3.' can't really be considered a number even if it parses in js. The\n    // user is most likely entering a float.\n    return value;\n  }\n  if (/\\.0$/.test(value)) {\n    // we need to return this as a string here, to allow for input like 3.07\n    return value;\n  }\n\n  if (/\\.\\d*0$/.test(value)) {\n    // It's a number, that's cool - but we need it as a string so it doesn't screw\n    // with the user when entering dollar amounts or other values (such as those with\n    // specific precision or number of significant digits)\n    return value;\n  }\n\n  const n = Number(value);\n  const valid = typeof n === 'number' && !Number.isNaN(n);\n\n  return valid ? n : value;\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\nimport getUiOptions from './getUiOptions';\n\n/** Checks whether the field described by `schema`, having the `uiSchema` and `formData` supports expanding. The UI for\n * the field can expand if it has additional properties, is not forced as non-expandable by the `uiSchema` and the\n * `formData` object doesn't already have `schema.maxProperties` elements.\n *\n * @param schema - The schema for the field that is being checked\n * @param [uiSchema={}] - The uiSchema for the field\n * @param [formData] - The formData for the field\n * @returns - True if the schema element has additionalProperties, is expandable, and not at the maxProperties limit\n */\nexport default function canExpand<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  uiSchema: UiSchema<T, S, F> = {},\n  formData?: T\n) {\n  if (!schema.additionalProperties) {\n    return false;\n  }\n  const { expandable = true } = getUiOptions<T, S, F>(uiSchema);\n  if (expandable === false) {\n    return expandable;\n  }\n  // if ui:options.expandable was not explicitly set to false, we can add\n  // another property if we have not exceeded maxProperties yet\n  if (schema.maxProperties !== undefined && formData) {\n    return Object.keys(formData).length < schema.maxProperties;\n  }\n  return true;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { FieldValidation, FormValidation, GenericObjectType } from './types';\n\n/** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n *\n * @param formData - The form data around which the error handler is created\n * @returns - A `FormValidation` object based on the `formData` structure\n */\nexport default function createErrorHandler<T = any>(formData: T): FormValidation<T> {\n  const handler: FieldValidation = {\n    // We store the list of errors for this node in a property named __errors\n    // to avoid name collision with a possible sub schema field named\n    // 'errors' (see `utils.toErrorSchema`).\n    [ERRORS_KEY]: [],\n    addError(message: string) {\n      this[ERRORS_KEY]!.push(message);\n    },\n  };\n  if (Array.isArray(formData)) {\n    return formData.reduce((acc, value, key) => {\n      return { ...acc, [key]: createErrorHandler(value) };\n    }, handler);\n  }\n  if (isPlainObject(formData)) {\n    const formObject: GenericObjectType = formData as GenericObjectType;\n    return Object.keys(formObject).reduce((acc, key) => {\n      return { ...acc, [key]: createErrorHandler(formObject[key]) };\n    }, handler as FormValidation<T>);\n  }\n  return handler as FormValidation<T>;\n}\n","/** Given the `FileReader.readAsDataURL()` based `dataURI` extracts that data into an actual Blob along with the name\n * of that Blob if provided in the URL. If no name is provided, then the name falls back to `unknown`.\n *\n * @param dataURI - The `DataUrl` potentially containing name and raw data to be converted to a Blob\n * @returns - an object containing a Blob and its name, extracted from the URI\n */\nexport default function dataURItoBlob(dataURI: string) {\n  // Split metadata from data\n  const splitted: string[] = dataURI.split(',');\n  // Split params\n  const params: string[] = splitted[0].split(';');\n  // Get mime-type from params\n  const type: string = params[0].replace('data:', '');\n  // Filter the name property from params\n  const properties = params.filter((param) => {\n    return param.split('=')[0] === 'name';\n  });\n  // Look for the name and use unknown if no name property.\n  let name: string;\n  if (properties.length !== 1) {\n    name = 'unknown';\n  } else {\n    // Because we filtered out the other property,\n    // we only have the name case here, which we decode to make it human-readable\n    name = decodeURI(properties[0].split('=')[1]);\n  }\n\n  // Built the Uint8Array Blob parameter from the base64 string.\n  try {\n    const binary = atob(splitted[1]);\n    const array = [];\n    for (let i = 0; i < binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    // Create the blob object\n    const blob = new window.Blob([new Uint8Array(array)], { type });\n\n    return { blob, name };\n  } catch (error) {\n    return { blob: { size: 0, type: (error as Error).message }, name: dataURI };\n  }\n}\n","import { TranslatableString } from './enums';\nimport replaceStringParameters from './replaceStringParameters';\n\n/** Translates a `TranslatableString` value `stringToTranslate` into english. When a `params` array is provided, each\n * value in the array is used to replace any of the replaceable parameters in the `stringToTranslate` using the `%1`,\n * `%2`, etc. replacement specifiers.\n *\n * @param stringToTranslate - The `TranslatableString` value to convert to english\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The `stringToTranslate` itself with any replaceable parameter values substituted\n */\nexport default function englishStringTranslator(stringToTranslate: TranslatableString, params?: string[]): string {\n  return replaceStringParameters(stringToTranslate, params);\n}\n","import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n\n/** Removes the enum option value at the `valueIndex` from the currently `selected` (list of) value(s). If `selected` is\n * a list, then that list is updated to remove the enum option value with the `valueIndex` in `allEnumOptions`. If it is\n * a single value, then if the enum option value with the `valueIndex` in `allEnumOptions` matches `selected`, undefined\n * is returned, otherwise the `selected` value is returned.\n *\n * @param valueIndex - The index of the value to be removed from the selected list or single value\n * @param selected - The current (list of) selected value(s)\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated `selected` with the enum option value at `valueIndex` in `allEnumOptions` removed from it,\n *        unless `selected` is a single value. In that case, if the `valueIndex` value matches `selected`, returns\n *        undefined, otherwise `selected`.\n */\nexport default function enumOptionsDeselectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected?: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (Array.isArray(selected)) {\n    return selected.filter((v) => !isEqual(v, value));\n  }\n  return isEqual(value, selected) ? undefined : selected;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsIsSelected from './enumOptionsIsSelected';\n\n/** Returns the index(es) of the options in `allEnumOptions` whose value(s) match the ones in `value`. All the\n * `enumOptions` are filtered based on whether they are a \"selected\" `value` and the index of each selected one is then\n * stored in an array. If `multiple` is true, that array is returned, otherwise the first element in the array is\n * returned.\n *\n * @param value - The single value or list of values for which indexes are desired\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [multiple=false] - Optional flag, if true will return a list of index, otherwise a single one\n * @returns - A single string index for the first `value` in `allEnumOptions`, if not `multiple`. Otherwise, the list\n *        of indexes for (each of) the value(s) in `value`.\n */\nexport default function enumOptionsIndexForValue<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  multiple = false\n): string | string[] | undefined {\n  const selectedIndexes: string[] = allEnumOptions\n    .map((opt, index) => (enumOptionsIsSelected(opt.value, value) ? String(index) : undefined))\n    .filter((opt) => typeof opt !== 'undefined') as string[];\n  if (!multiple) {\n    return selectedIndexes[0];\n  }\n  return selectedIndexes;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\nimport { isNil } from 'lodash';\n\n/** Add the enum option value at the `valueIndex` to the list of `selected` values in the proper order as defined by\n * `allEnumOptions`\n *\n * @param valueIndex - The index of the value that should be selected\n * @param selected - The current list of selected values\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated list of selected enum values with enum value at the `valueIndex` added to it\n */\nexport default function enumOptionsSelectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected: EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n) {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (!isNil(value)) {\n    const index = allEnumOptions.findIndex((opt) => value === opt.value);\n    const all = allEnumOptions.map(({ value: val }) => val);\n    const updated = selected.slice(0, index).concat(value, selected.slice(index));\n    // As inserting values at predefined index positions doesn't work with empty\n    // arrays, we need to reorder the updated selection to match the initial order\n    return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n  }\n  return selected;\n}\n","import rangeSpec from './rangeSpec';\nimport { FormContextType, InputPropsType, RJSFSchema, StrictRJSFSchema, UIOptionsType } from './types';\n\n/** Using the `schema`, `defaultType` and `options`, extract out the props for the <input> element that make sense.\n *\n * @param schema - The schema for the field provided by the widget\n * @param [defaultType] - The default type, if any, for the field provided by the widget\n * @param [options={}] - The UI Options for the field provided by the widget\n * @param [autoDefaultStepAny=true] - Determines whether to auto-default step=any when the type is number and no step\n * @returns - The extracted `InputPropsType` object\n */\nexport default function getInputProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  defaultType?: string,\n  options: UIOptionsType<T, S, F> = {},\n  autoDefaultStepAny = true\n): InputPropsType {\n  const inputProps: InputPropsType = {\n    type: defaultType || 'text',\n    ...rangeSpec(schema),\n  };\n\n  // If options.inputType is set use that as the input type\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!defaultType) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === 'number') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined and we are auto-defaulting the \"any\" step\n      if (autoDefaultStepAny && inputProps.step === undefined) {\n        // Setting step to 'any' fixes a bug in Safari where decimals are not\n        // allowed in number inputs\n        inputProps.step = 'any';\n      }\n    } else if (schema.type === 'integer') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined\n      if (inputProps.step === undefined) {\n        // Since this is integer, you always want to step up or down in multiples of 1\n        inputProps.step = 1;\n      }\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  }\n\n  return inputProps;\n}\n","import { FormContextType, TemplatesType, Registry, UIOptionsType, StrictRJSFSchema, RJSFSchema } from './types';\n\n/** Returns the template with the given `name` from either the `uiSchema` if it is defined or from the `registry`\n * otherwise. NOTE, since `ButtonTemplates` are not overridden in `uiSchema` only those in the `registry` are returned.\n *\n * @param name - The name of the template to fetch, restricted to the keys of `TemplatesType`\n * @param registry - The `Registry` from which to read the template\n * @param [uiOptions={}] - The `UIOptionsType` from which to read an alternate template\n * @returns - The template from either the `uiSchema` or `registry` for the `name`\n */\nexport default function getTemplate<\n  Name extends keyof TemplatesType<T, S, F>,\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(name: Name, registry: Registry<T, S, F>, uiOptions: UIOptionsType<T, S, F> = {}): TemplatesType<T, S, F>[Name] {\n  const { templates } = registry;\n  if (name === 'ButtonTemplates') {\n    return templates[name];\n  }\n  return (\n    // Evaluating uiOptions[name] results in TS2590: Expression produces a union type that is too complex to represent\n    // To avoid that, we cast uiOptions to `any` before accessing the name field\n    ((uiOptions as any)[name] as TemplatesType<T, S, F>[Name]) || templates[name]\n  );\n}\n","import getWidget from './getWidget';\nimport { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema, Widget } from './types';\n\n/** Detects whether the `widget` exists for the `schema` with the associated `registryWidgets` and returns true if it\n * does, or false if it doesn't.\n *\n * @param schema - The schema for the field\n * @param widget - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - True if the widget exists, false otherwise\n */\nexport default function hasWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  widget: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n) {\n  try {\n    getWidget(schema, widget, registeredWidgets);\n    return true;\n  } catch (e) {\n    const err: Error = e as Error;\n    if (err.message && (err.message.startsWith('No widget') || err.message.startsWith('Unsupported widget'))) {\n      return false;\n    }\n    throw e;\n  }\n}\n","import { ReactElement } from 'react';\n\n/** Helper function that will return the value to use for a widget `label` based on `hideLabel`. The `fallback` is used\n * as the return value from the function when `hideLabel` is true. Due to the implementation of theme components, it\n * may be necessary to return something other than `undefined` to cause the theme component to not render a label. Some\n * themes require may `false` and others may require an empty string.\n *\n * @param [label] - The label string or component to render when not hidden\n * @param [hideLabel] - Flag, if true, will cause the label to be hidden\n * @param [fallback] - One of 3 values, `undefined` (the default), `false` or an empty string\n * @returns - `fallback` if `hideLabel` is true, otherwise `label`\n */\nexport function labelValue(label?: string | ReactElement, hideLabel?: boolean, fallback?: ''): undefined | string;\nexport default function labelValue(label?: string | ReactElement, hideLabel?: boolean, fallback?: false | '') {\n  return hideLabel ? fallback : label;\n}\n","/** Converts a local Date string into a UTC date string\n *\n * @param dateString - The string representation of a date as accepted by the `Date()` constructor\n * @returns - A UTC date string if `dateString` is truthy, otherwise undefined\n */\nexport default function localToUTC(dateString: string) {\n  return dateString ? new Date(dateString).toJSON() : undefined;\n}\n","import toConstant from './toConstant';\nimport { RJSFSchema, EnumOptionsType, StrictRJSFSchema } from './types';\n\n/** Gets the list of options from the schema. If the schema has an enum list, then those enum values are returned. The\n * labels for the options will be extracted from the non-standard, RJSF-deprecated `enumNames` if it exists, otherwise\n * the label will be the same as the `value`. If the schema has a `oneOf` or `anyOf`, then the value is the list of\n * `const` values from the schema and the label is either the `schema.title` or the value.\n *\n * @param schema - The schema from which to extract the options list\n * @returns - The list of options from the schema\n */\nexport default function optionsList<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): EnumOptionsType<S>[] | undefined {\n  // enumNames was deprecated in v5 and is intentionally omitted from the RJSFSchema type.\n  // Cast the type to include enumNames so the feature still works.\n  const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n  if (schemaWithEnumNames.enumNames && process.env.NODE_ENV !== 'production') {\n    console.warn('The enumNames property is deprecated and may be removed in a future major release.');\n  }\n  if (schema.enum) {\n    return schema.enum.map((value, i) => {\n      const label = (schemaWithEnumNames.enumNames && schemaWithEnumNames.enumNames[i]) || String(value);\n      return { label, value };\n    });\n  }\n  const altSchemas = schema.oneOf || schema.anyOf;\n  return (\n    altSchemas &&\n    altSchemas.map((aSchemaDef) => {\n      const aSchema = aSchemaDef as S;\n      const value = toConstant(aSchema);\n      const label = aSchema.title || String(value);\n      return {\n        schema: aSchema,\n        label,\n        value,\n      };\n    })\n  );\n}\n","import { GenericObjectType } from './types';\n\n/** Given a list of `properties` and an `order` list, returns a list that contains the `properties` ordered correctly.\n * If `order` is not an array, then the untouched `properties` list is returned. Otherwise `properties` is ordered per\n * the `order` list. If `order` contains a '*' then any `properties` that are not mentioned explicity in `order` will be\n * places in the location of the `*`.\n *\n * @param properties - The list of property keys to be ordered\n * @param order - An array of property keys to be ordered first, with an optional '*' property\n * @returns - A list with the `properties` ordered\n * @throws - Error when the properties cannot be ordered correctly\n */\nexport default function orderProperties(properties: string[], order?: string[]): string[] {\n  if (!Array.isArray(order)) {\n    return properties;\n  }\n\n  const arrayToHash = (arr: string[]) =>\n    arr.reduce((prev: GenericObjectType, curr) => {\n      prev[curr] = true;\n      return prev;\n    }, {});\n  const errorPropList = (arr: string[]) =>\n    arr.length > 1 ? `properties '${arr.join(\"', '\")}'` : `property '${arr[0]}'`;\n  const propertyHash = arrayToHash(properties);\n  const orderFiltered = order.filter((prop) => prop === '*' || propertyHash[prop]);\n  const orderHash = arrayToHash(orderFiltered);\n\n  const rest = properties.filter((prop: string) => !orderHash[prop]);\n  const restIndex = orderFiltered.indexOf('*');\n  if (restIndex === -1) {\n    if (rest.length) {\n      throw new Error(`uiSchema order list does not contain ${errorPropList(rest)}`);\n    }\n    return orderFiltered;\n  }\n  if (restIndex !== orderFiltered.lastIndexOf('*')) {\n    throw new Error('uiSchema order list contains more than one wildcard item');\n  }\n\n  const complete = [...orderFiltered];\n  complete.splice(restIndex, 1, ...rest);\n  return complete;\n}\n","import { DateObject } from './types';\n\n/** Parses the `dateString` into a `DateObject`, including the time information when `includeTime` is true\n *\n * @param dateString - The date string to parse into a DateObject\n * @param [includeTime=true] - Optional flag, if false, will not include the time data into the object\n * @returns - The date string converted to a `DateObject`\n * @throws - Error when the date cannot be parsed from the string\n */\nexport default function parseDateString(dateString?: string, includeTime = true): DateObject {\n  if (!dateString) {\n    return {\n      year: -1,\n      month: -1,\n      day: -1,\n      hour: includeTime ? -1 : 0,\n      minute: includeTime ? -1 : 0,\n      second: includeTime ? -1 : 0,\n    };\n  }\n  const date = new Date(dateString);\n  if (Number.isNaN(date.getTime())) {\n    throw new Error('Unable to parse date ' + dateString);\n  }\n  return {\n    year: date.getUTCFullYear(),\n    month: date.getUTCMonth() + 1, // oh you, javascript.\n    day: date.getUTCDate(),\n    hour: includeTime ? date.getUTCHours() : 0,\n    minute: includeTime ? date.getUTCMinutes() : 0,\n    second: includeTime ? date.getUTCSeconds() : 0,\n  };\n}\n","import { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Check to see if a `schema` specifies that a value must be true. This happens when:\n * - `schema.const` is truthy\n * - `schema.enum` == `[true]`\n * - `schema.anyOf` or `schema.oneOf` has a single value which recursively returns true\n * - `schema.allOf` has at least one value which recursively returns true\n *\n * @param schema - The schema to check\n * @returns - True if the schema specifies a value that must be true, false otherwise\n */\nexport default function schemaRequiresTrueValue<S extends StrictRJSFSchema = RJSFSchema>(schema: S): boolean {\n  // Check if const is a truthy value\n  if (schema.const) {\n    return true;\n  }\n\n  // Check if an enum has a single value of true\n  if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {\n    return true;\n  }\n\n  // If anyOf has a single value, evaluate the subschema\n  if (schema.anyOf && schema.anyOf.length === 1) {\n    return schemaRequiresTrueValue(schema.anyOf[0] as S);\n  }\n\n  // If oneOf has a single value, evaluate the subschema\n  if (schema.oneOf && schema.oneOf.length === 1) {\n    return schemaRequiresTrueValue(schema.oneOf[0] as S);\n  }\n\n  // Evaluate each subschema in allOf, to see if one of them requires a true value\n  if (schema.allOf) {\n    const schemaSome = (subSchema: S['additionalProperties']) => schemaRequiresTrueValue(subSchema as S);\n    return schema.allOf.some(schemaSome);\n  }\n\n  return false;\n}\n","import React from 'react';\n\nimport deepEquals from './deepEquals';\n\n/** Determines whether the given `component` should be rerendered by comparing its current set of props and state\n * against the next set. If either of those two sets are not the same, then the component should be rerendered.\n *\n * @param component - A React component being checked\n * @param nextProps - The next set of props against which to check\n * @param nextState - The next set of state against which to check\n * @returns - True if the component should be re-rendered, false otherwise\n */\nexport default function shouldRender(component: React.Component, nextProps: any, nextState: any) {\n  const { props, state } = component;\n  return !deepEquals(props, nextProps) || !deepEquals(state, nextState);\n}\n","import { DateObject } from './types';\n\n/** Returns a UTC date string for the given `dateObject`. If `time` is false, then the time portion of the string is\n * removed.\n *\n * @param dateObject - The `DateObject` to convert to a date string\n * @param [time=true] - Optional flag used to remove the time portion of the date string if false\n * @returns - The UTC date string\n */\nexport default function toDateString(dateObject: DateObject, time = true) {\n  const { year, month, day, hour = 0, minute = 0, second = 0 } = dateObject;\n  const utcTime = Date.UTC(year, month - 1, day, hour, minute, second);\n  const datetime = new Date(utcTime).toJSON();\n  return time ? datetime : datetime.slice(0, 10);\n}\n","import toPath from 'lodash/toPath';\n\nimport { ErrorSchema, RJSFValidationError } from './types';\nimport ErrorSchemaBuilder from './ErrorSchemaBuilder';\n\n/** Transforms a rjsf validation errors list:\n * [\n *   {property: '.level1.level2[2].level3', message: 'err a'},\n *   {property: '.level1.level2[2].level3', message: 'err b'},\n *   {property: '.level1.level2[4].level3', message: 'err b'},\n * ]\n * Into an error tree:\n * {\n *   level1: {\n *     level2: {\n *       2: {level3: {errors: ['err a', 'err b']}},\n *       4: {level3: {errors: ['err b']}},\n *     }\n *   }\n * };\n *\n * @param errors - The list of RJSFValidationError objects\n * @returns - The `ErrorSchema` built from the list of `RJSFValidationErrors`\n */\nexport default function toErrorSchema<T = any>(errors: RJSFValidationError[]): ErrorSchema<T> {\n  const builder = new ErrorSchemaBuilder<T>();\n  if (errors.length) {\n    errors.forEach((error) => {\n      const { property, message } = error;\n      // When the property is the root element, just use an empty array for the path\n      const path = property === '.' ? [] : toPath(property);\n      // If the property is at the root (.level1) then toPath creates\n      // an empty array element at the first index. Remove it.\n      if (path.length > 0 && path[0] === '') {\n        path.splice(0, 1);\n      }\n      if (message) {\n        builder.addErrors(message, path);\n      }\n    });\n  }\n  return builder.ErrorSchema;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ErrorSchema, FormValidation, GenericObjectType } from './types';\n\n/** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError()` functions from it\n *\n * @param errorHandler - The `FormValidation` error handling structure\n * @returns - The `ErrorSchema` resulting from the stripping of the `addError()` function\n */\nexport default function unwrapErrorHandler<T = any>(errorHandler: FormValidation<T>): ErrorSchema<T> {\n  return Object.keys(errorHandler).reduce((acc, key) => {\n    if (key === 'addError') {\n      return acc;\n    } else {\n      const childSchema = (errorHandler as GenericObjectType)[key];\n      if (isPlainObject(childSchema)) {\n        return {\n          ...acc,\n          [key]: unwrapErrorHandler(childSchema),\n        };\n      }\n      return { ...acc, [key]: childSchema };\n    }\n  }, {} as ErrorSchema<T>);\n}\n","import pad from './pad';\n\n/** Converts a UTC date string into a local Date format\n *\n * @param jsonDate - A UTC date string\n * @returns - An empty string when `jsonDate` is falsey, otherwise a date string in local format\n */\nexport default function utcToLocal(jsonDate: string) {\n  if (!jsonDate) {\n    return '';\n  }\n\n  // required format of `'yyyy-MM-ddThh:mm' followed by optional ':ss' or ':ss.SSS'\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type%3Ddatetime-local)\n  // > should be a _valid local date and time string_ (not GMT)\n\n  // Note - date constructor passed local ISO-8601 does not correctly\n  // change time to UTC in node pre-8\n  const date = new Date(jsonDate);\n\n  const yyyy = pad(date.getFullYear(), 4);\n  const MM = pad(date.getMonth() + 1, 2);\n  const dd = pad(date.getDate(), 2);\n  const hh = pad(date.getHours(), 2);\n  const mm = pad(date.getMinutes(), 2);\n  const ss = pad(date.getSeconds(), 2);\n  const SSS = pad(date.getMilliseconds(), 3);\n\n  return `${yyyy}-${MM}-${dd}T${hh}:${mm}:${ss}.${SSS}`;\n}\n","import isEmpty from 'lodash/isEmpty';\n\nimport mergeObjects from './mergeObjects';\nimport toErrorList from './toErrorList';\nimport { ErrorSchema, ValidationData } from './types';\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `toErrorList()` on the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The optional additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n */\nexport default function validationDataMerge<T = any>(\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import { REF_KEY, ROOT_SCHEMA_PREFIX } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\nimport isObject from 'lodash/isObject';\n\n/** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixObject<S extends StrictRJSFSchema = RJSFSchema>(node: S): S {\n  for (const key in node) {\n    const realObj: { [k: string]: any } = node;\n    const value = realObj[key];\n    if (key === REF_KEY && typeof value === 'string' && value.startsWith('#')) {\n      realObj[key] = ROOT_SCHEMA_PREFIX + value;\n    } else {\n      realObj[key] = withIdRefPrefix<S>(value);\n    }\n  }\n  return node;\n}\n\n/** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixArray<S extends StrictRJSFSchema = RJSFSchema>(node: S[]): S[] {\n  for (let i = 0; i < node.length; i++) {\n    node[i] = withIdRefPrefix<S>(node[i]) as S;\n  }\n  return node;\n}\n\n/** Recursively prefixes all `$ref`s in a schema with the value of the `ROOT_SCHEMA_PREFIX` constant.\n * This is used in isValid to make references to the rootSchema\n *\n * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n * @returns - A copy of the `schemaNode` with updated `$ref`s\n */\nexport default function withIdRefPrefix<S extends StrictRJSFSchema = RJSFSchema>(schemaNode: S): S | S[] {\n  if (Array.isArray(schemaNode)) {\n    return withIdRefPrefixArray<S>([...schemaNode]);\n  }\n  if (isObject(schemaNode)) {\n    return withIdRefPrefixObject<S>({ ...schemaNode });\n  }\n  return schemaNode;\n}\n"],"names":["isObject","thing","File","Date","Array","isArray","ADDITIONAL_PROPERTY_FLAG","ADDITIONAL_PROPERTIES_KEY","ALL_OF_KEY","ANY_OF_KEY","CONST_KEY","DEFAULT_KEY","DEPENDENCIES_KEY","ENUM_KEY","ERRORS_KEY","ID_KEY","IF_KEY","ITEMS_KEY","JUNK_OPTION_ID","NAME_KEY","ONE_OF_KEY","PROPERTIES_KEY","REQUIRED_KEY","SUBMIT_BTN_OPTIONS_KEY","REF_KEY","RJSF_ADDITONAL_PROPERTIES_FLAG","ROOT_SCHEMA_PREFIX","UI_FIELD_KEY","UI_WIDGET_KEY","UI_OPTIONS_KEY","getUiOptions","uiSchema","globalOptions","Object","keys","filter","key","indexOf","reduce","options","value","console","error","substring","deepEquals","a","b","isEqualWith","obj","other","splitKeyElementFromObject","object","omit","findSchemaDefinition","$ref","rootSchema","ref","startsWith","Error","decodeURIComponent","current","jsonpointer","get","undefined","remaining","theRef","subSchema","length","getMatchingOption","validator","formData","discriminatorField","i","option","has","discriminator","isValid","requiresAnyOf","anyOf","map","required","augmentedSchema","shallowClone","allOf","slice","push","assign","getFirstMatchingOption","getDiscriminatorFieldFromSchema","schema","maybeString","isString","warn","guessType","isNaN","getSchemaType","type","const","enum","properties","additionalProperties","includes","find","mergeSchemas","obj1","obj2","acc","left","right","union","retrieveSchema","rawFormData","retrieveSchemaInternal","getAllPermutationsOfXxxOf","listOfLists","permutations","list","flatMap","element","times","concat","forEach","permutation","resolveReference","expandAllBranches","localSchema","resolveAllReferences","resolvedSchema","updatedProps","transform","result","items","resolvedSchemas","resolveDependencies","s","allOfSubschema","resolveSchema","if","expression","then","else","otherwise","resolvedSchemaLessConditional","conditionValue","schemas","conditionalSchema","resolveCondition","mergeAllOf","deep","e","resolvedSchemaWithoutAllOf","theSchema","aFormData","set","stubExistingAdditionalProperties","resolveAnyOrOneOfSchemas","anyOrOneOf","oneOf","item","dependencies","remainingSchema","processDependencies","dependencyKey","remainingDependencies","dependencyValue","withDependentProperties","withDependentSchema","additionallyRequired","from","Set","dependent","dependentSchema","subschema","resolvedOneOf","validSubschemas","conditionPropertySchema","dependentSubschema","withExactlyOneSubschema","JUNK_OPTION","$id","__not_really_there__","calculateIndexScore","totalScore","score","formValue","newSchema","getClosestMatchingOption","newScore","default","selectedOption","resolvedOptions","allValidIndexes","validList","index","scoreCount","bestIndex","scoreData","bestScore","add","size","isFixedItems","every","mergeDefaultsWithFormData","defaults","mergeExtraArrayDefaults","defaultsArray","mapped","idx","mergeObjects","concatArrays","toMerge","isConstant","isSelect","altSchemas","isMultiSelect","uniqueItems","AdditionalItemsHandling","getInnerSchemaForArrayItem","additionalItems","Ignore","maybeAddDefaultToObject","computedDefault","includeUndefinedValues","isParentRequired","requiredFields","experimental_defaultFormStateBehavior","emptyObjectFields","isSelfOrParentRequired","isEmpty","computeDefaults","rawSchema","parentDefaults","_recurseList","schemaToCompute","updatedRecurseList","refName","itemSchema","objectDefaults","_schema$required","additionalPropertiesSchema","formDataRequired","_schema$required2","_experimental_default","schemaItem","Fallback","arrayMinItems","populate","defaultsLength","minItems","defaultEntries","fillerSchema","Invert","fillerDefault","fillerEntries","fill","getDefaultFormState","mergeExtraDefaults","isCustomWidget","isFilesArray","itemsSchema","format","getDisplayLabel","uiOptions","label","displayLabel","schemaType","mergeValidationData","validationData","additionalErrorSchema","errors","oldErrors","errorSchema","oldErrorSchema","toErrorList","NO_VALUE","Symbol","sanitizeDataForNewSchema","oldSchema","data","newFormData","removeOldSchemaData","nestedData","oldKeyedSchema","newKeyedSchema","oldSchemaTypeForKey","newSchemaTypeForKey","itemData","newOptionDefault","oldOptionDefault","newOptionConst","oldOptionConst","oldSchemaItems","newSchemaItems","oldSchemaType","newSchemaType","maxItems","newValue","aValue","itemValue","toIdSchemaInternal","idPrefix","idSeparator","id","_schema","findIndex","isEqual","idSchema","name","field","fieldId","toIdSchema","toPathSchemaInternal","pathSchema","replace","xxxOf","property","toPathSchema","SchemaUtils","constructor","this","getValidator","doesSchemaUtilsDiffer","replaceStringParameters","inputString","params","output","parts","split","param","partIndex","part","join","enumOptionsValueForIndex","valueIndex","allEnumOptions","emptyValue","val","Number","enumOptionsIsSelected","selected","some","sel","ErrorSchemaBuilder","initialSchema","resetAllErrors","ErrorSchema","getOrCreateErrorBlock","pathOfError","errorBlock","cloneDeep","addErrors","errorOrList","errorsList","setErrors","listToAdd","clearErrors","rangeSpec","spec","multipleOf","step","minimum","min","maximum","max","DEFAULT_OPTIONS","props","disabled","submitText","norender","widgetMap","boolean","checkbox","radio","select","hidden","string","text","password","email","hostname","ipv4","ipv6","uri","textarea","date","datetime","time","color","file","number","updown","range","integer","array","checkboxes","files","getWidget","widget","registeredWidgets","ReactIs","isForwardRef","createElement","isMemo","AWidget","MergedWidget","defaultOptions","defaultProps","_jsx","mergeWidgetOptions","hashForSchema","allKeys","JSON","stringify","hash","charCodeAt","toString","hashString","sort","idGenerator","suffix","descriptionId","errorId","examplesId","helpId","toConstant","pad","num","width","String","fieldPath","errorList","message","stack","childSchema","isPlainObject","TranslatableString","exports","ParserValidator","schemaMap","addSchema","identifiedSchema","existing","getSchemaMap","_formData","rawValidation","_errorSchema","_fieldPath","validateFormData","_customValidate","_transformErrors","_uiSchema","parseSchema","recurseList","includeExamples","examples","test","n","expandable","maxProperties","createErrorHandler","handler","addError","formObject","dataURI","splitted","decodeURI","binary","atob","blob","window","Blob","Uint8Array","stringToTranslate","v","multiple","selectedIndexes","opt","isNil","all","defaultType","autoDefaultStepAny","inputProps","inputType","autocomplete","autoComplete","registry","templates","err","hideLabel","fallback","dateString","toJSON","optionIndex","schemaWithEnumNames","enumNames","aSchemaDef","aSchema","title","order","arrayToHash","arr","prev","curr","propertyHash","orderFiltered","prop","orderHash","rest","restIndex","lastIndexOf","complete","splice","includeTime","year","month","day","hour","minute","second","getTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","schemaRequiresTrueValue","component","nextProps","nextState","state","dateObject","utcTime","UTC","builder","path","toPath","unwrapErrorHandler","errorHandler","jsonDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","withIdRefPrefix","schemaNode","node","withIdRefPrefixArray","withIdRefPrefixObject"],"mappings":"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"}