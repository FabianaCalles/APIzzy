{"version":3,"file":"core.umd.development.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/fields/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/templates/index.ts","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/TimeWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/index.ts","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import { Component, MouseEvent } from 'react';\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UiSchema,\n  ITEMS_KEY,\n} from '@rjsf/utils';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport { nanoid } from 'nanoid';\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T[], S, F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema, registry } = this.props;\n    const { translateString } = registry;\n    return get(\n      schema,\n      [ITEMS_KEY, 'title'],\n      get(schema, [ITEMS_KEY, 'description'], translateString(TranslatableString.ArrayItemTitle))\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes('null');\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== 'null';\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema, registry } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema, registry.globalUiOptions);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data\n   * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into\n   * the state, and then returning `onChange()` with the plain form data converted from the keyed data\n   *\n   * @param event - The event for the click\n   * @param [index] - The optional index at which to add the new data\n   */\n  _handleAddClick(event: MouseEvent, index?: number) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData];\n    if (index !== undefined) {\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n    } else {\n      newKeyedFormData.push(newKeyedFormDataRow);\n    }\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  }\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    this._handleAddClick(event);\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      this._handleAddClick(event, index);\n    };\n  };\n\n  /** Callback handler for when the user clicks on the copy button on an existing array element. Clones the row of\n   * keyed form data at the `index` into the next position in the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the copy button is clicked\n   */\n  onCopyIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: cloneDeep(keyedFormData[index].item),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      if (index !== undefined) {\n        newKeyedFormData.splice(index + 1, 0, newKeyedFormDataRow);\n      } else {\n        newKeyedFormData.push(newKeyedFormDataRow);\n      }\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === 'undefined' ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils, translateString } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T[], S, F>(\n        'UnsupportedFieldTemplate',\n        registry,\n        uiOptions\n      );\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason={translateString(TranslatableString.MissingItems)}\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = '_',\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items) ? (schema.items as S) : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const canAdd = this.canAddItem(formData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n    const { widget, title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={label}\n        hideLabel={!displayLabel}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext, globalUiOptions } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = 'select', title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={label}\n        hideLabel={!displayLabel}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n    const { widget = 'files', title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        options={options}\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label={label}\n        hideLabel={!displayLabel}\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = '_',\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items) ? (schema.items as S[]) : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const canAdd = this.canAddItem(items) && !!additionalSchema;\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      className: 'field field-array field-array-fixed-items',\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canAdd: boolean;\n    canRemove?: boolean;\n    canMoveUp: boolean;\n    canMoveDown: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>['onBlur'];\n    onFocus: FieldProps<T[], S, F>['onFocus'];\n    rawErrors?: string[];\n    totalItems: number;\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canAdd,\n      canRemove = true,\n      canMoveUp,\n      canMoveDown,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n      totalItems,\n    } = props;\n    const { disabled, hideError, idPrefix, idSeparator, readonly, uiSchema, registry, formContext } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n      globalUiOptions,\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true, copyable = false } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      copy: copyable && canAdd,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: 'array-item',\n      disabled,\n      canAdd,\n      hasCopy: has.copy,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      totalItems,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onCopyIndexClick: this.onCopyIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      schema: itemSchema,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext, translateString, globalUiOptions } = registry;\n  const {\n    widget = 'checkbox',\n    title: uiTitle,\n    // Unlike the other fields, don't use `getDisplayLabel()` since it always returns false for the boolean type\n    label: displayLabel = true,\n    ...options\n  } = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const Widget = getWidget(schema, widget, widgets);\n  const yes = translateString(TranslatableString.YesLabel);\n  const no = translateString(TranslatableString.NoLabel);\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n  const label = uiTitle ?? title ?? name;\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? yes : no),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every((v: any) => typeof v === 'boolean')) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? yes : no,\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? yes : no,\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={label}\n      hideLabel={!displayLabel}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import { Component } from 'react';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport unset from 'lodash/unset';\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  deepEquals,\n  ERRORS_KEY,\n  FieldProps,\n  FormContextType,\n  getDiscriminatorFieldFromSchema,\n  getUiOptions,\n  getWidget,\n  mergeSchemas,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState<S extends StrictRJSFSchema = RJSFSchema> = {\n  /** The currently selected option */\n  selectedOption: number;\n  /** The option schemas after retrieving all $refs */\n  retrievedOptions: S[];\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  AnyOfFieldState<S>\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const {\n      formData,\n      options,\n      registry: { schemaUtils },\n    } = this.props;\n    // cache the retrieved options in state in case they have $refs to save doing it later\n    const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n\n    this.state = {\n      retrievedOptions,\n      selectedOption: this.getMatchingOption(0, formData, retrievedOptions),\n    };\n  }\n\n  /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(prevProps: Readonly<FieldProps<T, S, F>>, prevState: Readonly<AnyOfFieldState>) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    let newState = this.state;\n    if (!deepEquals(prevProps.options, options)) {\n      const {\n        registry: { schemaUtils },\n      } = this.props;\n      // re-cache the retrieved options in state in case they have $refs to save doing it later\n      const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n      newState = { selectedOption, retrievedOptions };\n    }\n    if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {\n      const { retrievedOptions } = newState;\n      const matchingOption = this.getMatchingOption(selectedOption, formData, retrievedOptions);\n\n      if (prevState && matchingOption !== selectedOption) {\n        newState = { selectedOption: matchingOption, retrievedOptions };\n      }\n    }\n    if (newState !== this.state) {\n      this.setState(newState);\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T | undefined, options: S[]) {\n    const {\n      schema,\n      registry: { schemaUtils },\n    } = this.props;\n\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    const option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption, discriminator);\n    return option;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option - The new option value being selected\n   */\n  onOptionChange = (option?: string) => {\n    const { selectedOption, retrievedOptions } = this.state;\n    const { formData, onChange, registry } = this.props;\n    const { schemaUtils } = registry;\n    const intOption = option !== undefined ? parseInt(option, 10) : -1;\n    if (intOption === selectedOption) {\n      return;\n    }\n    const newOption = intOption >= 0 ? retrievedOptions[intOption] : undefined;\n    const oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : undefined;\n\n    let newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);\n    if (newFormData && newOption) {\n      // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n      // so that only the root objects themselves are created without adding undefined children properties\n      newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, 'excludeObjectChildren') as T;\n    }\n    onChange(newFormData, undefined, this.getFieldId());\n\n    this.setState({ selectedOption: intOption });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      disabled = false,\n      errorSchema = {},\n      formContext,\n      onBlur,\n      onFocus,\n      registry,\n      schema,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields, translateString, globalUiOptions, schemaUtils } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption, retrievedOptions } = this.state;\n    const {\n      widget = 'select',\n      placeholder,\n      autofocus,\n      autocomplete,\n      title = schema.title,\n      ...uiOptions\n    } = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T, S, F>({ type: 'number' }, widget, widgets);\n    const rawErrors = get(errorSchema, ERRORS_KEY, []);\n    const fieldErrorSchema = omit(errorSchema, [ERRORS_KEY]);\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n    const option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;\n    let optionSchema: S;\n\n    if (option) {\n      const { oneOf, anyOf, ...remaining } = schema;\n      // Merge in all the non-oneOf/anyOf properties and also skip the special ADDITIONAL_PROPERTY_FLAG property\n      unset(remaining, ADDITIONAL_PROPERTY_FLAG);\n      optionSchema = !isEmpty(remaining) ? (mergeSchemas(remaining, option) as S) : option;\n    }\n\n    const translateEnum: TranslatableString = title\n      ? TranslatableString.TitleOptionPrefix\n      : TranslatableString.OptionPrefix;\n    const translateParams = title ? [title] : [];\n    const enumOptions = retrievedOptions.map((opt: { title?: string }, index: number) => ({\n      label: opt.title || translateString(translateEnum, translateParams.concat(String(index + 1))),\n      value: index,\n    }));\n\n    return (\n      <div className='panel panel-default panel-body'>\n        <div className='form-group'>\n          <Widget\n            id={this.getFieldId()}\n            name={`${name}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`}\n            schema={{ type: 'number', default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            disabled={disabled || isEmpty(enumOptions)}\n            multiple={false}\n            rawErrors={rawErrors}\n            errorSchema={fieldErrorSchema}\n            value={selectedOption >= 0 ? selectedOption : undefined}\n            options={{ enumOptions, ...uiOptions }}\n            registry={registry}\n            formContext={formContext}\n            placeholder={placeholder}\n            autocomplete={autocomplete}\n            autofocus={autofocus}\n            label={title ?? name}\n            hideLabel={!displayLabel}\n          />\n        </div>\n        {option !== null && <_SchemaField {...this.props} schema={optionSchema!} />}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import { useState, useCallback } from 'react';\nimport { asNumber, FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>['value']) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === '.') {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === 'string' && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, ''))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === 'string' && typeof value === 'number') {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace('.', '\\\\.') + '\\\\.?0*$');\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import { Component } from 'react';\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n  ANY_OF_KEY,\n  ONE_OF_KEY,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = '' as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value } as unknown as T;\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData } as T;\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param [formData] - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData?: T) => {\n    const { uiSchema, registry } = this.props;\n    const { duplicateKeySuffixSeparator = '-' } = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (has(formData, newKey)) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema['type']) {\n    const {\n      registry: { translateString },\n    } = this.props;\n    switch (type) {\n      case 'array':\n        return [];\n      case 'boolean':\n        return false;\n      case 'null':\n        return null;\n      case 'number':\n        return 0;\n      case 'object':\n        return {};\n      case 'string':\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return translateString(TranslatableString.NewStringDefault);\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData } as T;\n\n    let type: RJSFSchema['type'] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      let apSchema = schema.additionalProperties;\n      if (REF_KEY in apSchema) {\n        const { schemaUtils } = registry;\n        apSchema = schemaUtils.retrieveSchema({ $ref: apSchema[REF_KEY] } as S, formData);\n        type = apSchema.type;\n      }\n      if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {\n        type = 'object';\n      }\n    }\n\n    const newKey = this.getAvailableKey('newKey', newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils, translateString, globalUiOptions } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = uiOptions.title ?? schema.title ?? name;\n    const description = uiOptions.description ?? schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className='config-error' style={{ color: 'red' }}>\n            <Markdown>\n              {translateString(TranslatableString.InvalidObjectField, [name || 'root', (err as Error).message])}\n            </Markdown>\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<'ObjectFieldTemplate', T, S, F>('ObjectFieldTemplate', registry, uiOptions);\n\n    const templateProps = {\n      // getDisplayLabel() always returns false for object types, so just check the `uiOptions.label`\n      title: uiOptions.label === false ? '' : title,\n      description: uiOptions.label === false ? undefined : description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [PROPERTIES_KEY, name, ADDITIONAL_PROPERTY_FLAG]);\n        const fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === 'hidden';\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(name, addedByAdditionalProperties)}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      errorSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import { useCallback, Component } from 'react';\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  deepEquals,\n  descriptionId,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  getSchemaType,\n  getTemplate,\n  getUiOptions,\n  ID_KEY,\n  IdSchema,\n  mergeObjects,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UI_OPTIONS_KEY,\n  UIOptionsType,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\nimport omit from 'lodash/omit';\nimport Markdown from 'markdown-to-jsx';\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: 'ArrayField',\n  boolean: 'BooleanField',\n  integer: 'NumberField',\n  number: 'NumberField',\n  object: 'ObjectField',\n  string: 'StringField',\n  null: 'NullField',\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields, translateString } = registry;\n  if (typeof field === 'function') {\n    return field;\n  }\n  if (typeof field === 'string' && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType) ? schemaType[0] : schemaType || '';\n\n  const schemaId = schema.$id;\n\n  let componentName = COMPONENT_TYPES[type];\n  if (schemaId && schemaId in fields) {\n    componentName = schemaId;\n  }\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T, S, F>(\n          'UnsupportedFieldTemplate',\n          registry,\n          uiOptions\n        );\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={translateString(TranslatableString.UnknownFieldType, [String(schema.type)])}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils, globalUiOptions } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const FieldTemplate = getTemplate<'FieldTemplate', T, S, F>('FieldTemplate', registry, uiOptions);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    uiOptions\n  );\n  const FieldHelpTemplate = getTemplate<'FieldHelpTemplate', T, S, F>('FieldHelpTemplate', registry, uiOptions);\n  const FieldErrorTemplate = getTemplate<'FieldErrorTemplate', T, S, F>('FieldErrorTemplate', registry, uiOptions);\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = useCallback(\n    (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(schema, uiOptions, idSchema, registry);\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(props.readonly || uiOptions.readonly || props.schema.readOnly || schema.readOnly);\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError = uiSchemaHideError === undefined ? props.hideError : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names or style to child components\n  const fieldUiSchema = omit(uiSchema, ['ui:classNames', 'classNames', 'ui:style']);\n  if (UI_OPTIONS_KEY in fieldUiSchema) {\n    fieldUiSchema[UI_OPTIONS_KEY] = omit(fieldUiSchema[UI_OPTIONS_KEY], ['classNames', 'style']);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description = uiOptions.description || props.schema.description || schema.description || '';\n\n  const richDescription = uiOptions.enableMarkdownInDescription ? <Markdown>{description}</Markdown> : description;\n\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === 'hidden';\n\n  const classNames = ['form-group', 'field', `field-${getSchemaType(schema)}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push('field-error has-error has-danger');\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  /*\n   * AnyOf/OneOf errors handled by child schema\n   */\n  const errorsComponent =\n    hideError || schema.anyOf || schema.oneOf ? undefined : (\n      <FieldErrorTemplate\n        errors={__errors}\n        errorSchema={errorSchema}\n        idSchema={idSchema}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, 'children'> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={descriptionId<T>(id)}\n        description={richDescription}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === 'string' ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(' ').trim(),\n    style: uiOptions.style,\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n  const isReplacingAnyOrOneOf = uiSchema?.['ui:field'] && uiSchema?.['ui:fieldReplacesAnyOrOneOf'] === true;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_AnyOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.anyOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n        {schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_OneOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.oneOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>\n> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils, globalUiOptions } = registry;\n  const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : undefined;\n  let defaultWidget = enumOptions ? 'select' : 'text';\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const { widget = defaultWidget, placeholder = '', title: uiTitle, ...options } = getUiOptions<T, S, F>(uiSchema);\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n  const label = uiTitle ?? title ?? name;\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      label={label}\n      hideLabel={!displayLabel}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from 'react';\nimport { FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import { Field, FormContextType, RegistryFieldsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport ArrayField from './ArrayField';\nimport BooleanField from './BooleanField';\nimport MultiSchemaField from './MultiSchemaField';\nimport NumberField from './NumberField';\nimport ObjectField from './ObjectField';\nimport SchemaField from './SchemaField';\nimport StringField from './StringField';\nimport NullField from './NullField';\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n","import {\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <DescriptionFieldTemplate\n      id={descriptionId<T>(idSchema)}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { CSSProperties } from 'react';\nimport { ArrayFieldTemplateItemType, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    hasCopy,\n    index,\n    onCopyIndexClick,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: 'bold',\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? 'col-xs-9' : 'col-xs-12'}>{children}</div>\n      {hasToolbar && (\n        <div className='col-xs-3 array-item-toolbox'>\n          <div\n            className='btn-group'\n            style={{\n              display: 'flex',\n              justifyContent: 'space-around',\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasCopy && (\n              <CopyButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onCopyIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<'ArrayFieldDescriptionTemplate', T, S, F>(\n    'ArrayFieldDescriptionTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldItemTemplate = getTemplate<'ArrayFieldItemTemplate', T, S, F>(\n    'ArrayFieldItemTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<'ArrayFieldTitleTemplate', T, S, F>(\n    'ArrayFieldTitleTemplate',\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className='row array-item-list'>\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className='array-item-add'\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  titleId,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>['TitleFieldTemplate'] = getTemplate<'TitleFieldTemplate', T, S, F>(\n    'TitleFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <TitleFieldTemplate\n      id={titleId<T>(idSchema)}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  BaseInputTemplateProps,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: BaseInputTemplateProps<T, S, F>) {\n  const {\n    id,\n    name, // remove this from ...rest\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    onChangeOverride,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    hideLabel, // remove this from ...rest\n    hideError, // remove this from ...rest\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log('No id for', props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === 'number' || inputProps.type === 'integer') {\n    inputValue = value || value === 0 ? value : '';\n  } else {\n    inputValue = value == null ? '' : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(({ target: { value } }: FocusEvent<HTMLInputElement>) => onBlur(id, value), [onBlur, id]);\n  const _onFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) => onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className='form-control'\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        onChange={onChangeOverride || _onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(schema.default && !schema.examples.includes(schema.default) ? ([schema.default] as string[]) : [])\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import { getSubmitButtonOptions, FormContextType, RJSFSchema, StrictRJSFSchema, SubmitButtonProps } from '@rjsf/utils';\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions<T, S, F>(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button type='submit' {...submitButtonProps} className={`btn btn-info ${submitButtonProps.className || ''}`}>\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nexport default function IconButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const { iconType = 'default', icon, className, uiSchema, registry, ...otherProps } = props;\n  return (\n    <button type='button' className={`btn btn-${iconType} ${className}`} {...otherProps}>\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function CopyButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.CopyButton)}\n      className='array-item-copy'\n      {...props}\n      icon='copy'\n    />\n  );\n}\n\nexport function MoveDownButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveDownButton)}\n      className='array-item-move-down'\n      {...props}\n      icon='arrow-down'\n    />\n  );\n}\n\nexport function MoveUpButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveUpButton)}\n      className='array-item-move-up'\n      {...props}\n      icon='arrow-up'\n    />\n  );\n}\n\nexport function RemoveButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.RemoveButton)}\n      className='array-item-remove'\n      {...props}\n      iconType='danger'\n      icon='remove'\n    />\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nimport IconButton from './IconButton';\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  className,\n  onClick,\n  disabled,\n  registry,\n}: IconButtonProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='row'>\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType='info'\n          icon='plus'\n          className='btn-add col-xs-12'\n          title={translateString(TranslatableString.AddButton)}\n          onClick={onClick}\n          disabled={disabled}\n          registry={registry}\n        />\n      </p>\n    </div>\n  );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport SubmitButton from './SubmitButton';\nimport AddButton from './AddButton';\nimport { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } from './IconButton';\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>['ButtonTemplates'] {\n  return {\n    SubmitButton,\n    AddButton,\n    CopyButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n","import { DescriptionFieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === 'string') {\n    return (\n      <p id={id} className='field-description'>\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className='field-description'>\n        {description}\n      </div>\n    );\n  }\n}\n","import {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  errors,\n  registry,\n}: ErrorListProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='panel panel-danger errors'>\n      <div className='panel-heading'>\n        <h3 className='panel-title'>{translateString(TranslatableString.ErrorsLabel)}</h3>\n      </div>\n      <ul className='list-group'>\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className='list-group-item text-danger'>\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","const REQUIRED_FIELD_SYMBOL = '*';\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className='control-label' htmlFor={id}>\n      {label}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from '@rjsf/utils';\n\nimport Label from './Label';\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const { id, label, children, errors, help, description, hidden, required, displayLabel, registry, uiSchema } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<'WrapIfAdditionalTemplate', T, S, F>(\n    'WrapIfAdditionalTemplate',\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className='hidden'>{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import { errorId, FieldErrorProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <div>\n      <ul id={id} className='error-detail bs-callout bs-callout-info'>\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className='text-danger' key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import { helpId, FieldHelpProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = helpId<T>(idSchema);\n  if (typeof help === 'string') {\n    return (\n      <p id={id} className='help-block'>\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className='help-block'>\n      {help}\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from '@rjsf/utils';\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<'TitleFieldTemplate', T, S, F>('TitleFieldTemplate', registry, options);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {title && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand<T, S, F>(schema, uiSchema, formData) && (\n        <AddButton\n          className='object-property-expand'\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import { FormContextType, TitleFieldProps, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nconst REQUIRED_FIELD_SYMBOL = '*';\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: TitleFieldProps<T, S, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TranslatableString, UnsupportedFieldProps } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: UnsupportedFieldProps<T, S, F>\n) {\n  const { schema, idSchema, reason, registry } = props;\n  const { translateString } = registry;\n  let translateEnum: TranslatableString = TranslatableString.UnsupportedField;\n  const translateParams: string[] = [];\n  if (idSchema && idSchema.$id) {\n    translateEnum = TranslatableString.UnsupportedFieldWithId;\n    translateParams.push(idSchema.$id);\n  }\n  if (reason) {\n    translateEnum =\n      translateEnum === TranslatableString.UnsupportedField\n        ? TranslatableString.UnsupportedFieldWithReason\n        : TranslatableString.UnsupportedFieldWithIdAndReason;\n    translateParams.push(reason);\n  }\n  return (\n    <div className='unsupported-field'>\n      <p>\n        <Markdown>{translateString(translateEnum, translateParams)}</Markdown>\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WrapIfAdditionalTemplateProps,\n} from '@rjsf/utils';\n\nimport Label from './FieldTemplate/Label';\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    style,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  const { templates, translateString } = registry;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = templates.ButtonTemplates;\n  const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames} style={style}>\n      <div className='row'>\n        <div className='col-xs-5 form-additional'>\n          <div className='form-group'>\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className='form-control'\n              type='text'\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className='form-additional form-group col-xs-5'>{children}</div>\n        <div className='col-xs-2'>\n          <RemoveButton\n            className='array-item-remove btn-block'\n            style={{ border: '0' }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n            registry={registry}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport ArrayFieldDescriptionTemplate from './ArrayFieldDescriptionTemplate';\nimport ArrayFieldItemTemplate from './ArrayFieldItemTemplate';\nimport ArrayFieldTemplate from './ArrayFieldTemplate';\nimport ArrayFieldTitleTemplate from './ArrayFieldTitleTemplate';\nimport BaseInputTemplate from './BaseInputTemplate';\nimport ButtonTemplates from './ButtonTemplates';\nimport DescriptionField from './DescriptionField';\nimport ErrorList from './ErrorList';\nimport FieldTemplate from './FieldTemplate';\nimport FieldErrorTemplate from './FieldErrorTemplate';\nimport FieldHelpTemplate from './FieldHelpTemplate';\nimport ObjectFieldTemplate from './ObjectFieldTemplate';\nimport TitleField from './TitleField';\nimport UnsupportedField from './UnsupportedField';\nimport WrapIfAdditionalTemplate from './WrapIfAdditionalTemplate';\n\nfunction templates<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(): TemplatesType<\n  T,\n  S,\n  F\n> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n","import { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react';\nimport {\n  ariaDescribedByIds,\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: 'year',\n      range: yearsRange,\n      value: year,\n    },\n    { type: 'month', range: [1, 12], value: month },\n    { type: 'day', range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: 'hour', range: [0, 23], value: hour },\n      { type: 'minute', range: [0, 59], value: minute },\n      { type: 'second', range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  WidgetProps<T, S, F>,\n  'value' | 'name' | 'disabled' | 'readonly' | 'autofocus' | 'registry' | 'onBlur' | 'onFocus'\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  name,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + '_' + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: 'integer' } as S}\n      id={id}\n      name={name}\n      className='form-control'\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=''\n      aria-describedby={ariaDescribedByIds<T>(rootId)}\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  name,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { translateString } = registry;\n  const [lastValue, setLastValue] = useState(value);\n  const [state, setState] = useReducer((state: DateObject, action: Partial<DateObject>) => {\n    return { ...state, ...action };\n  }, parseDateString(value, time));\n\n  useEffect(() => {\n    const stateValue = toDateString(state, time);\n    if (readyForChange(state) && stateValue !== value) {\n      // The user changed the date to a new valid data via the comboboxes, so call onChange\n      onChange(stateValue);\n    } else if (lastValue !== value) {\n      // We got a new value in the props\n      setLastValue(value);\n      setState(parseDateString(value, time));\n    }\n  }, [time, value, onChange, state, lastValue]);\n\n  const handleChange = useCallback((property: keyof DateObject, value: string) => {\n    setState({ [property]: value });\n  }, []);\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nextState = parseDateString(new Date().toJSON(), time);\n      onChange(toDateString(nextState, time));\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      onChange(undefined);\n    },\n    [disabled, readonly, onChange]\n  );\n\n  return (\n    <ul className='list-inline'>\n      {dateElementProps(state, time, options.yearsRange as [number, number] | undefined).map((elemProps, i) => (\n        <li className='list-inline-item' key={i}>\n          <DateElement\n            rootId={id}\n            name={name}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-info btn-now' onClick={handleSetNow}>\n            {translateString(TranslatableString.NowLabel)}\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-warning btn-clear' onClick={handleClear}>\n            {translateString(TranslatableString.ClearLabel)}\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  descriptionId,\n  getTemplate,\n  labelValue,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  hideLabel,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n  const description = options.description ?? schema.description;\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? 'disabled' : ''}`}>\n      {!hideLabel && !!description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(id)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          name={id}\n          checked={typeof value === 'undefined' ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n        {labelValue(<span>{label}</span>, hideLabel)}\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled, emptyValue },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n  return (\n    <div className='checkboxes' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = enumOptionsIsSelected<S>(option.value, checkboxesValues);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checked) {\n              onChange(enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions));\n            } else {\n              onChange(enumOptionsDeselectValue<S>(index, checkboxesValues, enumOptions));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type='checkbox'\n                id={optionId(id, index)}\n                name={id}\n                checked={checked}\n                value={String(index)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label key={index} className={`checkbox-inline ${disabledCls}`}>\n              {checkbox}\n            </label>\n          ) : (\n            <div key={index} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='color' {...props} disabled={disabled || readonly} />;\n}\n","import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value || undefined), [onChange]);\n\n  return <BaseInputTemplate type='date' {...props} onChange={handleChange} />;\n}\n","import {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return (\n    <BaseInputTemplate\n      type='datetime-local'\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='email' {...props} />;\n}\n","import { ChangeEvent, useCallback, useState } from 'react';\nimport {\n  dataURItoBlob,\n  FormContextType,\n  getTemplate,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(';base64', `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === 'string') {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FileInfoPreview<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  fileInfo,\n  registry,\n}: {\n  fileInfo: FileInfoType;\n  registry: Registry<T, S, F>;\n}) {\n  const { translateString } = registry;\n  const { dataURL, type, name } = fileInfo;\n  if (!dataURL) {\n    return null;\n  }\n\n  if (type.indexOf('image') !== -1) {\n    return <img src={dataURL} style={{ maxWidth: '100%' }} className='file-preview' />;\n  }\n\n  return (\n    <>\n      {' '}\n      <a download={`preview-${name}`} href={dataURL} className='file-download'>\n        {translateString(TranslatableString.PreviewLabel)}\n      </a>\n    </>\n  );\n}\n\nfunction FilesInfo<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  filesInfo,\n  registry,\n  preview,\n}: {\n  filesInfo: FileInfoType[];\n  registry: Registry<T, S, F>;\n  preview?: boolean;\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  const { translateString } = registry;\n  return (\n    <ul className='file-info'>\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <Markdown>{translateString(TranslatableString.FilesInfo, [name, type, String(size)])}</Markdown>\n            {preview && <FileInfoPreview<T, S, F> fileInfo={fileInfo} registry={registry} />}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]): FileInfoType[] {\n  return dataURLs\n    .filter((dataURL) => dataURL)\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        dataURL,\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, required, multiple, onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const [filesInfo, setFilesInfo] = useState<FileInfoType[]>(\n    Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value])\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      // Due to variances in themes, dealing with multiple files for the array case now happens one file at a time.\n      // This is because we don't pass `multiple` into the `BaseInputTemplate` anymore. Instead, we deal with the single\n      // file in each event and concatenate them together ourselves\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          setFilesInfo(filesInfo.concat(filesInfoEvent[0]));\n          onChange(value.concat(newValue[0]));\n        } else {\n          setFilesInfo(filesInfoEvent);\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, value, filesInfo, onChange]\n  );\n\n  return (\n    <div>\n      <BaseInputTemplate\n        {...props}\n        disabled={disabled || readonly}\n        type='file'\n        required={value ? false : required} // this turns off HTML required validation when a value exists\n        onChangeOverride={handleChange}\n        value=''\n        accept={options.accept ? String(options.accept) : undefined}\n      />\n      <FilesInfo<T, S, F> filesInfo={filesInfo} registry={registry} preview={options.filePreview} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  value,\n}: WidgetProps<T, S, F>) {\n  return <input type='hidden' id={id} name={id} value={typeof value === 'undefined' ? '' : value} />;\n}\n\nexport default HiddenWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='password' {...props} />;\n}\n","import { FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n\n  return (\n    <div className='field-radio-group' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = enumOptionsIsSelected<S>(option.value, value);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type='radio'\n                id={optionId(id, i)}\n                checked={checked}\n                name={id}\n                required={required}\n                value={String(i)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={i} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={i} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className='field-range-wrapper'>\n      <BaseInputTemplate type='range' {...props} />\n      <span className='range-view'>{value}</span>\n    </div>\n  );\n}\n","import { ChangeEvent, FocusEvent, SyntheticEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction getValue(event: SyntheticEvent<HTMLSelectElement>, multiple: boolean) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n  const emptyValue = multiple ? [] : '';\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(value, enumOptions, multiple);\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className='form-control'\n      value={typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {!multiple && schema.default === undefined && <option value=''>{placeholder}</option>}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n          return (\n            <option key={i} value={String(i)} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport { ariaDescribedByIds, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className='form-control'\n      value={value ? value : ''}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate {...props} />;\n}\n","import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TimeWidget` component uses the `BaseInputTemplate` changing the type to `time` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value ? `${value}:00` : undefined), [onChange]);\n\n  return <BaseInputTemplate type='time' {...props} onChange={handleChange} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='url' {...props} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='number' {...props} />;\n}\n","import { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport AltDateWidget from './AltDateWidget';\nimport AltDateTimeWidget from './AltDateTimeWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport CheckboxesWidget from './CheckboxesWidget';\nimport ColorWidget from './ColorWidget';\nimport DateWidget from './DateWidget';\nimport DateTimeWidget from './DateTimeWidget';\nimport EmailWidget from './EmailWidget';\nimport FileWidget from './FileWidget';\nimport HiddenWidget from './HiddenWidget';\nimport PasswordWidget from './PasswordWidget';\nimport RadioWidget from './RadioWidget';\nimport RangeWidget from './RangeWidget';\nimport SelectWidget from './SelectWidget';\nimport TextareaWidget from './TextareaWidget';\nimport TextWidget from './TextWidget';\nimport TimeWidget from './TimeWidget';\nimport URLWidget from './URLWidget';\nimport UpDownWidget from './UpDownWidget';\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    AltDateWidget,\n    AltDateTimeWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n    ColorWidget,\n    DateWidget,\n    DateTimeWidget,\n    EmailWidget,\n    FileWidget,\n    HiddenWidget,\n    PasswordWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    TextareaWidget,\n    TimeWidget,\n    UpDownWidget,\n    URLWidget,\n  };\n}\n\nexport default widgets;\n","import { englishStringTranslator, FormContextType, Registry, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport fields from './components/fields';\nimport templates from './components/templates';\nimport widgets from './components/widgets';\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, 'schemaUtils'> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n    translateString: englishStringTranslator,\n  };\n}\n","import { Component, ElementType, FormEvent, ReactNode, Ref, RefObject, createRef } from 'react';\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  SUBMIT_BTN_OPTIONS_KEY,\n  TemplatesType,\n  toErrorList,\n  UiSchema,\n  UI_GLOBAL_OPTIONS_KEY,\n  UI_OPTIONS_KEY,\n  ValidationData,\n  validationDataMerge,\n  ValidatorType,\n  Experimental_DefaultFormStateBehavior,\n} from '@rjsf/utils';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport _pick from 'lodash/pick';\nimport _toPath from 'lodash/toPath';\n\nimport getDefaultRegistry from '../getDefaultRegistry';\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S, F>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, 'ButtonTemplates'>> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>['ButtonTemplates']>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T, S, F>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation. By default, these are non-blocking errors, meaning that you can\n   * still submit the form when these are the only errors displayed to the user.\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, causes the `extraErrors` to become blocking when the form is submitted */\n  extraErrorsBlockSubmit?: boolean;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | 'top' | 'bottom';\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer<T, S, F>;\n  /** If set to true, then the first field with an error will receive the focus when the form is submitted with errors\n   */\n  focusOnFirstError?: boolean | ((error: RJSFValidationError) => void);\n  /** Optional string translation function, if provided, allows users to change the translation of the RJSF internal\n   * strings. Some strings contain replaceable parameter values as indicated by `%1`, `%2`, etc. The number after the\n   * `%` indicates the order of the parameter. The ordering of parameters is important because some languages may choose\n   * to put the second parameter before the first in its translation.\n   */\n  translateString?: Registry['translateString'];\n  /** Optional configuration object with flags, if provided, allows users to override default form state behavior\n   * Currently only affecting minItems on array fields and handling of setting defaults based on the value of\n   * `emptyObjectFields`\n   */\n  experimental_defaultFormStateBehavior?: Experimental_DefaultFormStateBehavior;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: ElementType;\n  /** Support receiving a React ref to the Form\n   */\n  ref?: Ref<Form<T, S, F>>;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData?: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  extends Omit<FormState<T, S, F>, 'schemaValidationErrors' | 'schemaValidationErrorSchema'> {\n  /** The status of the form when submitted */\n  status?: 'submitted';\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error('A validator is required for Form functionality to work');\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (this.props.onChange && !deepEquals(this.state.formData, this.props.formData)) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(props: FormProps<T, S, F>, inputFormData?: T): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = 'schema' in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> = ('uiSchema' in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== 'undefined';\n    const liveValidate = 'liveValidate' in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    const experimental_defaultFormStateBehavior =\n      'experimental_defaultFormStateBehavior' in props\n        ? props.experimental_defaultFormStateBehavior\n        : this.props.experimental_defaultFormStateBehavior;\n    let schemaUtils: SchemaUtilsType<T, S, F> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema, experimental_defaultFormStateBehavior)\n    ) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema, experimental_defaultFormStateBehavior);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(schema, inputFormData) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] = state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> = state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = validationDataMerge({ errorSchema, errors }, props.extraErrors);\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema['ui:rootFieldId'],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(nextProps: FormProps<T, S, F>, nextState: FormState<T, S, F>): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T | undefined,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S, F>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;\n    const { customValidate, transformErrors, uiSchema } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<'ErrorListTemplate', T, S, F>('ErrorListTemplate', registry, options);\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n          registry={registry}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T | undefined, fields: string[][]): T | undefined => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== 'object') {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(formData, fields as unknown as string[]);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param [formData] - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData?: T): string[][] => {\n    const getAllPaths = (_obj: GenericObjectType, acc: string[][] = [], paths: string[][] = [[]]) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === 'object') {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (_obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== '') {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== '') {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== 'object' || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const { extraErrors, omitExtraData, liveOmit, noValidate, liveValidate, onChange } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', formData);\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = validationDataMerge(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, 'preventDuplicates') as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: toErrorList(errorSchema),\n      };\n    }\n    this.setState(state as FormState<T, S, F>, () => onChange && onChange({ ...this.state, ...state }, id));\n  };\n\n  /**\n   * Callback function to handle reset form data.\n   * - Reset all fields with default values.\n   * - Reset validations and errors\n   *\n   */\n  reset = () => {\n    const { onChange } = this.props;\n    const newState = this.getStateFromProps(this.props, undefined);\n    const newFormData = newState.formData;\n    const state = {\n      formData: newFormData,\n      errorSchema: {},\n      errors: [] as unknown,\n      schemaValidationErrors: [] as unknown,\n      schemaValidationErrorSchema: {},\n    } as FormState<T, S, F>;\n\n    this.setState(state, () => onChange && onChange({ ...this.state, ...state }));\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally, it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', newFormData);\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors ? toErrorList(extraErrors) : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit({ ...this.state, formData: newFormData, status: 'submitted' }, event);\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { translateString: customTranslateString, uiSchema = {} } = this.props;\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext, translateString } = getDefaultRegistry<T, S, F>();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n      translateString: customTranslateString || translateString,\n      globalUiOptions: uiSchema[UI_GLOBAL_OPTIONS_KEY],\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent('submit', {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error\n   * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that\n   * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.\n   *\n   * @param error - The error on which to focus\n   */\n  focusOnError(error: RJSFValidationError) {\n    const { idPrefix = 'root', idSeparator = '_' } = this.props;\n    const { property } = error;\n    const path = _toPath(property);\n    if (path[0] === '') {\n      // Most of the time the `.foo` property results in the first element being empty, so replace it with the idPrefix\n      path[0] = idPrefix;\n    } else {\n      // Otherwise insert the idPrefix into the first location using unshift\n      path.unshift(idPrefix);\n    }\n\n    const elementId = path.join(idSeparator);\n    let field = this.formElement.current.elements[elementId];\n    if (!field) {\n      // if not an exact match, try finding an input starting with the element id (like radio buttons or checkboxes)\n      field = this.formElement.current.querySelector(`input[id^=${elementId}`);\n    }\n    if (field && field.length) {\n      // If we got a list with length > 0\n      field = field[0];\n    }\n    if (field) {\n      field.focus();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, extraErrorsBlockSubmit, focusOnFirstError, onError } = this.props;\n    const { formData } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0 || (extraErrors && extraErrorsBlockSubmit)) {\n      if (extraErrors) {\n        const merged = validationDataMerge(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      if (focusOnFirstError) {\n        if (typeof focusOnFirstError === 'function') {\n          focusOnFirstError(errors[0]);\n        } else {\n          this.focusOnError(errors[0]);\n        }\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error('Form validation failed', errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = '',\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = 'top',\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || 'form';\n\n    let { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions = {} } = getUiOptions<T, S, F>(uiSchema);\n    if (disabled) {\n      submitOptions = { ...submitOptions, props: { ...submitOptions.props, disabled: true } };\n    }\n    const submitUiSchema = { [UI_OPTIONS_KEY]: { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions } };\n\n    return (\n      <FormTag\n        className={className ? className : 'rjsf'}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === 'top' && this.renderErrors(registry)}\n        <_SchemaField\n          name=''\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n\n        {children ? children : <SubmitButton uiSchema={submitUiSchema} registry={registry} />}\n        {showErrorList === 'bottom' && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n","import { ComponentType, ForwardedRef, forwardRef } from 'react';\nimport Form, { FormProps } from './components/Form';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  FormProps<T, S, F>,\n  'fields' | 'templates' | 'widgets' | '_internalFormWrapper'\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  themeProps: ThemeProps<T, S, F>\n): ComponentType<FormProps<T, S, F>> {\n  return forwardRef(\n    ({ fields, widgets, templates, ...directProps }: FormProps<T, S, F>, ref: ForwardedRef<Form<T, S, F>>) => {\n      fields = { ...themeProps?.fields, ...fields };\n      widgets = { ...themeProps?.widgets, ...widgets };\n      templates = {\n        ...themeProps?.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","Component","constructor","props","_getNewFormDataRow","schema","registry","schemaUtils","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","_handleAddClick","onAddIndexClick","index","onCopyIndexClick","preventDefault","onChange","state","newKeyedFormDataRow","cloneDeep","newKeyedFormData","undefined","splice","push","setState","updatedKeyedFormData","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","reOrderArray","_newKeyedFormData","slice","onChangeForIndex","value","id","arrayData","newFormData","jsonValue","onSelectChange","idSchema","$id","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","itemTitle","translateString","get","ITEMS_KEY","TranslatableString","ArrayItemTitle","isItemRequired","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","globalUiOptions","maxItems","render","uiOptions","UnsupportedFieldTemplate","getTemplate","_jsx","reason","MissingItems","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","canAdd","arrayProps","itemCast","itemErrorSchema","itemIdPrefix","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","totalItems","className","Template","hideError","placeholder","widgets","widget","uiTitle","options","Widget","getWidget","label","displayLabel","getDisplayLabel","multiple","hideLabel","enumOptions","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","copyable","has","moveUp","moveDown","copy","remove","toolbar","Object","keys","some","children","hasCopy","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","yes","YesLabel","no","NoLabel","oneOf","option","const","o","schemaWithEnumNames","enums","enum","enumNames","every","v","AnyOfField","onOptionChange","selectedOption","retrievedOptions","intOption","newOption","oldOption","sanitizeDataForNewSchema","getFieldId","opt","getMatchingOption","componentDidUpdate","prevProps","newState","deepEquals","matchingOption","discriminator","getDiscriminatorFieldFromSchema","getClosestMatchingOption","_SchemaField","autocomplete","ERRORS_KEY","fieldErrorSchema","omit","optionSchema","anyOf","remaining","unset","ADDITIONAL_PROPERTY_FLAG","isEmpty","mergeSchemas","translateEnum","TitleOptionPrefix","OptionPrefix","translateParams","String","_jsxs","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","args","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","assign","handleAddClick","apSchema","REF_KEY","$ref","ANY_OF_KEY","ONE_OF_KEY","getDefaultValue","isRequired","indexOf","NewStringDefault","rawSchema","properties","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","Markdown","InvalidObjectField","message","JSON","stringify","templateProps","PROPERTIES_KEY","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","getFieldComponent","field","schemaType","getSchemaType","schemaId","componentName","UnknownFieldType","SchemaFieldRender","_schema","_idSchema","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","theId","FieldComponent","Boolean","readOnly","uiSchemaHideError","__errors","UI_OPTIONS_KEY","richDescription","enableMarkdownInDescription","help","classNames","console","warn","helpComponent","hasErrors","errorsComponent","errors","fieldProps","descriptionId","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","isReplacingAnyOrOneOf","_Fragment","isSelect","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","MultiSchemaField","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","CopyButton","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","titleId","BaseInputTemplate","onChangeOverride","rest","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","examplesId","ariaDescribedByIds","example","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","IconButton","iconType","icon","otherProps","buttonTemplates","DescriptionField","ErrorList","ErrorsLabel","error","stack","REQUIRED_FIELD_SYMBOL","Label","htmlFor","WrapIfAdditionalTemplate","errorId","elem","helpId","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","UnsupportedFieldWithId","UnsupportedFieldWithReason","UnsupportedFieldWithIdAndReason","keyLabel","KeyLabel","defaultValue","border","ErrorListTemplate","rangeOptions","start","stop","pad","readyForChange","values","dateElementProps","time","yearsRange","Date","getFullYear","year","month","day","hour","minute","second","data","range","DateElement","select","rootId","SelectWidget","AltDateWidget","useReducer","action","parseDateString","stateValue","toDateString","property","handleSetNow","nextState","toJSON","handleClear","elemProps","hideNowButton","href","NowLabel","hideClearButton","ClearLabel","AltDateTimeWidget","CheckboxWidget","schemaRequiresTrueValue","checked","handleBlur","handleFocus","labelValue","CheckboxesWidget","inline","enumDisabled","checkboxesValues","enumOptionsValueForIndex","enumOptionsIsSelected","itemDisabled","disabledCls","enumOptionsSelectValue","enumOptionsDeselectValue","checkbox","optionId","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","processFiles","files","all","from","FileInfoPreview","fileInfo","src","maxWidth","download","PreviewLabel","FilesInfo","filesInfo","preview","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","setFilesInfo","then","filesInfoEvent","newValue","accept","filePreview","HiddenWidget","PasswordWidget","RadioWidget","radio","RangeWidget","getValue","selected","optEmptyVal","selectedIndexes","enumOptionsIndexForValue","TextareaWidget","rows","defaultProps","TextWidget","TimeWidget","URLWidget","UpDownWidget","getDefaultRegistry","rootSchema","englishStringTranslator","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","validationDataMerge","toErrorList","reset","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","inputFormData","edit","experimental_defaultFormStateBehavior","doesSchemaUtilsDiffer","createSchemaUtils","getCurrentErrors","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","getValidator","validateFormData","renderErrors","getRegistry","_this$props$templates","customTranslateString","UI_GLOBAL_OPTIONS_KEY","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","focusOnError","_toPath","unshift","elementId","elements","querySelector","focus","extraErrorsBlockSubmit","focusOnFirstError","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","showErrorList","_internalFormWrapper","as","FormTag","SUBMIT_BTN_OPTIONS_KEY","submitOptions","submitUiSchema","encType","acceptCharset","ref","withTheme","themeProps","forwardRef","directProps","_themeProps$templates","_templates"],"mappings":";;;;;;;;;;;;;;;;;;;;EAqCA;EACA,SAASA,aAAaA,GAAA;IACpB,OAAOC,aAAM,EAAE,CAAA;EACjB,CAAA;EAEA;;;;EAIG;EACH,SAASC,qBAAqBA,CAAIC,QAAa,EAAA;EAC7C,EAAA,OAAO,CAACC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,GAC3B,EAAE,GACFA,QAAQ,CAACG,GAAG,CAAEC,IAAI,IAAI;MACpB,OAAO;QACLC,GAAG,EAAER,aAAa,EAAE;EACpBO,MAAAA,IAAAA;OACD,CAAA;EACH,GAAC,CAAC,CAAA;EACR,CAAA;EAEA;;;;EAIG;EACH,SAASE,oBAAoBA,CAAIC,aAA4D,EAAA;EAC3F,EAAA,IAAIN,KAAK,CAACC,OAAO,CAACK,aAAa,CAAC,EAAE;MAChC,OAAOA,aAAa,CAACJ,GAAG,CAAEK,SAAS,IAAKA,SAAS,CAACJ,IAAI,CAAC,CAAA;EACxD,GAAA;EACD,EAAA,OAAO,EAAE,CAAA;EACX,CAAA;EAEA;;EAEG;EACH,MAAMK,UAA8F,SAAQC,eAG3G,CAAA;EACC;;;EAGG;IACHC,WAAAA,CAAYC,KAA4B,EAAA;MACtC,KAAK,CAACA,KAAK,CAAC,CAAA;EA4Fd;;EAEG;MAFH,IAGAC,CAAAA,kBAAkB,GAAG,MAAQ;QAC3B,MAAM;UAAEC,MAAM;EAAEC,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAACH,KAAK,CAAA;QACvC,MAAM;EAAEI,QAAAA,WAAAA;EAAa,OAAA,GAAGD,QAAQ,CAAA;EAChC,MAAA,IAAIE,UAAU,GAAGH,MAAM,CAACI,KAAU,CAAA;QAClC,IAAIC,kBAAY,CAACL,MAAM,CAAC,IAAIM,0BAAoB,CAACN,MAAM,CAAC,EAAE;UACxDG,UAAU,GAAGH,MAAM,CAACO,eAAoB,CAAA;EACzC,OAAA;EACD;EACA,MAAA,OAAOL,WAAW,CAACM,mBAAmB,CAACL,UAAU,CAAiB,CAAA;OACnE,CAAA;EAmCD;;;;;EAKG;MALH,IAMAM,CAAAA,UAAU,GAAIC,KAAiB,IAAI;EACjC,MAAA,IAAI,CAACC,eAAe,CAACD,KAAK,CAAC,CAAA;OAC5B,CAAA;EAED;;;;;EAKG;MALH,IAMAE,CAAAA,eAAe,GAAIC,KAAa,IAAI;EAClC,MAAA,OAAQH,KAAiB,IAAI;EAC3B,QAAA,IAAI,CAACC,eAAe,CAACD,KAAK,EAAEG,KAAK,CAAC,CAAA;SACnC,CAAA;OACF,CAAA;EAED;;;;;EAKG;MALH,IAMAC,CAAAA,gBAAgB,GAAID,KAAa,IAAI;EACnC,MAAA,OAAQH,KAAiB,IAAI;EAC3B,QAAA,IAAIA,KAAK,EAAE;YACTA,KAAK,CAACK,cAAc,EAAE,CAAA;EACvB,SAAA;UAED,MAAM;EAAEC,UAAAA,QAAAA;WAAU,GAAG,IAAI,CAAClB,KAAK,CAAA;UAC/B,MAAM;EAAEL,UAAAA,aAAAA;WAAe,GAAG,IAAI,CAACwB,KAAK,CAAA;EACpC,QAAA,MAAMC,mBAAmB,GAAyB;YAChD3B,GAAG,EAAER,aAAa,EAAE;YACpBO,IAAI,EAAE6B,6BAAS,CAAC1B,aAAa,CAACoB,KAAK,CAAC,CAACvB,IAAI,CAAA;WAC1C,CAAA;EACD,QAAA,MAAM8B,gBAAgB,GAAG,CAAC,GAAG3B,aAAa,CAAC,CAAA;UAC3C,IAAIoB,KAAK,KAAKQ,SAAS,EAAE;YACvBD,gBAAgB,CAACE,MAAM,CAACT,KAAK,GAAG,CAAC,EAAE,CAAC,EAAEK,mBAAmB,CAAC,CAAA;EAC3D,SAAA,MAAM;EACLE,UAAAA,gBAAgB,CAACG,IAAI,CAACL,mBAAmB,CAAC,CAAA;EAC3C,SAAA;UACD,IAAI,CAACM,QAAQ,CACX;EACE/B,UAAAA,aAAa,EAAE2B,gBAAgB;EAC/BK,UAAAA,oBAAoB,EAAE,IAAA;WACvB,EACD,MAAMT,QAAQ,CAACxB,oBAAoB,CAAC4B,gBAAgB,CAAC,CAAC,CACvD,CAAA;SACF,CAAA;OACF,CAAA;EAED;;;;;EAKG;MALH,IAMAM,CAAAA,gBAAgB,GAAIb,KAAa,IAAI;EACnC,MAAA,OAAQH,KAAiB,IAAI;EAC3B,QAAA,IAAIA,KAAK,EAAE;YACTA,KAAK,CAACK,cAAc,EAAE,CAAA;EACvB,SAAA;UACD,MAAM;YAAEC,QAAQ;EAAEW,UAAAA,WAAAA;WAAa,GAAG,IAAI,CAAC7B,KAAK,CAAA;UAC5C,MAAM;EAAEL,UAAAA,aAAAA;WAAe,GAAG,IAAI,CAACwB,KAAK,CAAA;EACpC;EACA,QAAA,IAAIW,cAA8B,CAAA;EAClC,QAAA,IAAID,WAAW,EAAE;YACfC,cAAc,GAAG,EAAE,CAAA;EACnB,UAAA,KAAK,MAAMC,GAAG,IAAIF,WAAW,EAAE;EAC7B,YAAA,MAAMG,CAAC,GAAGC,QAAQ,CAACF,GAAG,CAAC,CAAA;cACvB,IAAIC,CAAC,GAAGjB,KAAK,EAAE;gBACbmB,uBAAG,CAACJ,cAAc,EAAE,CAACE,CAAC,CAAC,EAAEH,WAAW,CAACE,GAAG,CAAC,CAAC,CAAA;EAC3C,aAAA,MAAM,IAAIC,CAAC,GAAGjB,KAAK,EAAE;EACpBmB,cAAAA,uBAAG,CAACJ,cAAc,EAAE,CAACE,CAAC,GAAG,CAAC,CAAC,EAAEH,WAAW,CAACE,GAAG,CAAC,CAAC,CAAA;EAC/C,aAAA;EACF,WAAA;EACF,SAAA;EACD,QAAA,MAAMT,gBAAgB,GAAG3B,aAAa,CAACwC,MAAM,CAAC,CAACC,CAAC,EAAEJ,CAAC,KAAKA,CAAC,KAAKjB,KAAK,CAAC,CAAA;UACpE,IAAI,CAACW,QAAQ,CACX;EACE/B,UAAAA,aAAa,EAAE2B,gBAAgB;EAC/BK,UAAAA,oBAAoB,EAAE,IAAA;WACvB,EACD,MAAMT,QAAQ,CAACxB,oBAAoB,CAAC4B,gBAAgB,CAAC,EAAEQ,cAAkC,CAAC,CAC3F,CAAA;SACF,CAAA;OACF,CAAA;EAED;;;;;;EAMG;EANH,IAAA,IAAA,CAOAO,cAAc,GAAG,CAACtB,KAAa,EAAEuB,QAAgB,KAAI;EACnD,MAAA,OAAQ1B,KAAoC,IAAI;EAC9C,QAAA,IAAIA,KAAK,EAAE;YACTA,KAAK,CAACK,cAAc,EAAE,CAAA;EACtBL,UAAAA,KAAK,CAAC2B,aAAa,CAACC,IAAI,EAAE,CAAA;EAC3B,SAAA;UACD,MAAM;YAAEtB,QAAQ;EAAEW,UAAAA,WAAAA;WAAa,GAAG,IAAI,CAAC7B,KAAK,CAAA;EAC5C,QAAA,IAAI8B,cAA8B,CAAA;EAClC,QAAA,IAAID,WAAW,EAAE;YACfC,cAAc,GAAG,EAAE,CAAA;EACnB,UAAA,KAAK,MAAMC,GAAG,IAAIF,WAAW,EAAE;EAC7B,YAAA,MAAMG,CAAC,GAAGC,QAAQ,CAACF,GAAG,CAAC,CAAA;cACvB,IAAIC,CAAC,IAAIjB,KAAK,EAAE;gBACdmB,uBAAG,CAACJ,cAAc,EAAE,CAACQ,QAAQ,CAAC,EAAET,WAAW,CAACd,KAAK,CAAC,CAAC,CAAA;EACpD,aAAA,MAAM,IAAIiB,CAAC,IAAIM,QAAQ,EAAE;gBACxBJ,uBAAG,CAACJ,cAAc,EAAE,CAACf,KAAK,CAAC,EAAEc,WAAW,CAACS,QAAQ,CAAC,CAAC,CAAA;EACpD,aAAA,MAAM;gBACLJ,uBAAG,CAACJ,cAAc,EAAE,CAACC,GAAG,CAAC,EAAEF,WAAW,CAACG,CAAC,CAAC,CAAC,CAAA;EAC3C,aAAA;EACF,WAAA;EACF,SAAA;UAED,MAAM;EAAErC,UAAAA,aAAAA;WAAe,GAAG,IAAI,CAACwB,KAAK,CAAA;UACpC,SAASsB,YAAYA,GAAA;EACnB;EACA,UAAA,MAAMC,iBAAiB,GAAG/C,aAAa,CAACgD,KAAK,EAAE,CAAA;EAE/C;EACAD,UAAAA,iBAAiB,CAAClB,MAAM,CAACT,KAAK,EAAE,CAAC,CAAC,CAAA;YAClC2B,iBAAiB,CAAClB,MAAM,CAACc,QAAQ,EAAE,CAAC,EAAE3C,aAAa,CAACoB,KAAK,CAAC,CAAC,CAAA;EAE3D,UAAA,OAAO2B,iBAAiB,CAAA;EAC1B,SAAA;EACA,QAAA,MAAMpB,gBAAgB,GAAGmB,YAAY,EAAE,CAAA;UACvC,IAAI,CAACf,QAAQ,CACX;EACE/B,UAAAA,aAAa,EAAE2B,gBAAAA;WAChB,EACD,MAAMJ,QAAQ,CAACxB,oBAAoB,CAAC4B,gBAAgB,CAAC,EAAEQ,cAAkC,CAAC,CAC3F,CAAA;SACF,CAAA;OACF,CAAA;EAED;;;;EAIG;MAJH,IAKAc,CAAAA,gBAAgB,GAAI7B,KAAa,IAAI;EACnC,MAAA,OAAO,CAAC8B,KAAU,EAAEf,cAA+B,EAAEgB,EAAW,KAAI;UAClE,MAAM;YAAE1D,QAAQ;YAAE8B,QAAQ;EAAEW,UAAAA,WAAAA;WAAa,GAAG,IAAI,CAAC7B,KAAK,CAAA;UACtD,MAAM+C,SAAS,GAAG1D,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,GAAGA,QAAQ,GAAG,EAAE,CAAA;UACzD,MAAM4D,WAAW,GAAGD,SAAS,CAACxD,GAAG,CAAC,CAACC,IAAO,EAAEwC,CAAS,KAAI;EACvD;EACA;YACA,MAAMiB,SAAS,GAAG,OAAOJ,KAAK,KAAK,WAAW,GAAG,IAAI,GAAGA,KAAK,CAAA;EAC7D,UAAA,OAAO9B,KAAK,KAAKiB,CAAC,GAAGiB,SAAS,GAAGzD,IAAI,CAAA;EACvC,SAAC,CAAC,CAAA;EACF0B,QAAAA,QAAQ,CACN8B,WAAW,EACXnB,WAAW,IACTA,WAAW,IAAI;EACb,UAAA,GAAGA,WAAW;EACd,UAAA,CAACd,KAAK,GAAGe,cAAAA;WACV,EACHgB,EAAE,CACH,CAAA;SACF,CAAA;OACF,CAAA;EAED;MAAA,IACAI,CAAAA,cAAc,GAAIL,KAAU,IAAI;QAC9B,MAAM;UAAE3B,QAAQ;EAAEiC,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAACnD,KAAK,CAAA;QACzCkB,QAAQ,CAAC2B,KAAK,EAAEtB,SAAS,EAAE4B,QAAQ,IAAIA,QAAQ,CAACC,GAAG,CAAC,CAAA;OACrD,CAAA;MAxTC,MAAM;QAAEhE,QAAQ,EAARA,SAAQ,GAAG,EAAA;EAAI,KAAA,GAAGY,KAAK,CAAA;EAC/B,IAAA,MAAML,cAAa,GAAGR,qBAAqB,CAAIC,SAAQ,CAAC,CAAA;MACxD,IAAI,CAAC+B,KAAK,GAAG;EACXxB,MAAAA,aAAa,EAAbA,cAAa;EACbgC,MAAAA,oBAAoB,EAAE,KAAA;OACvB,CAAA;EACH,GAAA;EAEA;;;;;EAKG;EACH,EAAA,OAAO0B,wBAAwBA,CAC7BC,SAA0C,EAC1CC,SAAuC,EAAA;EAEvC;MACA,IAAIA,SAAS,CAAC5B,oBAAoB,EAAE;QAClC,OAAO;EACLA,QAAAA,oBAAoB,EAAE,KAAA;SACvB,CAAA;EACF,KAAA;EACD,IAAA,MAAM6B,YAAY,GAAGnE,KAAK,CAACC,OAAO,CAACgE,SAAS,CAAClE,QAAQ,CAAC,GAAGkE,SAAS,CAAClE,QAAQ,GAAG,EAAE,CAAA;EAChF,IAAA,MAAMqE,qBAAqB,GAAGF,SAAS,CAAC5D,aAAa,IAAI,EAAE,CAAA;EAC3D,IAAA,MAAM2B,gBAAgB,GACpBkC,YAAY,CAACE,MAAM,KAAKD,qBAAqB,CAACC,MAAM,GAChDD,qBAAqB,CAAClE,GAAG,CAAC,CAACoE,sBAAsB,EAAE5C,KAAK,KAAI;QAC1D,OAAO;UACLtB,GAAG,EAAEkE,sBAAsB,CAAClE,GAAG;UAC/BD,IAAI,EAAEgE,YAAY,CAACzC,KAAK,CAAA;SACzB,CAAA;EACH,KAAC,CAAC,GACF5B,qBAAqB,CAAIqE,YAAY,CAAC,CAAA;MAC5C,OAAO;EACL7D,MAAAA,aAAa,EAAE2B,gBAAAA;OAChB,CAAA;EACH,GAAA;EAEA;;EAEG;IACH,IAAIsC,SAASA,GAAA;MACX,MAAM;QAAE1D,MAAM;EAAEC,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAACH,KAAK,CAAA;MACvC,MAAM;EAAE6D,MAAAA,eAAAA;EAAiB,KAAA,GAAG1D,QAAQ,CAAA;MACpC,OAAO2D,uBAAG,CACR5D,MAAM,EACN,CAAC6D,eAAS,EAAE,OAAO,CAAC,EACpBD,uBAAG,CAAC5D,MAAM,EAAE,CAAC6D,eAAS,EAAE,aAAa,CAAC,EAAEF,eAAe,CAACG,wBAAkB,CAACC,cAAc,CAAC,CAAC,CAC5F,CAAA;EACH,GAAA;EAEA;;;;;EAKG;IACHC,cAAcA,CAAC7D,UAAa,EAAA;MAC1B,IAAIhB,KAAK,CAACC,OAAO,CAACe,UAAU,CAAC8D,IAAI,CAAC,EAAE;EAClC;EACA;QACA,OAAO,CAAC9D,UAAU,CAAC8D,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,CAAA;EACzC,KAAA;EACD;EACA,IAAA,OAAO/D,UAAU,CAAC8D,IAAI,KAAK,MAAM,CAAA;EACnC,GAAA;EAEA;;;;;;EAMG;IACHE,UAAUA,CAACC,SAAgB,EAAA;MACzB,MAAM;QAAEpE,MAAM;QAAEqE,QAAQ;EAAEpE,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAACH,KAAK,CAAA;MACjD,IAAI;EAAEwE,MAAAA,OAAAA;OAAS,GAAGC,kBAAY,CAAYF,QAAQ,EAAEpE,QAAQ,CAACuE,eAAe,CAAC,CAAA;MAC7E,IAAIF,OAAO,KAAK,KAAK,EAAE;EACrB;EACA;EACA,MAAA,IAAItE,MAAM,CAACyE,QAAQ,KAAKpD,SAAS,EAAE;EACjCiD,QAAAA,OAAO,GAAGF,SAAS,CAACZ,MAAM,GAAGxD,MAAM,CAACyE,QAAQ,CAAA;EAC7C,OAAA,MAAM;EACLH,QAAAA,OAAO,GAAG,IAAI,CAAA;EACf,OAAA;EACF,KAAA;EACD,IAAA,OAAOA,OAAO,CAAA;EAChB,GAAA;EAgBA;;;;;;EAMG;EACH3D,EAAAA,eAAeA,CAACD,KAAiB,EAAEG,KAAc,EAAA;EAC/C,IAAA,IAAIH,KAAK,EAAE;QACTA,KAAK,CAACK,cAAc,EAAE,CAAA;EACvB,KAAA;MAED,MAAM;EAAEC,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAAClB,KAAK,CAAA;MAC/B,MAAM;EAAEL,MAAAA,aAAAA;OAAe,GAAG,IAAI,CAACwB,KAAK,CAAA;EACpC,IAAA,MAAMC,mBAAmB,GAAyB;QAChD3B,GAAG,EAAER,aAAa,EAAE;EACpBO,MAAAA,IAAI,EAAE,IAAI,CAACS,kBAAkB,EAAE;OAChC,CAAA;EACD,IAAA,MAAMqB,gBAAgB,GAAG,CAAC,GAAG3B,aAAa,CAAC,CAAA;MAC3C,IAAIoB,KAAK,KAAKQ,SAAS,EAAE;QACvBD,gBAAgB,CAACE,MAAM,CAACT,KAAK,EAAE,CAAC,EAAEK,mBAAmB,CAAC,CAAA;EACvD,KAAA,MAAM;EACLE,MAAAA,gBAAgB,CAACG,IAAI,CAACL,mBAAmB,CAAC,CAAA;EAC3C,KAAA;MACD,IAAI,CAACM,QAAQ,CACX;EACE/B,MAAAA,aAAa,EAAE2B,gBAAgB;EAC/BK,MAAAA,oBAAoB,EAAE,IAAA;OACvB,EACD,MAAMT,QAAQ,CAACxB,oBAAoB,CAAC4B,gBAAgB,CAAC,CAAC,CACvD,CAAA;EACH,GAAA;EAkLA;EACG;EACHsD,EAAAA,MAAMA,GAAA;MACJ,MAAM;QAAE1E,MAAM;QAAEqE,QAAQ;QAAEpB,QAAQ;EAAEhD,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAACH,KAAK,CAAA;MAC3D,MAAM;QAAEI,WAAW;EAAEyD,MAAAA,eAAAA;EAAiB,KAAA,GAAG1D,QAAQ,CAAA;EACjD,IAAA,IAAI,EAAE4D,eAAS,IAAI7D,MAAM,CAAC,EAAE;EAC1B,MAAA,MAAM2E,SAAS,GAAGJ,kBAAY,CAAYF,QAAQ,CAAC,CAAA;QACnD,MAAMO,wBAAwB,GAAGC,iBAAW,CAC1C,0BAA0B,EAC1B5E,QAAQ,EACR0E,SAAS,CACV,CAAA;QAED,OACEG,cAAC,CAAAF,wBAAwB,EACvB;EAAA5E,QAAAA,MAAM,EAAEA,MAAM;EACdiD,QAAAA,QAAQ,EAAEA,QAAQ;EAClB8B,QAAAA,MAAM,EAAEpB,eAAe,CAACG,wBAAkB,CAACkB,YAAY,CAAC;EACxD/E,QAAAA,QAAQ,EAAEA,QAAAA;EACV,OAAA,CAAA,CAAA;EAEL,KAAA;EACD,IAAA,IAAIC,WAAW,CAAC+E,aAAa,CAACjF,MAAM,CAAC,EAAE;EACrC;EACA,MAAA,OAAO,IAAI,CAACkF,iBAAiB,EAAE,CAAA;EAChC,KAAA;EACD,IAAA,IAAIC,oBAAc,CAAYd,QAAQ,CAAC,EAAE;EACvC,MAAA,OAAO,IAAI,CAACe,kBAAkB,EAAE,CAAA;EACjC,KAAA;EACD,IAAA,IAAI/E,kBAAY,CAACL,MAAM,CAAC,EAAE;EACxB,MAAA,OAAO,IAAI,CAACqF,gBAAgB,EAAE,CAAA;EAC/B,KAAA;MACD,IAAInF,WAAW,CAACoF,YAAY,CAACtF,MAAM,EAAEqE,QAAQ,CAAC,EAAE;EAC9C,MAAA,OAAO,IAAI,CAACkB,WAAW,EAAE,CAAA;EAC1B,KAAA;EACD,IAAA,OAAO,IAAI,CAACC,iBAAiB,EAAE,CAAA;EACjC,GAAA;EAEA;EACG;EACHA,EAAAA,iBAAiBA,GAAA;MACf,MAAM;QACJxF,MAAM;QACNqE,QAAQ,GAAG,EAAE;QACb1C,WAAW;QACXsB,QAAQ;QACRwC,IAAI;EACJC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,SAAS,GAAG,KAAK;EACjBC,MAAAA,QAAQ,GAAG,KAAK;QAChB5F,QAAQ;QACR6F,MAAM;QACNC,OAAO;QACPC,QAAQ;EACRC,MAAAA,WAAW,GAAG,GAAG;EACjBC,MAAAA,SAAAA;OACD,GAAG,IAAI,CAACpG,KAAK,CAAA;MACd,MAAM;EAAEL,MAAAA,aAAAA;OAAe,GAAG,IAAI,CAACwB,KAAK,CAAA;EACpC,IAAA,MAAMkF,KAAK,GAAGnG,MAAM,CAACmG,KAAK,KAAK9E,SAAS,GAAGoE,IAAI,GAAGzF,MAAM,CAACmG,KAAK,CAAA;MAC9D,MAAM;QAAEjG,WAAW;EAAEkG,MAAAA,WAAAA;EAAa,KAAA,GAAGnG,QAAQ,CAAA;EAC7C,IAAA,MAAM0E,SAAS,GAAGJ,kBAAY,CAAYF,QAAQ,CAAC,CAAA;EACnD,IAAA,MAAMgC,YAAY,GAAMC,4BAAQ,CAACtG,MAAM,CAACI,KAAK,CAAC,GAAIJ,MAAM,CAACI,KAAW,GAAI,EAAQ,CAAA;EAChF,IAAA,MAAMmG,WAAW,GAAMrG,WAAW,CAACsG,cAAc,CAACH,YAAY,CAAC,CAAA;MAC/D,MAAMnH,QAAQ,GAAGM,oBAAoB,CAAC,IAAI,CAACyB,KAAK,CAACxB,aAAa,CAAC,CAAA;EAC/D,IAAA,MAAMgH,MAAM,GAAG,IAAI,CAACtC,UAAU,CAACjF,QAAQ,CAAC,CAAA;EACxC,IAAA,MAAMwH,UAAU,GAAuC;QACrDD,MAAM;QACNrG,KAAK,EAAEX,aAAa,CAACJ,GAAG,CAAC,CAACK,SAAS,EAAEmB,KAAK,KAAI;UAC5C,MAAM;YAAEtB,GAAG;EAAED,UAAAA,IAAAA;EAAM,SAAA,GAAGI,SAAS,CAAA;EAC/B;UACA,MAAMiH,QAAQ,GAAGrH,IAAsB,CAAA;UACvC,MAAMa,UAAU,GAAGD,WAAW,CAACsG,cAAc,CAACH,YAAY,EAAEM,QAAQ,CAAC,CAAA;UACrE,MAAMC,eAAe,GAAGjF,WAAW,GAAIA,WAAW,CAACd,KAAK,CAAsB,GAAGQ,SAAS,CAAA;UAC1F,MAAMwF,YAAY,GAAG5D,QAAQ,CAACC,GAAG,GAAG+C,WAAW,GAAGpF,KAAK,CAAA;EACvD,QAAA,MAAMiG,YAAY,GAAG5G,WAAW,CAAC6G,UAAU,CAAC5G,UAAU,EAAE0G,YAAY,EAAEF,QAAQ,EAAEX,QAAQ,EAAEC,WAAW,CAAC,CAAA;UACtG,OAAO,IAAI,CAACe,oBAAoB,CAAC;YAC/BzH,GAAG;YACHsB,KAAK;EACL4E,UAAAA,IAAI,EAAEA,IAAI,OAAOA,IAAI,CAAA,CAAA,EAAI5E,KAAO,CAAA,CAAA;YAChC4F,MAAM;YACNQ,SAAS,EAAEpG,KAAK,GAAG,CAAC;EACpBqG,UAAAA,WAAW,EAAErG,KAAK,GAAG3B,QAAQ,CAACsE,MAAM,GAAG,CAAC;YACxCrD,UAAU;YACV2G,YAAY;YACZF,eAAe;EACfO,UAAAA,QAAQ,EAAER,QAAQ;YAClBS,YAAY,EAAE/C,QAAQ,CAACjE,KAAK;EAC5BwF,UAAAA,SAAS,EAAEA,SAAS,IAAI/E,KAAK,KAAK,CAAC;YACnCiF,MAAM;YACNC,OAAO;YACPG,SAAS;YACTmB,UAAU,EAAE5H,aAAa,CAAC+D,MAAAA;EAC3B,SAAA,CAAC,CAAA;EACJ,OAAC,CAAC;EACF8D,MAAAA,SAAS,EAAE,CAAA,iCAAA,EAAoCf,WAAW,CAACtC,IAAM,CAAA,CAAA;QACjEyB,QAAQ;QACRzC,QAAQ;QACRoB,QAAQ;QACR5D,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BkF,QAAQ;QACRE,QAAQ;QACR7F,MAAM;QACNmG,KAAK;QACLC,WAAW;QACXlH,QAAQ;QACRgH,SAAS;EACTjG,MAAAA,QAAAA;OACD,CAAA;MAED,MAAMsH,QAAQ,GAAG1C,iBAAW,CAAkC,oBAAoB,EAAE5E,QAAQ,EAAE0E,SAAS,CAAC,CAAA;MACxG,OAAOG,cAAC,CAAAyC,QAAQ,EAAK;QAAA,GAAAb,UAAAA;QAAc,CAAA;EACrC,GAAA;EAEA;EACG;EACHtB,EAAAA,kBAAkBA,GAAA;MAChB,MAAM;QACJpF,MAAM;QACNiD,QAAQ;QACRoB,QAAQ;EACRqB,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,SAAS,GAAG,KAAK;EACjBC,MAAAA,QAAQ,GAAG,KAAK;QAChB2B,SAAS;QACTC,WAAW;QACX3B,MAAM;QACNC,OAAO;QACP7G,QAAQ,EAAEkB,KAAK,GAAG,EAAE;QACpBH,QAAQ;QACRiG,SAAS;EACTT,MAAAA,IAAAA;OACD,GAAG,IAAI,CAAC3F,KAAK,CAAA;MACd,MAAM;QAAE4H,OAAO;QAAEtB,WAAW;QAAE5B,eAAe;EAAEtE,MAAAA,WAAAA;EAAW,KAAE,GAAGD,QAAQ,CAAA;MACvE,MAAM;QAAE0H,MAAM;EAAExB,MAAAA,KAAK,EAAEyB,OAAO;QAAE,GAAGC,OAAAA;EAAO,KAAE,GAAGtD,kBAAY,CAAYF,QAAQ,EAAEG,eAAe,CAAC,CAAA;MACjG,MAAMsD,MAAM,GAAGC,eAAS,CAAY/H,MAAM,EAAE2H,MAAM,EAAED,OAAO,CAAC,CAAA;MAC5D,MAAMM,KAAK,GAAGJ,OAAO,IAAI5H,MAAM,CAACmG,KAAK,IAAIV,IAAI,CAAA;MAC7C,MAAMwC,YAAY,GAAG/H,WAAW,CAACgI,eAAe,CAAClI,MAAM,EAAEqE,QAAQ,EAAEG,eAAe,CAAC,CAAA;MACnF,OACEM,eAACgD,MAAM,EAAA;QACLlF,EAAE,EAAEK,QAAQ,CAACC,GAAG;EAChBuC,MAAAA,IAAI,EAAEA,IAAI;EACV0C,MAAAA,QAAQ,EAAA,IAAA;QACRnH,QAAQ,EAAE,IAAI,CAACgC,cAAc;EAC7B8C,MAAAA,MAAM,EAAEA,MAAM;EACdC,MAAAA,OAAO,EAAEA,OAAO;EAChB8B,MAAAA,OAAO,EAAEA,OAAO;EAChB7H,MAAAA,MAAM,EAAEA,MAAM;EACdqE,MAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,MAAAA,QAAQ,EAAEA,QAAQ;EAClB0C,MAAAA,KAAK,EAAEvC,KAAK;EACZsF,MAAAA,QAAQ,EAAEA,QAAQ;EAClBC,MAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,MAAAA,SAAS,EAAEA,SAAS;EACpB3B,MAAAA,QAAQ,EAAEA,QAAQ;EAClBmC,MAAAA,KAAK,EAAEA,KAAK;QACZI,SAAS,EAAE,CAACH,YAAY;EACxBR,MAAAA,WAAW,EAAEA,WAAW;EACxBrB,MAAAA,WAAW,EAAEA,WAAW;EACxBR,MAAAA,SAAS,EAAEA,SAAS;EACpBM,MAAAA,SAAS,EAAEA,SAAAA;EAAS,KAAA,CACpB,CAAA;EAEN,GAAA;EAEA;EACG;EACHhB,EAAAA,iBAAiBA,GAAA;MACf,MAAM;QACJlF,MAAM;QACNiD,QAAQ;QACRoB,QAAQ;QACRnF,QAAQ,EAAEkB,KAAK,GAAG,EAAE;EACpBsF,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,SAAS,GAAG,KAAK;EACjBC,MAAAA,QAAQ,GAAG,KAAK;QAChB4B,WAAW;QACX3B,MAAM;QACNC,OAAO;QACP9F,QAAQ;QACRiG,SAAS;EACTT,MAAAA,IAAAA;OACD,GAAG,IAAI,CAAC3F,KAAK,CAAA;MACd,MAAM;QAAE4H,OAAO;QAAExH,WAAW;QAAEkG,WAAW;EAAE5B,MAAAA,eAAAA;EAAe,KAAE,GAAGvE,QAAQ,CAAA;MACvE,MAAMsG,WAAW,GAAGrG,WAAW,CAACsG,cAAc,CAACxG,MAAM,CAACI,KAAU,EAAEA,KAAK,CAAC,CAAA;EACxE,IAAA,MAAMiI,WAAW,GAAGC,iBAAW,CAAC/B,WAAW,CAAC,CAAA;MAC5C,MAAM;EAAEoB,MAAAA,MAAM,GAAG,QAAQ;EAAExB,MAAAA,KAAK,EAAEyB,OAAO;QAAE,GAAGC,OAAAA;EAAO,KAAE,GAAGtD,kBAAY,CAAYF,QAAQ,EAAEG,eAAe,CAAC,CAAA;MAC5G,MAAMsD,MAAM,GAAGC,eAAS,CAAY/H,MAAM,EAAE2H,MAAM,EAAED,OAAO,CAAC,CAAA;MAC5D,MAAMM,KAAK,GAAGJ,OAAO,IAAI5H,MAAM,CAACmG,KAAK,IAAIV,IAAI,CAAA;MAC7C,MAAMwC,YAAY,GAAG/H,WAAW,CAACgI,eAAe,CAAClI,MAAM,EAAEqE,QAAQ,EAAEG,eAAe,CAAC,CAAA;MACnF,OACEM,eAACgD,MAAM,EAAA;QACLlF,EAAE,EAAEK,QAAQ,CAACC,GAAG;EAChBuC,MAAAA,IAAI,EAAEA,IAAI;EACV0C,MAAAA,QAAQ,EAAA,IAAA;QACRnH,QAAQ,EAAE,IAAI,CAACgC,cAAc;EAC7B8C,MAAAA,MAAM,EAAEA,MAAM;EACdC,MAAAA,OAAO,EAAEA,OAAO;EAChB8B,MAAAA,OAAO,EAAE;EAAE,QAAA,GAAGA,OAAO;EAAEQ,QAAAA,WAAAA;SAAa;EACpCrI,MAAAA,MAAM,EAAEA,MAAM;EACdqE,MAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,MAAAA,QAAQ,EAAEA,QAAQ;EAClB0C,MAAAA,KAAK,EAAEvC,KAAK;EACZsF,MAAAA,QAAQ,EAAEA,QAAQ;EAClBC,MAAAA,QAAQ,EAAEA,QAAQ;EAClBE,MAAAA,QAAQ,EAAEA,QAAQ;EAClBmC,MAAAA,KAAK,EAAEA,KAAK;QACZI,SAAS,EAAE,CAACH,YAAY;EACxBR,MAAAA,WAAW,EAAEA,WAAW;EACxBrB,MAAAA,WAAW,EAAEA,WAAW;EACxBR,MAAAA,SAAS,EAAEA,SAAS;EACpBM,MAAAA,SAAS,EAAEA,SAAAA;EACX,KAAA,CAAA,CAAA;EAEN,GAAA;EAEA;EACG;EACHX,EAAAA,WAAWA,GAAA;MACT,MAAM;QACJvF,MAAM;QACNqE,QAAQ;QACRpB,QAAQ;QACRwC,IAAI;EACJC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,SAAS,GAAG,KAAK;EACjBC,MAAAA,QAAQ,GAAG,KAAK;QAChBC,MAAM;QACNC,OAAO;QACP9F,QAAQ;QACRf,QAAQ,EAAEkB,KAAK,GAAG,EAAE;EACpB8F,MAAAA,SAAAA;OACD,GAAG,IAAI,CAACpG,KAAK,CAAA;MACd,MAAM;QAAE4H,OAAO;QAAEtB,WAAW;QAAE5B,eAAe;EAAEtE,MAAAA,WAAAA;EAAW,KAAE,GAAGD,QAAQ,CAAA;MACvE,MAAM;EAAE0H,MAAAA,MAAM,GAAG,OAAO;EAAExB,MAAAA,KAAK,EAAEyB,OAAO;QAAE,GAAGC,OAAAA;EAAO,KAAE,GAAGtD,kBAAY,CAAYF,QAAQ,EAAEG,eAAe,CAAC,CAAA;MAC3G,MAAMsD,MAAM,GAAGC,eAAS,CAAY/H,MAAM,EAAE2H,MAAM,EAAED,OAAO,CAAC,CAAA;MAC5D,MAAMM,KAAK,GAAGJ,OAAO,IAAI5H,MAAM,CAACmG,KAAK,IAAIV,IAAI,CAAA;MAC7C,MAAMwC,YAAY,GAAG/H,WAAW,CAACgI,eAAe,CAAClI,MAAM,EAAEqE,QAAQ,EAAEG,eAAe,CAAC,CAAA;MACnF,OACEM,cAAC,CAAAgD,MAAM;EACLD,MAAAA,OAAO,EAAEA,OAAO;QAChBjF,EAAE,EAAEK,QAAQ,CAACC,GAAG;EAChBuC,MAAAA,IAAI,EAAEA,IAAI;EACV0C,MAAAA,QAAQ,EAAA,IAAA;QACRnH,QAAQ,EAAE,IAAI,CAACgC,cAAc;EAC7B8C,MAAAA,MAAM,EAAEA,MAAM;EACdC,MAAAA,OAAO,EAAEA,OAAO;EAChB/F,MAAAA,MAAM,EAAEA,MAAM;EACdqE,MAAAA,QAAQ,EAAEA,QAAQ;EAClB1B,MAAAA,KAAK,EAAEvC,KAAK;EACZsF,MAAAA,QAAQ,EAAEA,QAAQ;EAClBC,MAAAA,QAAQ,EAAEA,QAAQ;EAClBE,MAAAA,QAAQ,EAAEA,QAAQ;EAClB5F,MAAAA,QAAQ,EAAEA,QAAQ;EAClBmG,MAAAA,WAAW,EAAEA,WAAW;EACxBR,MAAAA,SAAS,EAAEA,SAAS;EACpBM,MAAAA,SAAS,EAAEA,SAAS;EACpB8B,MAAAA,KAAK,EAAEA,KAAK;EACZI,MAAAA,SAAS,EAAE,CAACH,YAAAA;EAAY,KAAA,CACxB,CAAA;EAEN,GAAA;EAEA;EACG;EACH5C,EAAAA,gBAAgBA,GAAA;MACd,MAAM;QACJrF,MAAM;QACNqE,QAAQ,GAAG,EAAE;EACbnF,MAAAA,QAAQ,GAAG,EAAE;QACbyC,WAAW;QACXqE,QAAQ;EACRC,MAAAA,WAAW,GAAG,GAAG;QACjBhD,QAAQ;QACRwC,IAAI;EACJC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,SAAS,GAAG,KAAK;EACjBC,MAAAA,QAAQ,GAAG,KAAK;QAChB5F,QAAQ;QACR6F,MAAM;QACNC,OAAO;EACPG,MAAAA,SAAAA;OACD,GAAG,IAAI,CAACpG,KAAK,CAAA;MACd,MAAM;EAAEL,MAAAA,aAAAA;OAAe,GAAG,IAAI,CAACwB,KAAK,CAAA;MACpC,IAAI;QAAE/B,QAAQ,EAAEkB,KAAK,GAAG,EAAA;OAAI,GAAG,IAAI,CAACN,KAAK,CAAA;EACzC,IAAA,MAAMqG,KAAK,GAAGnG,MAAM,CAACmG,KAAK,IAAIV,IAAI,CAAA;EAClC,IAAA,MAAMd,SAAS,GAAGJ,kBAAY,CAAYF,QAAQ,CAAC,CAAA;MACnD,MAAM;QAAEnE,WAAW;EAAEkG,MAAAA,WAAAA;EAAa,KAAA,GAAGnG,QAAQ,CAAA;EAC7C,IAAA,MAAMoG,YAAY,GAAQC,4BAAQ,CAACtG,MAAM,CAACI,KAAK,CAAC,GAAIJ,MAAM,CAACI,KAAa,GAAI,EAAU,CAAA;MACtF,MAAMmI,WAAW,GAAGlC,YAAY,CAAChH,GAAG,CAAC,CAACC,IAAO,EAAEuB,KAAa,KAC1DX,WAAW,CAACsG,cAAc,CAAClH,IAAI,EAAEJ,QAAQ,CAAC2B,KAAK,CAAmB,CAAC,CACpE,CAAA;MACD,MAAM2H,gBAAgB,GAAGlC,4BAAQ,CAACtG,MAAM,CAACO,eAAe,CAAC,GACrDL,WAAW,CAACsG,cAAc,CAACxG,MAAM,CAACO,eAAoB,EAAErB,QAAQ,CAAC,GACjE,IAAI,CAAA;MAER,IAAI,CAACkB,KAAK,IAAIA,KAAK,CAACoD,MAAM,GAAG+E,WAAW,CAAC/E,MAAM,EAAE;EAC/C;QACApD,KAAK,GAAGA,KAAK,IAAI,EAAE,CAAA;EACnBA,MAAAA,KAAK,GAAGA,KAAK,CAACqI,MAAM,CAAC,IAAItJ,KAAK,CAACoJ,WAAW,CAAC/E,MAAM,GAAGpD,KAAK,CAACoD,MAAM,CAAC,CAAC,CAAA;EACnE,KAAA;EAED;MACA,MAAMiD,MAAM,GAAG,IAAI,CAACtC,UAAU,CAAC/D,KAAK,CAAC,IAAI,CAAC,CAACoI,gBAAgB,CAAA;EAC3D,IAAA,MAAM9B,UAAU,GAAuC;QACrDD,MAAM;EACNa,MAAAA,SAAS,EAAE,2CAA2C;QACtD5B,QAAQ;QACRzC,QAAQ;QACR/D,QAAQ;QACRkB,KAAK,EAAEX,aAAa,CAACJ,GAAG,CAAC,CAACK,SAAS,EAAEmB,KAAK,KAAI;UAC5C,MAAM;YAAEtB,GAAG;EAAED,UAAAA,IAAAA;EAAM,SAAA,GAAGI,SAAS,CAAA;EAC/B;UACA,MAAMiH,QAAQ,GAAGrH,IAAsB,CAAA;EACvC,QAAA,MAAMoJ,UAAU,GAAG7H,KAAK,IAAI0H,WAAW,CAAC/E,MAAM,CAAA;UAC9C,MAAMrD,UAAU,GACduI,UAAU,IAAIpC,4BAAQ,CAACtG,MAAM,CAACO,eAAe,CAAC,GAC1CL,WAAW,CAACsG,cAAc,CAACxG,MAAM,CAACO,eAAoB,EAAEoG,QAAQ,CAAC,GACjE4B,WAAW,CAAC1H,KAAK,CAAC,CAAA;UACxB,MAAMgG,YAAY,GAAG5D,QAAQ,CAACC,GAAG,GAAG+C,WAAW,GAAGpF,KAAK,CAAA;EACvD,QAAA,MAAMiG,YAAY,GAAG5G,WAAW,CAAC6G,UAAU,CAAC5G,UAAU,EAAE0G,YAAY,EAAEF,QAAQ,EAAEX,QAAQ,EAAEC,WAAW,CAAC,CAAA;EACtG,QAAA,MAAMmB,YAAY,GAAGsB,UAAU,GAC3BrE,QAAQ,CAAC9D,eAAe,IAAI,EAAE,GAC9BpB,KAAK,CAACC,OAAO,CAACiF,QAAQ,CAACjE,KAAK,CAAC,GAC7BiE,QAAQ,CAACjE,KAAK,CAACS,KAAK,CAAC,GACrBwD,QAAQ,CAACjE,KAAK,IAAI,EAAE,CAAA;UACxB,MAAMwG,eAAe,GAAGjF,WAAW,GAAIA,WAAW,CAACd,KAAK,CAAsB,GAAGQ,SAAS,CAAA;UAE1F,OAAO,IAAI,CAAC2F,oBAAoB,CAAC;YAC/BzH,GAAG;YACHsB,KAAK;EACL4E,UAAAA,IAAI,EAAEA,IAAI,OAAOA,IAAI,CAAA,CAAA,EAAI5E,KAAO,CAAA,CAAA;YAChC4F,MAAM;EACNkC,UAAAA,SAAS,EAAED,UAAU;EACrBzB,UAAAA,SAAS,EAAEpG,KAAK,IAAI0H,WAAW,CAAC/E,MAAM,GAAG,CAAC;YAC1C0D,WAAW,EAAEwB,UAAU,IAAI7H,KAAK,GAAGT,KAAK,CAACoD,MAAM,GAAG,CAAC;YACnDrD,UAAU;EACVgH,UAAAA,QAAQ,EAAER,QAAQ;YAClBS,YAAY;YACZN,YAAY;YACZF,eAAe;EACfhB,UAAAA,SAAS,EAAEA,SAAS,IAAI/E,KAAK,KAAK,CAAC;YACnCiF,MAAM;YACNC,OAAO;YACPG,SAAS;YACTmB,UAAU,EAAE5H,aAAa,CAAC+D,MAAAA;EAC3B,SAAA,CAAC,CAAA;EACJ,OAAC,CAAC;QACF/C,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BkF,QAAQ;QACRE,QAAQ;QACR5F,QAAQ;QACRD,MAAM;QACNqE,QAAQ;QACR8B,KAAK;QACLC,WAAW;EACXF,MAAAA,SAAAA;OACD,CAAA;MAED,MAAMqB,QAAQ,GAAG1C,iBAAW,CAAkC,oBAAoB,EAAE5E,QAAQ,EAAE0E,SAAS,CAAC,CAAA;MACxG,OAAOG,cAAC,CAAAyC,QAAQ,EAAK;QAAA,GAAAb,UAAAA;QAAc,CAAA;EACrC,GAAA;EAEA;;;;EAIG;IACHM,oBAAoBA,CAAClH,KAkBpB,EAAA;MACC,MAAM;QACJP,GAAG;QACHsB,KAAK;QACL4E,IAAI;QACJgB,MAAM;EACNkC,MAAAA,SAAS,GAAG,IAAI;QAChB1B,SAAS;QACTC,WAAW;QACX/G,UAAU;QACVgH,QAAQ;QACRC,YAAY;QACZN,YAAY;QACZF,eAAe;QACfhB,SAAS;QACTE,MAAM;QACNC,OAAO;QACPG,SAAS;EACTmB,MAAAA,UAAAA;EACD,KAAA,GAAGvH,KAAK,CAAA;MACT,MAAM;QAAE4F,QAAQ;QAAE8B,SAAS;QAAExB,QAAQ;QAAEC,WAAW;QAAEN,QAAQ;QAAEtB,QAAQ;QAAEpE,QAAQ;EAAEmG,MAAAA,WAAAA;OAAa,GAAG,IAAI,CAACtG,KAAK,CAAA;MAC5G,MAAM;EACJ8I,MAAAA,MAAM,EAAE;UAAEC,gBAAgB;EAAEC,QAAAA,WAAAA;SAAa;EACzCtE,MAAAA,eAAAA;EACD,KAAA,GAAGvE,QAAQ,CAAA;EACZ,IAAA,MAAM8I,eAAe,GAAGF,gBAAgB,IAAIC,WAAW,CAAA;MACvD,MAAM;EAAEE,MAAAA,SAAS,GAAG,IAAI;EAAEC,MAAAA,SAAS,GAAG,IAAI;EAAEC,MAAAA,QAAQ,GAAG,KAAA;EAAK,KAAE,GAAG3E,kBAAY,CAAYF,QAAQ,EAAEG,eAAe,CAAC,CAAA;EACnH,IAAA,MAAM2E,GAAG,GAA+B;QACtCC,MAAM,EAAEJ,SAAS,IAAI/B,SAAS;QAC9BoC,QAAQ,EAAEL,SAAS,IAAI9B,WAAW;QAClCoC,IAAI,EAAEJ,QAAQ,IAAIzC,MAAM;QACxB8C,MAAM,EAAEN,SAAS,IAAIN,SAAS;EAC9Ba,MAAAA,OAAO,EAAE,KAAA;OACV,CAAA;EACDL,IAAAA,GAAG,CAACK,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACP,GAAG,CAAC,CAACQ,IAAI,CAAEpK,GAAqB,IAAK4J,GAAG,CAAC5J,GAAG,CAAC,CAAC,CAAA;MAExE,OAAO;EACLqK,MAAAA,QAAQ,EACN9E,cAAC,CAAAiE,eAAe;EACdtD,QAAAA,IAAI,EAAEA,IAAI;EACV5E,QAAAA,KAAK,EAAEA,KAAK;EACZb,QAAAA,MAAM,EAAEG,UAAU;EAClBkE,QAAAA,QAAQ,EAAE+C,YAAY;EACtBlI,QAAAA,QAAQ,EAAEiI,QAAQ;EAClBf,QAAAA,WAAW,EAAEA,WAAW;EACxBzE,QAAAA,WAAW,EAAEiF,eAAe;EAC5BZ,QAAAA,QAAQ,EAAEA,QAAQ;EAClBC,QAAAA,WAAW,EAAEA,WAAW;EACxBhD,QAAAA,QAAQ,EAAE6D,YAAY;EACtBjB,QAAAA,QAAQ,EAAE,IAAI,CAAC7B,cAAc,CAAC7D,UAAU,CAAC;EACzCa,QAAAA,QAAQ,EAAE,IAAI,CAAC0B,gBAAgB,CAAC7B,KAAK,CAAC;EACtCiF,QAAAA,MAAM,EAAEA,MAAM;EACdC,QAAAA,OAAO,EAAEA,OAAO;EAChB9F,QAAAA,QAAQ,EAAEA,QAAQ;EAClByF,QAAAA,QAAQ,EAAEA,QAAQ;EAClBC,QAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,QAAAA,SAAS,EAAEA,SAAS;EACpB5B,QAAAA,SAAS,EAAEA,SAAS;EACpBM,QAAAA,SAAS,EAAEA,SAAAA;EAAS,OAAA,CAEvB;EACDoB,MAAAA,SAAS,EAAE,YAAY;QACvB5B,QAAQ;QACRe,MAAM;QACNoD,OAAO,EAAEV,GAAG,CAACG,IAAI;QACjBQ,UAAU,EAAEX,GAAG,CAACK,OAAO;QACvBO,SAAS,EAAEZ,GAAG,CAACC,MAAM;QACrBY,WAAW,EAAEb,GAAG,CAACE,QAAQ;QACzBY,SAAS,EAAEd,GAAG,CAACI,MAAM;QACrB1I,KAAK;QACLwG,UAAU;QACV9H,GAAG;QACHqB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCE,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;QACvCY,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;QACvCS,cAAc,EAAE,IAAI,CAACA,cAAc;QACnCwD,QAAQ;QACR1F,QAAQ;EACRD,MAAAA,MAAM,EAAEG,UAAU;EAClBkE,MAAAA,QAAQ,EAAE+C,YAAAA;OACX,CAAA;EACH,GAAA;EACD;;ECx1BD;;;;EAIG;EACH,SAAS8C,YAAYA,CACnBpK,KAA0B,EAAA;IAE1B,MAAM;MACJE,MAAM;MACNyF,IAAI;MACJpB,QAAQ;MACRpB,QAAQ;MACR/D,QAAQ;MACRe,QAAQ;MACR4F,QAAQ;MACRH,QAAQ;MACRC,QAAQ;MACRC,SAAS;MACT5E,QAAQ;MACR+E,OAAO;MACPD,MAAM;EACNI,IAAAA,SAAAA;EACD,GAAA,GAAGpG,KAAK,CAAA;IACT,MAAM;EAAEqG,IAAAA,KAAAA;EAAO,GAAA,GAAGnG,MAAM,CAAA;IACxB,MAAM;MAAE0H,OAAO;MAAEtB,WAAW;MAAEzC,eAAe;EAAEa,IAAAA,eAAAA;EAAe,GAAE,GAAGvE,QAAQ,CAAA;IAC3E,MAAM;EACJ0H,IAAAA,MAAM,GAAG,UAAU;EACnBxB,IAAAA,KAAK,EAAEyB,OAAO;EACd;MACAI,KAAK,EAAEC,YAAY,GAAG,IAAI;MAC1B,GAAGJ,OAAAA;EACJ,GAAA,GAAGtD,kBAAY,CAAUF,QAAQ,EAAEG,eAAe,CAAC,CAAA;IACpD,MAAMsD,MAAM,GAAGC,eAAS,CAAC/H,MAAM,EAAE2H,MAAM,EAAED,OAAO,CAAC,CAAA;EACjD,EAAA,MAAMyC,GAAG,GAAGxG,eAAe,CAACG,wBAAkB,CAACsG,QAAQ,CAAC,CAAA;EACxD,EAAA,MAAMC,EAAE,GAAG1G,eAAe,CAACG,wBAAkB,CAACwG,OAAO,CAAC,CAAA;EACtD,EAAA,IAAIjC,WAA6C,CAAA;EACjD,EAAA,MAAML,KAAK,GAAGJ,OAAO,IAAIzB,KAAK,IAAIV,IAAI,CAAA;IACtC,IAAItG,KAAK,CAACC,OAAO,CAACY,MAAM,CAACuK,KAAK,CAAC,EAAE;MAC/BlC,WAAW,GAAGC,iBAAW,CAAI;QAC3BiC,KAAK,EAAEvK,MAAM,CAACuK,KAAK,CAChBlL,GAAG,CAAEmL,MAAM,IAAI;EACd,QAAA,IAAIlE,4BAAQ,CAACkE,MAAM,CAAC,EAAE;YACpB,OAAO;EACL,YAAA,GAAGA,MAAM;EACTrE,YAAAA,KAAK,EAAEqE,MAAM,CAACrE,KAAK,KAAKqE,MAAM,CAACC,KAAK,KAAK,IAAI,GAAGN,GAAG,GAAGE,EAAE,CAAA;aACzD,CAAA;EACF,SAAA;EACD,QAAA,OAAOhJ,SAAS,CAAA;SACjB,CAAC,CACDY,MAAM,CAAEyI,CAAM,IAAKA,CAAC,CAAQ;EAChB,KAAA,CAAC,CAAA;EACnB,GAAA,MAAM;EACL;MACA,MAAMC,mBAAmB,GAAG3K,MAAsC,CAAA;MAClE,MAAM4K,KAAK,GAAG5K,MAAM,CAAC6K,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;MAC1C,IAAI,CAACF,mBAAmB,CAACG,SAAS,IAAIF,KAAK,CAACpH,MAAM,KAAK,CAAC,IAAIoH,KAAK,CAACG,KAAK,CAAEC,CAAM,IAAK,OAAOA,CAAC,KAAK,SAAS,CAAC,EAAE;EAC3G3C,MAAAA,WAAW,GAAG,CACZ;EACE1F,QAAAA,KAAK,EAAEiI,KAAK,CAAC,CAAC,CAAC;EACf5C,QAAAA,KAAK,EAAE4C,KAAK,CAAC,CAAC,CAAC,GAAGT,GAAG,GAAGE,EAAAA;EACzB,OAAA,EACD;EACE1H,QAAAA,KAAK,EAAEiI,KAAK,CAAC,CAAC,CAAC;EACf5C,QAAAA,KAAK,EAAE4C,KAAK,CAAC,CAAC,CAAC,GAAGT,GAAG,GAAGE,EAAAA;EACzB,OAAA,CACF,CAAA;EACF,KAAA,MAAM;QACLhC,WAAW,GAAGC,iBAAW,CAAI;EAC3BuC,QAAAA,IAAI,EAAED,KAAK;EACX;UACAE,SAAS,EAAEH,mBAAmB,CAACG,SAAAA;EAChB,OAAA,CAAC,CAAA;EACnB,KAAA;EACF,GAAA;IAED,OACEhG,cAAC,CAAAgD,MAAM;EACLD,IAAAA,OAAO,EAAE;EAAE,MAAA,GAAGA,OAAO;EAAEQ,MAAAA,WAAAA;OAAa;EACpCrI,IAAAA,MAAM,EAAEA,MAAM;EACdqE,IAAAA,QAAQ,EAAEA,QAAQ;MAClBzB,EAAE,EAAEK,QAAQ,CAACC,GAAG;EAChBuC,IAAAA,IAAI,EAAEA,IAAI;EACVzE,IAAAA,QAAQ,EAAEA,QAAQ;EAClB+E,IAAAA,OAAO,EAAEA,OAAO;EAChBD,IAAAA,MAAM,EAAEA,MAAM;EACdkC,IAAAA,KAAK,EAAEA,KAAK;MACZI,SAAS,EAAE,CAACH,YAAY;EACxBtF,IAAAA,KAAK,EAAEzD,QAAQ;EACf2G,IAAAA,QAAQ,EAAEA,QAAQ;EAClBH,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,QAAQ,EAAEA,QAAQ;EAClB1F,IAAAA,QAAQ,EAAEA,QAAQ;EAClBmG,IAAAA,WAAW,EAAEA,WAAW;EACxBR,IAAAA,SAAS,EAAEA,SAAS;EACpBM,IAAAA,SAAS,EAAEA,SAAAA;EAAS,GAAA,CACpB,CAAA;EAEN;;ECnFA;;;;EAIG;EACH,MAAM+E,UAA8F,SAAQrL,eAG3G,CAAA;EACC;;;EAGG;IACHC,WAAAA,CAAYC,KAA0B,EAAA;MACpC,KAAK,CAACA,KAAK,CAAC,CAAA;EAgEd;;;;;EAKG;MALH,IAMAoL,CAAAA,cAAc,GAAIV,MAAe,IAAI;QACnC,MAAM;UAAEW,cAAc;EAAEC,QAAAA,gBAAAA;SAAkB,GAAG,IAAI,CAACnK,KAAK,CAAA;QACvD,MAAM;UAAE/B,QAAQ;UAAE8B,QAAQ;EAAEf,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAACH,KAAK,CAAA;QACnD,MAAM;EAAEI,QAAAA,WAAAA;EAAa,OAAA,GAAGD,QAAQ,CAAA;EAChC,MAAA,MAAMoL,SAAS,GAAGb,MAAM,KAAKnJ,SAAS,GAAGU,QAAQ,CAACyI,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAA;QAClE,IAAIa,SAAS,KAAKF,cAAc,EAAE;EAChC,QAAA,OAAA;EACD,OAAA;QACD,MAAMG,SAAS,GAAGD,SAAS,IAAI,CAAC,GAAGD,gBAAgB,CAACC,SAAS,CAAC,GAAGhK,SAAS,CAAA;QAC1E,MAAMkK,SAAS,GAAGJ,cAAc,IAAI,CAAC,GAAGC,gBAAgB,CAACD,cAAc,CAAC,GAAG9J,SAAS,CAAA;QAEpF,IAAIyB,WAAW,GAAG5C,WAAW,CAACsL,wBAAwB,CAACF,SAAS,EAAEC,SAAS,EAAErM,QAAQ,CAAC,CAAA;QACtF,IAAI4D,WAAW,IAAIwI,SAAS,EAAE;EAC5B;EACA;UACAxI,WAAW,GAAG5C,WAAW,CAACM,mBAAmB,CAAC8K,SAAS,EAAExI,WAAW,EAAE,uBAAuB,CAAM,CAAA;EACpG,OAAA;QACD9B,QAAQ,CAAC8B,WAAW,EAAEzB,SAAS,EAAE,IAAI,CAACoK,UAAU,EAAE,CAAC,CAAA;QAEnD,IAAI,CAACjK,QAAQ,CAAC;EAAE2J,QAAAA,cAAc,EAAEE,SAAAA;EAAW,OAAA,CAAC,CAAA;OAC7C,CAAA;MAxFC,MAAM;EACJnM,MAAAA,QAAQ,EAARA,SAAQ;QACR2I,OAAO;EACP5H,MAAAA,QAAQ,EAAE;EAAEC,QAAAA,WAAW,EAAXA,YAAAA;;OACb,GAAG,IAAI,CAACJ,KAAK,CAAA;EACd;EACA,IAAA,MAAMsL,iBAAgB,GAAGvD,OAAO,CAACxI,GAAG,CAAEqM,GAAM,IAAKxL,YAAW,CAACsG,cAAc,CAACkF,GAAG,EAAExM,SAAQ,CAAC,CAAC,CAAA;MAE3F,IAAI,CAAC+B,KAAK,GAAG;EACXmK,MAAAA,gBAAgB,EAAhBA,iBAAgB;QAChBD,cAAc,EAAE,IAAI,CAACQ,iBAAiB,CAAC,CAAC,EAAEzM,SAAQ,EAAEkM,iBAAgB,CAAA;OACrE,CAAA;EACH,GAAA;EAEA;;;;;EAKG;EACHQ,EAAAA,kBAAkBA,CAACC,SAAwC,EAAExI,SAAoC,EAAA;MAC/F,MAAM;QAAEnE,QAAQ;QAAE2I,OAAO;EAAE5E,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAACnD,KAAK,CAAA;MAClD,MAAM;EAAEqL,MAAAA,cAAAA;OAAgB,GAAG,IAAI,CAAClK,KAAK,CAAA;EACrC,IAAA,IAAI6K,QAAQ,GAAG,IAAI,CAAC7K,KAAK,CAAA;MACzB,IAAI,CAAC8K,gBAAU,CAACF,SAAS,CAAChE,OAAO,EAAEA,OAAO,CAAC,EAAE;QAC3C,MAAM;EACJ5H,QAAAA,QAAQ,EAAE;EAAEC,UAAAA,WAAAA;EAAa,SAAA;SAC1B,GAAG,IAAI,CAACJ,KAAK,CAAA;EACd;EACA,MAAA,MAAMsL,gBAAgB,GAAGvD,OAAO,CAACxI,GAAG,CAAEqM,GAAM,IAAKxL,WAAW,CAACsG,cAAc,CAACkF,GAAG,EAAExM,QAAQ,CAAC,CAAC,CAAA;EAC3F4M,MAAAA,QAAQ,GAAG;UAAEX,cAAc;EAAEC,QAAAA,gBAAAA;SAAkB,CAAA;EAChD,KAAA;EACD,IAAA,IAAI,CAACW,gBAAU,CAAC7M,QAAQ,EAAE2M,SAAS,CAAC3M,QAAQ,CAAC,IAAI+D,QAAQ,CAACC,GAAG,KAAK2I,SAAS,CAAC5I,QAAQ,CAACC,GAAG,EAAE;QACxF,MAAM;EAAEkI,QAAAA,gBAAAA;EAAkB,OAAA,GAAGU,QAAQ,CAAA;QACrC,MAAME,cAAc,GAAG,IAAI,CAACL,iBAAiB,CAACR,cAAc,EAAEjM,QAAQ,EAAEkM,gBAAgB,CAAC,CAAA;EAEzF,MAAA,IAAI/H,SAAS,IAAI2I,cAAc,KAAKb,cAAc,EAAE;EAClDW,QAAAA,QAAQ,GAAG;EAAEX,UAAAA,cAAc,EAAEa,cAAc;EAAEZ,UAAAA,gBAAAA;WAAkB,CAAA;EAChE,OAAA;EACF,KAAA;EACD,IAAA,IAAIU,QAAQ,KAAK,IAAI,CAAC7K,KAAK,EAAE;EAC3B,MAAA,IAAI,CAACO,QAAQ,CAACsK,QAAQ,CAAC,CAAA;EACxB,KAAA;EACH,GAAA;EAEA;;;;;EAKG;EACHH,EAAAA,iBAAiBA,CAACR,cAAsB,EAAEjM,QAAuB,EAAE2I,OAAY,EAAA;MAC7E,MAAM;QACJ7H,MAAM;EACNC,MAAAA,QAAQ,EAAE;EAAEC,QAAAA,WAAAA;EAAW,OAAA;OACxB,GAAG,IAAI,CAACJ,KAAK,CAAA;EAEd,IAAA,MAAMmM,aAAa,GAAGC,qCAA+B,CAAIlM,MAAM,CAAC,CAAA;EAChE,IAAA,MAAMwK,MAAM,GAAGtK,WAAW,CAACiM,wBAAwB,CAACjN,QAAQ,EAAE2I,OAAO,EAAEsD,cAAc,EAAEc,aAAa,CAAC,CAAA;EACrG,IAAA,OAAOzB,MAAM,CAAA;EACf,GAAA;EA8BAiB,EAAAA,UAAUA,GAAA;MACR,MAAM;QAAExI,QAAQ;EAAEjD,MAAAA,MAAAA;OAAQ,GAAG,IAAI,CAACF,KAAK,CAAA;EACvC,IAAA,QAAUmD,EAAAA,QAAQ,CAACC,GAAG,CAAGlD,EAAAA,MAAM,CAACuK,KAAK,GAAG,gBAAgB,GAAG,iBAAkB,CAAA,CAAA;EAC/E,GAAA;EAEA;EACG;EACH7F,EAAAA,MAAMA,GAAA;MACJ,MAAM;QACJe,IAAI;EACJC,MAAAA,QAAQ,GAAG,KAAK;QAChB/D,WAAW,GAAG,EAAE;QAChByE,WAAW;QACXN,MAAM;QACNC,OAAO;QACP9F,QAAQ;QACRD,MAAM;EACNqE,MAAAA,QAAAA;OACD,GAAG,IAAI,CAACvE,KAAK,CAAA;MAEd,MAAM;QAAE4H,OAAO;QAAEkB,MAAM;QAAEjF,eAAe;QAAEa,eAAe;EAAEtE,MAAAA,WAAAA;EAAa,KAAA,GAAGD,QAAQ,CAAA;MACnF,MAAM;EAAE6I,MAAAA,WAAW,EAAEsD,YAAAA;EAAc,KAAA,GAAGxD,MAAM,CAAA;MAC5C,MAAM;QAAEuC,cAAc;EAAEC,MAAAA,gBAAAA;OAAkB,GAAG,IAAI,CAACnK,KAAK,CAAA;MACvD,MAAM;EACJ0G,MAAAA,MAAM,GAAG,QAAQ;QACjBF,WAAW;QACX7B,SAAS;QACTyG,YAAY;QACZlG,KAAK,GAAGnG,MAAM,CAACmG,KAAK;QACpB,GAAGxB,SAAAA;EACJ,KAAA,GAAGJ,kBAAY,CAAUF,QAAQ,EAAEG,eAAe,CAAC,CAAA;MACpD,MAAMsD,MAAM,GAAGC,eAAS,CAAU;EAAE9D,MAAAA,IAAI,EAAE,QAAA;EAAQ,KAAE,EAAE0D,MAAM,EAAED,OAAO,CAAC,CAAA;MACtE,MAAMxB,SAAS,GAAGtC,uBAAG,CAACjC,WAAW,EAAE2K,gBAAU,EAAE,EAAE,CAAC,CAAA;MAClD,MAAMC,gBAAgB,GAAGC,wBAAI,CAAC7K,WAAW,EAAE,CAAC2K,gBAAU,CAAC,CAAC,CAAA;MACxD,MAAMrE,YAAY,GAAG/H,WAAW,CAACgI,eAAe,CAAClI,MAAM,EAAEqE,QAAQ,EAAEG,eAAe,CAAC,CAAA;EAEnF,IAAA,MAAMgG,MAAM,GAAGW,cAAc,IAAI,CAAC,GAAGC,gBAAgB,CAACD,cAAc,CAAC,IAAI,IAAI,GAAG,IAAI,CAAA;EACpF,IAAA,IAAIsB,YAAe,CAAA;EAEnB,IAAA,IAAIjC,MAAM,EAAE;QACV,MAAM;UAAED,KAAK;UAAEmC,KAAK;UAAE,GAAGC,SAAAA;EAAS,OAAE,GAAG3M,MAAM,CAAA;EAC7C;EACA4M,MAAAA,yBAAK,CAACD,SAAS,EAAEE,8BAAwB,CAAC,CAAA;EAC1CJ,MAAAA,YAAY,GAAG,CAACK,2BAAO,CAACH,SAAS,CAAC,GAAII,kBAAY,CAACJ,SAAS,EAAEnC,MAAM,CAAO,GAAGA,MAAM,CAAA;EACrF,KAAA;MAED,MAAMwC,aAAa,GAAuB7G,KAAK,GAC3CrC,wBAAkB,CAACmJ,iBAAiB,GACpCnJ,wBAAkB,CAACoJ,YAAY,CAAA;MACnC,MAAMC,eAAe,GAAGhH,KAAK,GAAG,CAACA,KAAK,CAAC,GAAG,EAAE,CAAA;MAC5C,MAAMkC,WAAW,GAAG+C,gBAAgB,CAAC/L,GAAG,CAAC,CAACqM,GAAuB,EAAE7K,KAAa,MAAM;QACpFmH,KAAK,EAAE0D,GAAG,CAACvF,KAAK,IAAIxC,eAAe,CAACqJ,aAAa,EAAEG,eAAe,CAAC1E,MAAM,CAAC2E,MAAM,CAACvM,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;EAC7F8B,MAAAA,KAAK,EAAE9B,KAAAA;EACR,KAAA,CAAC,CAAC,CAAA;MAEH,OACEwM,eAAK,CAAA,KAAA,EAAA;EAAA/F,MAAAA,SAAS,EAAC,gCAAgC;mBAC7CxC,cAAK,CAAA,KAAA,EAAA;EAAAwC,QAAAA,SAAS,EAAC,YAAY;oBACzBxC,cAAC,CAAAgD,MAAM,EACL;EAAAlF,UAAAA,EAAE,EAAE,IAAI,CAAC6I,UAAU,EAAE;YACrBhG,IAAI,EAAK,CAAAA,EAAAA,KAAOzF,EAAAA,MAAM,CAACuK,KAAK,GAAG,gBAAgB,GAAG,gBAAgB,CAAE,CAAA;EACpEvK,UAAAA,MAAM,EAAE;EAAEiE,YAAAA,IAAI,EAAE,QAAQ;EAAEqJ,YAAAA,OAAO,EAAE,CAAA;aAAQ;YAC3CtM,QAAQ,EAAE,IAAI,CAACkK,cAAc;EAC7BpF,UAAAA,MAAM,EAAEA,MAAM;EACdC,UAAAA,OAAO,EAAEA,OAAO;EAChBL,UAAAA,QAAQ,EAAEA,QAAQ,IAAIoH,2BAAO,CAACzE,WAAW,CAAC;EAC1CF,UAAAA,QAAQ,EAAE,KAAK;EACfjC,UAAAA,SAAS,EAAEA,SAAS;EACpBvE,UAAAA,WAAW,EAAE4K,gBAAgB;EAC7B5J,UAAAA,KAAK,EAAEwI,cAAc,IAAI,CAAC,GAAGA,cAAc,GAAG9J,SAAS;EACvDwG,UAAAA,OAAO,EAAE;cAAEQ,WAAW;cAAE,GAAG1D,SAAAA;aAAW;EACtC1E,UAAAA,QAAQ,EAAEA,QAAQ;EAClBmG,UAAAA,WAAW,EAAEA,WAAW;EACxBqB,UAAAA,WAAW,EAAEA,WAAW;EACxB4E,UAAAA,YAAY,EAAEA,YAAY;EAC1BzG,UAAAA,SAAS,EAAEA,SAAS;YACpBoC,KAAK,EAAE7B,KAAK,IAAIV,IAAI;EACpB2C,UAAAA,SAAS,EAAE,CAACH,YAAAA;WAAY,CAAA;SAEtB,CAAA,EACLuC,MAAM,KAAK,IAAI,IAAI1F,cAAA,CAACsH,YAAY,EAAK;UAAA,GAAA,IAAI,CAACtM,KAAK;EAAEE,QAAAA,MAAM,EAAEyM,YAAAA;EAAiB,OAAA,CAAA,CAAA;EAAA,KAAA,CACvE,CAAA;EAEV,GAAA;EACD;;ECvND;EACA;EACA;EACA;EACA,MAAMc,6BAA6B,GAAG,eAAe,CAAA;EAErD;EACA;EACA;EACA;EACA,MAAMC,mBAAmB,GAAG,SAAS,CAAA;EAErC;;;;;;;;;;;;;;;;EAgBG;EACH,SAASC,WAAWA,CAClB3N,KAA0B,EAAA;IAE1B,MAAM;MAAEG,QAAQ;MAAEe,QAAQ;MAAE9B,QAAQ;EAAEyD,IAAAA,KAAK,EAAE+K,YAAAA;EAAc,GAAA,GAAG5N,KAAK,CAAA;IACnE,MAAM,CAAC6N,SAAS,EAAEC,YAAY,CAAC,GAAGC,cAAQ,CAACH,YAAY,CAAC,CAAA;IACxD,MAAM;EAAEI,IAAAA,WAAAA;KAAa,GAAG7N,QAAQ,CAAC2I,MAAM,CAAA;IAEvC,IAAIjG,KAAK,GAAGzD,QAAQ,CAAA;EAEpB;;;EAGG;EACH,EAAA,MAAM6O,YAAY,GAAGC,iBAAW,CAC7BrL,KAAmC,IAAI;EACtC;MACAiL,YAAY,CAACjL,KAAK,CAAC,CAAA;EAEnB;EACA;MACA,IAAI,CAAA,EAAGA,KAAK,CAAA,CAAE,CAACsL,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAChCtL,KAAK,GAAG,CAAIA,CAAAA,EAAAA,KAAK,CAAE,CAAA,CAAA;EACpB,KAAA;EAED;EACA;EACA;EACA,IAAA,MAAMuL,SAAS,GACb,OAAOvL,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACwL,KAAK,CAACZ,6BAA6B,CAAC,GACnEa,cAAQ,CAACzL,KAAK,CAAC0L,OAAO,CAACb,mBAAmB,EAAE,EAAE,CAAC,CAAC,GAChDY,cAAQ,CAACzL,KAAK,CAAC,CAAA;MAErB3B,QAAQ,CAACkN,SAAyB,CAAC,CAAA;EACrC,GAAC,EACD,CAAClN,QAAQ,CAAC,CACX,CAAA;IAED,IAAI,OAAO2M,SAAS,KAAK,QAAQ,IAAI,OAAOhL,KAAK,KAAK,QAAQ,EAAE;EAC9D;EACA;EACA;EACA,IAAA,MAAM2L,EAAE,GAAG,IAAIC,MAAM,CAAC,GAAG5L,KAAO,CAAA,CAAA,CAAC0L,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,SAAS,CAAC,CAAA;EAEjE;EACA;EACA,IAAA,IAAIV,SAAS,CAACQ,KAAK,CAACG,EAAE,CAAC,EAAE;EACvB3L,MAAAA,KAAK,GAAGgL,SAAyB,CAAA;EAClC,KAAA;EACF,GAAA;IAED,OAAO7I,cAAC,CAAAgJ,WAAW,EAAK;EAAA,IAAA,GAAAhO,KAAK;EAAEZ,IAAAA,QAAQ,EAAEyD,KAAK;EAAE3B,IAAAA,QAAQ,EAAE+M,YAAAA;MAAgB,CAAA;EAC5E;;ECjDA;;;;EAIG;EACH,MAAMS,WAA+F,SAAQ5O,eAG5G,CAAA;EAAAC,EAAAA,WAAAA,CAAA,GAAA4O,IAAA,EAAA;EAAA,IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA,CAAA;EACC;EAAA,IAAA,IAAA,CACAxN,KAAK,GAAG;EACNyN,MAAAA,sBAAsB,EAAE,KAAK;EAC7BC,MAAAA,oBAAoB,EAAE,EAAE;OACzB,CAAA;EAYD;;;;;;;EAOG;MAPH,IAQAC,CAAAA,gBAAgB,GAAG,CAACnJ,IAAY,EAAEoJ,2BAA2B,GAAG,KAAK,KAAI;EACvE,MAAA,OAAO,CAAClM,KAAoB,EAAEf,cAA+B,EAAEgB,EAAW,KAAI;UAC5E,MAAM;YAAE1D,QAAQ;YAAE8B,QAAQ;EAAEW,UAAAA,WAAAA;WAAa,GAAG,IAAI,CAAC7B,KAAK,CAAA;EACtD,QAAA,IAAI6C,KAAK,KAAKtB,SAAS,IAAIwN,2BAA2B,EAAE;EACtD;EACA;EACA;EACA;EACA;EACA;EACA;EACAlM,UAAAA,KAAK,GAAG,EAAkB,CAAA;EAC3B,SAAA;EACD,QAAA,MAAMG,WAAW,GAAG;EAAE,UAAA,GAAG5D,QAAQ;EAAE,UAAA,CAACuG,IAAI,GAAG9C,KAAAA;WAAuB,CAAA;EAClE3B,QAAAA,QAAQ,CACN8B,WAAW,EACXnB,WAAW,IACTA,WAAW,IAAI;EACb,UAAA,GAAGA,WAAW;EACd,UAAA,CAAC8D,IAAI,GAAG7D,cAAAA;WACT,EACHgB,EAAE,CACH,CAAA;SACF,CAAA;OACF,CAAA;EAED;;;;;EAKG;MALH,IAMAkM,CAAAA,mBAAmB,GAAIvP,GAAW,IAAI;EACpC,MAAA,OAAQmB,KAAgB,IAAI;UAC1BA,KAAK,CAACK,cAAc,EAAE,CAAA;UACtB,MAAM;YAAEC,QAAQ;EAAE9B,UAAAA,QAAAA;WAAU,GAAG,IAAI,CAACY,KAAK,CAAA;EACzC,QAAA,MAAMiP,cAAc,GAAG;YAAE,GAAG7P,QAAAA;WAAe,CAAA;EAC3C0N,QAAAA,yBAAK,CAACmC,cAAc,EAAExP,GAAG,CAAC,CAAA;UAC1ByB,QAAQ,CAAC+N,cAAc,CAAC,CAAA;SACzB,CAAA;OACF,CAAA;EAED;;;;;;EAMG;EANH,IAAA,IAAA,CAOAC,eAAe,GAAG,CAACC,YAAoB,EAAE/P,QAAY,KAAI;QACvD,MAAM;UAAEmF,QAAQ;EAAEpE,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAACH,KAAK,CAAA;QACzC,MAAM;EAAEoP,QAAAA,2BAA2B,GAAG,GAAA;SAAK,GAAG3K,kBAAY,CAAUF,QAAQ,EAAEpE,QAAQ,CAACuE,eAAe,CAAC,CAAA;QAEvG,IAAI3D,KAAK,GAAG,CAAC,CAAA;QACb,IAAIsO,MAAM,GAAGF,YAAY,CAAA;EACzB,MAAA,OAAO9F,uBAAG,CAACjK,QAAQ,EAAEiQ,MAAM,CAAC,EAAE;UAC5BA,MAAM,MAAMF,YAAY,CAAA,EAAGC,2BAA8B,CAAA,EAAA,EAAErO,KAAK,CAAE,CAAA,CAAA;EACnE,OAAA;EACD,MAAA,OAAOsO,MAAM,CAAA;OACd,CAAA;EAED;;;;;EAKG;MALH,IAMAC,CAAAA,WAAW,GAAIC,QAAa,IAAI;EAC9B,MAAA,OAAO,CAAC1M,KAAU,EAAEf,cAA8B,KAAI;UACpD,IAAIyN,QAAQ,KAAK1M,KAAK,EAAE;EACtB,UAAA,OAAA;EACD,SAAA;UACD,MAAM;YAAEzD,QAAQ;YAAE8B,QAAQ;EAAEW,UAAAA,WAAAA;WAAa,GAAG,IAAI,CAAC7B,KAAK,CAAA;UAEtD6C,KAAK,GAAG,IAAI,CAACqM,eAAe,CAACrM,KAAK,EAAEzD,QAAQ,CAAC,CAAA;EAC7C,QAAA,MAAM4D,WAAW,GAAsB;YACrC,GAAI5D,QAAAA;WACL,CAAA;EACD,QAAA,MAAMoQ,OAAO,GAAsB;EAAE,UAAA,CAACD,QAAQ,GAAG1M,KAAAA;WAAO,CAAA;EACxD,QAAA,MAAM4M,SAAS,GAAG9F,MAAM,CAACC,IAAI,CAAC5G,WAAW,CAAC,CAACzD,GAAG,CAAEE,GAAG,IAAI;EACrD,UAAA,MAAM4P,MAAM,GAAGG,OAAO,CAAC/P,GAAG,CAAC,IAAIA,GAAG,CAAA;YAClC,OAAO;EAAE,YAAA,CAAC4P,MAAM,GAAGrM,WAAW,CAACvD,GAAG,CAAA;aAAG,CAAA;EACvC,SAAC,CAAC,CAAA;UACF,MAAMiQ,UAAU,GAAG/F,MAAM,CAACgG,MAAM,CAAC,EAAE,EAAE,GAAGF,SAAS,CAAC,CAAA;UAElD,IAAI,CAAC/N,QAAQ,CAAC;EAAEkN,UAAAA,sBAAsB,EAAE,IAAA;EAAM,SAAA,CAAC,CAAA;EAE/C1N,QAAAA,QAAQ,CACNwO,UAAU,EACV7N,WAAW,IACTA,WAAW,IAAI;EACb,UAAA,GAAGA,WAAW;EACd,UAAA,CAACgB,KAAK,GAAGf,cAAAA;EACV,SAAA,CACJ,CAAA;SACF,CAAA;OACF,CAAA;EA4BD;;;;EAIG;EAJH,IAAA,IAAA,CAKA8N,cAAc,GAAI1P,MAAS,IAAK,MAAK;EACnC,MAAA,IAAI,CAACA,MAAM,CAAC2O,oBAAoB,EAAE;EAChC,QAAA,OAAA;EACD,OAAA;QACD,MAAM;UAAEzP,QAAQ;UAAE8B,QAAQ;EAAEf,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAACH,KAAK,CAAA;EACnD,MAAA,MAAMgD,WAAW,GAAG;UAAE,GAAG5D,QAAAA;SAAe,CAAA;QAExC,IAAI+E,IAAI,GAAuB5C,SAAS,CAAA;EACxC,MAAA,IAAIiF,4BAAQ,CAACtG,MAAM,CAAC2O,oBAAoB,CAAC,EAAE;EACzC1K,QAAAA,IAAI,GAAGjE,MAAM,CAAC2O,oBAAoB,CAAC1K,IAAI,CAAA;EACvC,QAAA,IAAI0L,QAAQ,GAAG3P,MAAM,CAAC2O,oBAAoB,CAAA;UAC1C,IAAIiB,aAAO,IAAID,QAAQ,EAAE;YACvB,MAAM;EAAEzP,YAAAA,WAAAA;EAAa,WAAA,GAAGD,QAAQ,CAAA;EAChC0P,UAAAA,QAAQ,GAAGzP,WAAW,CAACsG,cAAc,CAAC;cAAEqJ,IAAI,EAAEF,QAAQ,CAACC,aAAO,CAAA;aAAQ,EAAE1Q,QAAQ,CAAC,CAAA;YACjF+E,IAAI,GAAG0L,QAAQ,CAAC1L,IAAI,CAAA;EACrB,SAAA;UACD,IAAI,CAACA,IAAI,KAAK6L,gBAAU,IAAIH,QAAQ,IAAII,gBAAU,IAAIJ,QAAQ,CAAC,EAAE;EAC/D1L,UAAAA,IAAI,GAAG,QAAQ,CAAA;EAChB,SAAA;EACF,OAAA;QAED,MAAMkL,MAAM,GAAG,IAAI,CAACH,eAAe,CAAC,QAAQ,EAAElM,WAAW,CAAC,CAAA;EAC1D;QACAd,uBAAG,CAACc,WAAgC,EAAEqM,MAAM,EAAE,IAAI,CAACa,eAAe,CAAC/L,IAAI,CAAC,CAAC,CAAA;QAEzEjD,QAAQ,CAAC8B,WAAW,CAAC,CAAA;OACtB,CAAA;EAAA,GAAA;EA7KD;;;;EAIG;IACHmN,UAAUA,CAACxK,IAAY,EAAA;MACrB,MAAM;EAAEzF,MAAAA,MAAAA;OAAQ,GAAG,IAAI,CAACF,KAAK,CAAA;EAC7B,IAAA,OAAOX,KAAK,CAACC,OAAO,CAACY,MAAM,CAAC6F,QAAQ,CAAC,IAAI7F,MAAM,CAAC6F,QAAQ,CAACqK,OAAO,CAACzK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA;EAC/E,GAAA;EA4GA;;;EAGG;IACHuK,eAAeA,CAAC/L,IAAyB,EAAA;MACvC,MAAM;EACJhE,MAAAA,QAAQ,EAAE;EAAE0D,QAAAA,eAAAA;EAAiB,OAAA;OAC9B,GAAG,IAAI,CAAC7D,KAAK,CAAA;EACd,IAAA,QAAQmE,IAAI;EACV,MAAA,KAAK,OAAO;EACV,QAAA,OAAO,EAAE,CAAA;EACX,MAAA,KAAK,SAAS;EACZ,QAAA,OAAO,KAAK,CAAA;EACd,MAAA,KAAK,MAAM;EACT,QAAA,OAAO,IAAI,CAAA;EACb,MAAA,KAAK,QAAQ;EACX,QAAA,OAAO,CAAC,CAAA;EACV,MAAA,KAAK,QAAQ;EACX,QAAA,OAAO,EAAE,CAAA;EACX,MAAA,KAAK,QAAQ,CAAA;EACb,MAAA;EACE;EACA,QAAA,OAAON,eAAe,CAACG,wBAAkB,CAACqM,gBAAgB,CAAC,CAAA;EAC9D,KAAA;EACH,GAAA;EAmCA;EACG;EACHzL,EAAAA,MAAMA,GAAA;MACJ,MAAM;EACJ1E,MAAAA,MAAM,EAAEoQ,SAAS;QACjB/L,QAAQ,GAAG,EAAE;QACbnF,QAAQ;QACRyC,WAAW;QACXsB,QAAQ;QACRwC,IAAI;EACJI,MAAAA,QAAQ,GAAG,KAAK;EAChBH,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;QAChB6B,SAAS;QACTxB,QAAQ;QACRC,WAAW;QACXH,MAAM;QACNC,OAAO;EACP9F,MAAAA,QAAAA;OACD,GAAG,IAAI,CAACH,KAAK,CAAA;MAEd,MAAM;QAAE8I,MAAM;QAAExC,WAAW;QAAElG,WAAW;QAAEyD,eAAe;EAAEa,MAAAA,eAAAA;EAAiB,KAAA,GAAGvE,QAAQ,CAAA;MACvF,MAAM;EAAE6I,MAAAA,WAAAA;EAAa,KAAA,GAAGF,MAAM,CAAA;MAC9B,MAAM5I,MAAM,GAAME,WAAW,CAACsG,cAAc,CAAC4J,SAAS,EAAElR,QAAQ,CAAC,CAAA;EACjE,IAAA,MAAMyF,SAAS,GAAGJ,kBAAY,CAAUF,QAAQ,EAAEG,eAAe,CAAC,CAAA;MAClE,MAAM;QAAE6L,UAAU,EAAEC,gBAAgB,GAAG,EAAE;EAAA,KAAE,GAAGtQ,MAAM,CAAA;MAEpD,MAAMmG,KAAK,GAAGxB,SAAS,CAACwB,KAAK,IAAInG,MAAM,CAACmG,KAAK,IAAIV,IAAI,CAAA;MACrD,MAAM8K,WAAW,GAAG5L,SAAS,CAAC4L,WAAW,IAAIvQ,MAAM,CAACuQ,WAAW,CAAA;EAC/D,IAAA,IAAIC,iBAA2B,CAAA;MAC/B,IAAI;EACF,MAAA,MAAMH,UAAU,GAAG5G,MAAM,CAACC,IAAI,CAAC4G,gBAAgB,CAAC,CAAA;QAChDE,iBAAiB,GAAGC,qBAAe,CAACJ,UAAU,EAAE1L,SAAS,CAAC+L,KAAK,CAAC,CAAA;OACjE,CAAC,OAAOC,GAAG,EAAE;QACZ,OACEtD;qBACEvI,cAAG,CAAA,GAAA,EAAA;EAAAwC,UAAAA,SAAS,EAAC,cAAc;EAACsJ,UAAAA,KAAK,EAAE;EAAEC,YAAAA,KAAK,EAAE,KAAA;aAAO;EACjDjH,UAAAA,QAAA,EAAA9E,cAAA,CAACgM,4BAAQ,EACN;EAAAlH,YAAAA,QAAA,EAAAjG,eAAe,CAACG,wBAAkB,CAACiN,kBAAkB,EAAE,CAACtL,IAAI,IAAI,MAAM,EAAGkL,GAAa,CAACK,OAAO,CAAC,CAAA;aACvF,CAAA;EAAA,SAAA,CACT,EACJlM,cAAM,CAAA,KAAA,EAAA;EAAA8E,UAAAA,QAAA,EAAAqH,IAAI,CAACC,SAAS,CAAClR,MAAM,CAAA;EAAC,SAAA,CAAO,CAAA;EAC/B,OAAA,CAAA,CAAA;EAET,KAAA;MAED,MAAMuH,QAAQ,GAAG1C,iBAAW,CAAiC,qBAAqB,EAAE5E,QAAQ,EAAE0E,SAAS,CAAC,CAAA;EAExG,IAAA,MAAMwM,aAAa,GAAG;EACpB;QACAhL,KAAK,EAAExB,SAAS,CAACqD,KAAK,KAAK,KAAK,GAAG,EAAE,GAAG7B,KAAK;QAC7CoK,WAAW,EAAE5L,SAAS,CAACqD,KAAK,KAAK,KAAK,GAAG3G,SAAS,GAAGkP,WAAW;EAChEF,MAAAA,UAAU,EAAEG,iBAAiB,CAACnR,GAAG,CAAEoG,IAAI,IAAI;EACzC,QAAA,MAAMoJ,2BAA2B,GAAG1F,uBAAG,CAACnJ,MAAM,EAAE,CAACoR,oBAAc,EAAE3L,IAAI,EAAEoH,8BAAwB,CAAC,CAAC,CAAA;UACjG,MAAMwE,aAAa,GAAGxC,2BAA2B,GAAGxK,QAAQ,CAACsK,oBAAoB,GAAGtK,QAAQ,CAACoB,IAAI,CAAC,CAAA;UAClG,MAAM6L,MAAM,GAAG/M,kBAAY,CAAU8M,aAAa,CAAC,CAAC1J,MAAM,KAAK,QAAQ,CAAA;EACvE,QAAA,MAAM4J,aAAa,GAAgB3N,uBAAG,CAACX,QAAQ,EAAE,CAACwC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;UAE5D,OAAO;EACL+L,UAAAA,OAAO,EACL1M,cAAC,CAAAgE,WAAW,EAEV;EAAArD,YAAAA,IAAI,EAAEA,IAAI;EACVI,YAAAA,QAAQ,EAAE,IAAI,CAACoK,UAAU,CAACxK,IAAI,CAAC;EAC/BzF,YAAAA,MAAM,EAAE4D,uBAAG,CAAC5D,MAAM,EAAE,CAACoR,oBAAc,EAAE3L,IAAI,CAAC,EAAE,EAAE,CAAC;EAC/CpB,YAAAA,QAAQ,EAAEgN,aAAa;EACvB1P,YAAAA,WAAW,EAAEiC,uBAAG,CAACjC,WAAW,EAAE8D,IAAI,CAAC;EACnCxC,YAAAA,QAAQ,EAAEsO,aAAa;EACvBvL,YAAAA,QAAQ,EAAEA,QAAQ;EAClBC,YAAAA,WAAW,EAAEA,WAAW;EACxB/G,YAAAA,QAAQ,EAAE0E,uBAAG,CAAC1E,QAAQ,EAAEuG,IAAI,CAAC;EAC7BW,YAAAA,WAAW,EAAEA,WAAW;EACxBsI,YAAAA,sBAAsB,EAAE,IAAI,CAACzN,KAAK,CAACyN,sBAAsB;EACzDU,YAAAA,WAAW,EAAE,IAAI,CAACA,WAAW,CAAC3J,IAAI,CAAC;cACnCzE,QAAQ,EAAE,IAAI,CAAC4N,gBAAgB,CAACnJ,IAAI,EAAEoJ,2BAA2B,CAAC;EAClE/I,YAAAA,MAAM,EAAEA,MAAM;EACdC,YAAAA,OAAO,EAAEA,OAAO;EAChB9F,YAAAA,QAAQ,EAAEA,QAAQ;EAClByF,YAAAA,QAAQ,EAAEA,QAAQ;EAClBC,YAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,YAAAA,SAAS,EAAEA,SAAS;cACpBsH,mBAAmB,EAAE,IAAI,CAACA,mBAAAA;aApBrB,EAAArJ,IAAI,CAsBZ;YACDA,IAAI;YACJE,QAAQ;YACRD,QAAQ;YACRG,QAAQ;EACRyL,UAAAA,MAAAA;WACD,CAAA;EACH,OAAC,CAAC;QACF3L,QAAQ;QACRD,QAAQ;QACRG,QAAQ;QACR5C,QAAQ;QACRoB,QAAQ;QACR1C,WAAW;QACX3B,MAAM;QACNd,QAAQ;QACRkH,WAAW;EACXnG,MAAAA,QAAAA;OACD,CAAA;MACD,OAAO6E,cAAA,CAACyC,QAAQ,EAAA;EAAA,MAAA,GAAK4J,aAAa;QAAE1Q,UAAU,EAAE,IAAI,CAACiP,cAAAA;EAAc,KAAA,CAAI,CAAA;EACzE,GAAA;EACD;;EC9SD;EACA,MAAM+B,eAAe,GAA8B;EACjDC,EAAAA,KAAK,EAAE,YAAY;EACnBC,EAAAA,OAAO,EAAE,cAAc;EACvBC,EAAAA,OAAO,EAAE,aAAa;EACtBC,EAAAA,MAAM,EAAE,aAAa;EACrBC,EAAAA,MAAM,EAAE,aAAa;EACrBC,EAAAA,MAAM,EAAE,aAAa;EACrBC,EAAAA,IAAI,EAAE,WAAA;GACP,CAAA;EAED;;;;;;;;;EASG;EACH,SAASC,iBAAiBA,CACxBjS,MAAS,EACT2E,SAAiC,EACjC1B,QAAqB,EACrBhD,QAA2B,EAAA;EAE3B,EAAA,MAAMiS,KAAK,GAAGvN,SAAS,CAACuN,KAAK,CAAA;IAC7B,MAAM;MAAEtJ,MAAM;EAAEjF,IAAAA,eAAAA;EAAiB,GAAA,GAAG1D,QAAQ,CAAA;EAC5C,EAAA,IAAI,OAAOiS,KAAK,KAAK,UAAU,EAAE;EAC/B,IAAA,OAAOA,KAAK,CAAA;EACb,GAAA;IACD,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,IAAItJ,MAAM,EAAE;MAChD,OAAOA,MAAM,CAACsJ,KAAK,CAAC,CAAA;EACrB,GAAA;EAED,EAAA,MAAMC,UAAU,GAAGC,mBAAa,CAACpS,MAAM,CAAC,CAAA;EACxC,EAAA,MAAMiE,IAAI,GAAW9E,KAAK,CAACC,OAAO,CAAC+S,UAAU,CAAC,GAAGA,UAAU,CAAC,CAAC,CAAC,GAAGA,UAAU,IAAI,EAAE,CAAA;EAEjF,EAAA,MAAME,QAAQ,GAAGrS,MAAM,CAACkD,GAAG,CAAA;EAE3B,EAAA,IAAIoP,aAAa,GAAGb,eAAe,CAACxN,IAAI,CAAC,CAAA;EACzC,EAAA,IAAIoO,QAAQ,IAAIA,QAAQ,IAAIzJ,MAAM,EAAE;EAClC0J,IAAAA,aAAa,GAAGD,QAAQ,CAAA;EACzB,GAAA;EAED;EACA;IACA,IAAI,CAACC,aAAa,KAAKtS,MAAM,CAAC0M,KAAK,IAAI1M,MAAM,CAACuK,KAAK,CAAC,EAAE;EACpD,IAAA,OAAO,MAAM,IAAI,CAAA;EAClB,GAAA;IAED,OAAO+H,aAAa,IAAI1J,MAAM,GAC1BA,MAAM,CAAC0J,aAAa,CAAC,GACrB,MAAK;MACH,MAAM1N,wBAAwB,GAAGC,iBAAW,CAC1C,0BAA0B,EAC1B5E,QAAQ,EACR0E,SAAS,CACV,CAAA;MAED,OACEG,cAAA,CAACF,wBAAwB,EAAA;EACvB5E,MAAAA,MAAM,EAAEA,MAAM;EACdiD,MAAAA,QAAQ,EAAEA,QAAQ;EAClB8B,MAAAA,MAAM,EAAEpB,eAAe,CAACG,wBAAkB,CAACyO,gBAAgB,EAAE,CAACnF,MAAM,CAACpN,MAAM,CAACiE,IAAI,CAAC,CAAC,CAAC;EACnFhE,MAAAA,QAAQ,EAAEA,QAAAA;EAAQ,KAAA,CAClB,CAAA;KAEL,CAAA;EACP,CAAA;EAEA;;;;;EAKG;EACH,SAASuS,iBAAiBA,CACxB1S,KAA0B,EAAA;IAE1B,MAAM;EACJE,IAAAA,MAAM,EAAEyS,OAAO;EACfxP,IAAAA,QAAQ,EAAEyP,SAAS;MACnBrO,QAAQ;MACRnF,QAAQ;MACRyC,WAAW;MACXqE,QAAQ;MACRC,WAAW;MACXR,IAAI;MACJzE,QAAQ;MACRoO,WAAW;MACXN,mBAAmB;MACnBjJ,QAAQ;MACR5F,QAAQ;EACRyO,IAAAA,sBAAsB,GAAG,KAAA;EAC1B,GAAA,GAAG5O,KAAK,CAAA;IACT,MAAM;MAAEsG,WAAW;MAAElG,WAAW;EAAEsE,IAAAA,eAAAA;EAAe,GAAE,GAAGvE,QAAQ,CAAA;EAC9D,EAAA,MAAM0E,SAAS,GAAGJ,kBAAY,CAAUF,QAAQ,EAAEG,eAAe,CAAC,CAAA;IAClE,MAAMmO,aAAa,GAAG9N,iBAAW,CAA2B,eAAe,EAAE5E,QAAQ,EAAE0E,SAAS,CAAC,CAAA;IACjG,MAAMiO,wBAAwB,GAAG/N,iBAAW,CAC1C,0BAA0B,EAC1B5E,QAAQ,EACR0E,SAAS,CACV,CAAA;IACD,MAAMkO,iBAAiB,GAAGhO,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE0E,SAAS,CAAC,CAAA;IAC7G,MAAMmO,kBAAkB,GAAGjO,iBAAW,CAAgC,oBAAoB,EAAE5E,QAAQ,EAAE0E,SAAS,CAAC,CAAA;IAChH,MAAM3E,MAAM,GAAGE,WAAW,CAACsG,cAAc,CAACiM,OAAO,EAAEvT,QAAQ,CAAC,CAAA;EAC5D,EAAA,MAAM6T,OAAO,GAAGL,SAAS,CAACM,YAAM,CAAC,CAAA;IACjC,MAAM/P,QAAQ,GAAGgQ,kBAAY,CAC3B/S,WAAW,CAAC6G,UAAU,CAAC/G,MAAM,EAAE+S,OAAO,EAAE7T,QAAQ,EAAE8G,QAAQ,EAAEC,WAAW,CAAC,EACxEyM,SAAS,CACK,CAAA;EAEhB;;EAEG;IACH,MAAMQ,0BAA0B,GAAGlF,iBAAW,CAC5C,CAAC9O,QAAuB,EAAE0C,cAA+B,EAAEgB,EAAW,KAAI;EACxE,IAAA,MAAMuQ,KAAK,GAAGvQ,EAAE,IAAImQ,OAAO,CAAA;EAC3B,IAAA,OAAO/R,QAAQ,CAAC9B,QAAQ,EAAE0C,cAAc,EAAEuR,KAAK,CAAC,CAAA;EAClD,GAAC,EACD,CAACJ,OAAO,EAAE/R,QAAQ,CAAC,CACpB,CAAA;IAED,MAAMoS,cAAc,GAAGnB,iBAAiB,CAAUjS,MAAM,EAAE2E,SAAS,EAAE1B,QAAQ,EAAEhD,QAAQ,CAAC,CAAA;IACxF,MAAMyF,QAAQ,GAAG2N,OAAO,CAACvT,KAAK,CAAC4F,QAAQ,IAAIf,SAAS,CAACe,QAAQ,CAAC,CAAA;IAC9D,MAAMC,QAAQ,GAAG0N,OAAO,CAACvT,KAAK,CAAC6F,QAAQ,IAAIhB,SAAS,CAACgB,QAAQ,IAAI7F,KAAK,CAACE,MAAM,CAACsT,QAAQ,IAAItT,MAAM,CAACsT,QAAQ,CAAC,CAAA;EAC1G,EAAA,MAAMC,iBAAiB,GAAG5O,SAAS,CAAC6C,SAAS,CAAA;EAC7C;EACA,EAAA,MAAMA,SAAS,GAAG+L,iBAAiB,KAAKlS,SAAS,GAAGvB,KAAK,CAAC0H,SAAS,GAAG6L,OAAO,CAACE,iBAAiB,CAAC,CAAA;IAChG,MAAM3N,SAAS,GAAGyN,OAAO,CAACvT,KAAK,CAAC8F,SAAS,IAAIjB,SAAS,CAACiB,SAAS,CAAC,CAAA;IACjE,IAAI6D,MAAM,CAACC,IAAI,CAAC1J,MAAM,CAAC,CAACwD,MAAM,KAAK,CAAC,EAAE;EACpC,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;IAED,MAAMyE,YAAY,GAAG/H,WAAW,CAACgI,eAAe,CAAClI,MAAM,EAAEqE,QAAQ,EAAEG,eAAe,CAAC,CAAA;IAEnF,MAAM;MAAEgP,QAAQ;MAAE,GAAGjH,gBAAAA;KAAkB,GAAG5K,WAAW,IAAI,EAAE,CAAA;EAC3D;EACA,EAAA,MAAM0P,aAAa,GAAG7E,wBAAI,CAACnI,QAAQ,EAAE,CAAC,eAAe,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC,CAAA;IACjF,IAAIoP,oBAAc,IAAIpC,aAAa,EAAE;EACnCA,IAAAA,aAAa,CAACoC,oBAAc,CAAC,GAAGjH,wBAAI,CAAC6E,aAAa,CAACoC,oBAAc,CAAC,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAA;EAC7F,GAAA;EAED,EAAA,MAAMvB,KAAK,GACTpN,cAAC,CAAAsO,cAAc;SACTtT,KAAK;EACTkB,IAAAA,QAAQ,EAAEkS,0BAA0B;EACpCjQ,IAAAA,QAAQ,EAAEA,QAAQ;EAClBjD,IAAAA,MAAM,EAAEA,MAAM;EACdqE,IAAAA,QAAQ,EAAEgN,aAAa;EACvB3L,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,IAAAA,SAAS,EAAEA,SAAS;EACpB5B,IAAAA,SAAS,EAAEA,SAAS;EACpBjE,IAAAA,WAAW,EAAE4K,gBAAgB;EAC7BnG,IAAAA,WAAW,EAAEA,WAAW;EACxBF,IAAAA,SAAS,EAAEsN,QAAAA;EACX,GAAA,CACH,CAAA;EAED,EAAA,MAAM5Q,EAAE,GAAGK,QAAQ,CAAC+P,YAAM,CAAC,CAAA;EAE3B;EACA,EAAA,IAAIhL,KAAK,CAAA;EACT,EAAA,IAAI0G,sBAAsB,EAAE;EAC1B1G,IAAAA,KAAK,GAAGvC,IAAI,CAAA;EACb,GAAA,MAAM;MACLuC,KAAK,GAAG6E,8BAAwB,IAAI7M,MAAM,GAAGyF,IAAI,GAAGd,SAAS,CAACwB,KAAK,IAAIrG,KAAK,CAACE,MAAM,CAACmG,KAAK,IAAInG,MAAM,CAACmG,KAAK,IAAIV,IAAI,CAAA;EAClH,GAAA;EAED,EAAA,MAAM8K,WAAW,GAAG5L,SAAS,CAAC4L,WAAW,IAAIzQ,KAAK,CAACE,MAAM,CAACuQ,WAAW,IAAIvQ,MAAM,CAACuQ,WAAW,IAAI,EAAE,CAAA;IAEjG,MAAMmD,eAAe,GAAG/O,SAAS,CAACgP,2BAA2B,GAAG7O,cAAC,CAAAgM,4BAAQ;gBAAEP,WAAAA;KAAW,CAAY,GAAGA,WAAW,CAAA;EAEhH,EAAA,MAAMqD,IAAI,GAAGjP,SAAS,CAACiP,IAAI,CAAA;EAC3B,EAAA,MAAMtC,MAAM,GAAG3M,SAAS,CAACgD,MAAM,KAAK,QAAQ,CAAA;EAE5C,EAAA,MAAMkM,UAAU,GAAG,CAAC,YAAY,EAAE,OAAO,EAAW,CAAA,MAAA,EAAAzB,mBAAa,CAACpS,MAAM,CAAC,EAAE,CAAC,CAAA;IAC5E,IAAI,CAACwH,SAAS,IAAIgM,QAAQ,IAAIA,QAAQ,CAAChQ,MAAM,GAAG,CAAC,EAAE;EACjDqQ,IAAAA,UAAU,CAACtS,IAAI,CAAC,kCAAkC,CAAC,CAAA;EACpD,GAAA;EACD,EAAA,IAAI8C,QAAQ,KAARA,IAAAA,IAAAA,QAAQ,eAARA,QAAQ,CAAEwP,UAAU,EAAE;EACxB,IAA2C;EACzCC,MAAAA,OAAO,CAACC,IAAI,CACV,yGAAyG,CAC1G,CAAA;EACF,KAAA;EACDF,IAAAA,UAAU,CAACtS,IAAI,CAAC8C,QAAQ,CAACwP,UAAU,CAAC,CAAA;EACrC,GAAA;IACD,IAAIlP,SAAS,CAACkP,UAAU,EAAE;EACxBA,IAAAA,UAAU,CAACtS,IAAI,CAACoD,SAAS,CAACkP,UAAU,CAAC,CAAA;EACtC,GAAA;EAED,EAAA,MAAMG,aAAa,GACjBlP,eAAC+N,iBAAiB,EAAA;EAChBe,IAAAA,IAAI,EAAEA,IAAI;EACV3Q,IAAAA,QAAQ,EAAEA,QAAQ;EAClBjD,IAAAA,MAAM,EAAEA,MAAM;EACdqE,IAAAA,QAAQ,EAAEA,QAAQ;MAClB4P,SAAS,EAAE,CAACzM,SAAS,IAAIgM,QAAQ,IAAIA,QAAQ,CAAChQ,MAAM,GAAG,CAAC;EACxDvD,IAAAA,QAAQ,EAAEA,QAAAA;EAAQ,GAAA,CAErB,CAAA;EACD;;EAEG;EACH,EAAA,MAAMiU,eAAe,GACnB1M,SAAS,IAAIxH,MAAM,CAAC0M,KAAK,IAAI1M,MAAM,CAACuK,KAAK,GAAGlJ,SAAS,GACnDyD,cAAC,CAAAgO,kBAAkB,EACjB;EAAAqB,IAAAA,MAAM,EAAEX,QAAQ;EAChB7R,IAAAA,WAAW,EAAEA,WAAW;EACxBsB,IAAAA,QAAQ,EAAEA,QAAQ;EAClBjD,IAAAA,MAAM,EAAEA,MAAM;EACdqE,IAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,IAAAA,QAAQ,EAAEA,QAAAA;EACV,GAAA,CACH,CAAA;EACH,EAAA,MAAMmU,UAAU,GAAkD;EAChE7D,IAAAA,WAAW,EACTzL,cAAC,CAAA8N,wBAAwB,EACvB;EAAAhQ,MAAAA,EAAE,EAAEyR,mBAAa,CAAIzR,EAAE,CAAC;EACxB2N,MAAAA,WAAW,EAAEmD,eAAe;EAC5B1T,MAAAA,MAAM,EAAEA,MAAM;EACdqE,MAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,MAAAA,QAAQ,EAAEA,QAAAA;EAAQ,KAAA,CAErB;EACDqU,IAAAA,cAAc,EAAE/D,WAAW;EAC3BqD,IAAAA,IAAI,EAAEI,aAAa;MACnBO,OAAO,EAAE,OAAOX,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGvS,SAAS;EACpD8S,IAAAA,MAAM,EAAED,eAAe;EACvBhO,IAAAA,SAAS,EAAEsB,SAAS,GAAGnG,SAAS,GAAGmS,QAAQ;MAC3C5Q,EAAE;MACFoF,KAAK;MACLsJ,MAAM;MACNtQ,QAAQ;MACRoO,WAAW;MACXN,mBAAmB;MACnBjJ,QAAQ;MACRH,QAAQ;MACRC,QAAQ;MACR6B,SAAS;MACTS,YAAY;MACZ4L,UAAU,EAAEA,UAAU,CAACW,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,EAAE;MACvC7D,KAAK,EAAEjM,SAAS,CAACiM,KAAK;MACtBxK,WAAW;MACXlH,QAAQ;MACRc,MAAM;MACNqE,QAAQ;EACRpE,IAAAA,QAAAA;KACD,CAAA;EAED,EAAA,MAAMyU,WAAW,GAAGzU,QAAQ,CAAC2I,MAAM,CAACqC,UAAU,CAAA;EAC9C,EAAA,MAAM0J,WAAW,GAAG1U,QAAQ,CAAC2I,MAAM,CAACgM,UAAU,CAAA;IAC9C,MAAMC,qBAAqB,GAAG,CAAAxQ,QAAQ,aAARA,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAARA,QAAQ,CAAG,UAAU,CAAC,KAAI,CAAAA,QAAQ,aAARA,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAARA,QAAQ,CAAG,4BAA4B,CAAC,MAAK,IAAI,CAAA;IAEzG,OACES,cAAA,CAAC6N,aAAa,EAAA;EAAA,IAAA,GAAKyB,UAAU;EAAAxK,IAAAA,QAAA,EAC3ByD,eACG,CAAAyH,mBAAA,EAAA;QAAAlL,QAAA,EAAA,CAAAsI,KAAK,EAMLlS,MAAM,CAAC0M,KAAK,IAAI,CAACmI,qBAAqB,IAAI,CAAC3U,WAAW,CAAC6U,QAAQ,CAAC/U,MAAM,CAAC,IACtE8E,cAAA,CAAC4P,WAAW,EAAA;EACVjP,QAAAA,IAAI,EAAEA,IAAI;EACVC,QAAAA,QAAQ,EAAEA,QAAQ;EAClBC,QAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,QAAAA,SAAS,EAAEA,SAAS;EACpB7F,QAAAA,WAAW,EAAEA,WAAW;EACxBzC,QAAAA,QAAQ,EAAEA,QAAQ;EAClBkH,QAAAA,WAAW,EAAEA,WAAW;EACxBJ,QAAAA,QAAQ,EAAEA,QAAQ;EAClB/C,QAAAA,QAAQ,EAAEA,QAAQ;EAClBgD,QAAAA,WAAW,EAAEA,WAAW;UACxBH,MAAM,EAAEhG,KAAK,CAACgG,MAAM;UACpB9E,QAAQ,EAAElB,KAAK,CAACkB,QAAQ;UACxB+E,OAAO,EAAEjG,KAAK,CAACiG,OAAO;UACtB8B,OAAO,EAAE7H,MAAM,CAAC0M,KAAK,CAACrN,GAAG,CAAEoT,OAAO,IAChCvS,WAAW,CAACsG,cAAc,CAACF,4BAAQ,CAACmM,OAAO,CAAC,GAAIA,OAAa,GAAI,EAAQ,EAAEvT,QAAQ,CAAC,CACrF;EACDe,QAAAA,QAAQ,EAAEA,QAAQ;EAClBD,QAAAA,MAAM,EAAEA,MAAM;EACdqE,QAAAA,QAAQ,EAAEA,QAAAA;SAAQ,CAErB,EACArE,MAAM,CAACuK,KAAK,IAAI,CAACsK,qBAAqB,IAAI,CAAC3U,WAAW,CAAC6U,QAAQ,CAAC/U,MAAM,CAAC,IACtE8E,cAAC,CAAA6P,WAAW,EACV;EAAAlP,QAAAA,IAAI,EAAEA,IAAI;EACVC,QAAAA,QAAQ,EAAEA,QAAQ;EAClBC,QAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,QAAAA,SAAS,EAAEA,SAAS;EACpB7F,QAAAA,WAAW,EAAEA,WAAW;EACxBzC,QAAAA,QAAQ,EAAEA,QAAQ;EAClBkH,QAAAA,WAAW,EAAEA,WAAW;EACxBJ,QAAAA,QAAQ,EAAEA,QAAQ;EAClB/C,QAAAA,QAAQ,EAAEA,QAAQ;EAClBgD,QAAAA,WAAW,EAAEA,WAAW;UACxBH,MAAM,EAAEhG,KAAK,CAACgG,MAAM;UACpB9E,QAAQ,EAAElB,KAAK,CAACkB,QAAQ;UACxB+E,OAAO,EAAEjG,KAAK,CAACiG,OAAO;UACtB8B,OAAO,EAAE7H,MAAM,CAACuK,KAAK,CAAClL,GAAG,CAAEoT,OAAO,IAChCvS,WAAW,CAACsG,cAAc,CAACF,4BAAQ,CAACmM,OAAO,CAAC,GAAIA,OAAa,GAAI,EAAQ,EAAEvT,QAAQ,CAAC,CACrF;EACDe,QAAAA,QAAQ,EAAEA,QAAQ;EAClBD,QAAAA,MAAM,EAAEA,MAAM;EACdqE,QAAAA,QAAQ,EAAEA,QAAAA;EACV,OAAA,CACH,CAAA;OACA,CAAA;EAAA,GAAA,CACW,CAAA;EAEpB,CAAA;EAEA;;EAEG;EACH,MAAMyE,WAA+F,SAAQlJ,eAE5G,CAAA;IACCoV,qBAAqBA,CAAC5R,SAAwC,EAAA;MAC5D,OAAO,CAAC2I,gBAAU,CAAC,IAAI,CAACjM,KAAK,EAAEsD,SAAS,CAAC,CAAA;EAC3C,GAAA;EAEAsB,EAAAA,MAAMA,GAAA;MACJ,OAAOI,eAAC0N,iBAAiB,EAAA;EAAA,MAAA,GAAc,IAAI,CAAC1S,KAAAA;QAAS,CAAA;EACvD,GAAA;EACD;;EC1VD;;;EAGG;EACH,SAASgO,WAAWA,CAClBhO,KAA0B,EAAA;IAE1B,MAAM;MACJE,MAAM;MACNyF,IAAI;MACJpB,QAAQ;MACRpB,QAAQ;MACR/D,QAAQ;MACR2G,QAAQ;EACRH,IAAAA,QAAQ,GAAG,KAAK;EAChBC,IAAAA,QAAQ,GAAG,KAAK;EAChBC,IAAAA,SAAS,GAAG,KAAK;MACjB5E,QAAQ;MACR8E,MAAM;MACNC,OAAO;MACP9F,QAAQ;EACRiG,IAAAA,SAAAA;EACD,GAAA,GAAGpG,KAAK,CAAA;IACT,MAAM;MAAEqG,KAAK;EAAE8O,IAAAA,MAAAA;EAAQ,GAAA,GAAGjV,MAAM,CAAA;IAChC,MAAM;MAAE0H,OAAO;MAAEtB,WAAW;MAAElG,WAAW;EAAEsE,IAAAA,eAAAA;EAAe,GAAE,GAAGvE,QAAQ,CAAA;EACvE,EAAA,MAAMoI,WAAW,GAAGnI,WAAW,CAAC6U,QAAQ,CAAC/U,MAAM,CAAC,GAAGsI,iBAAW,CAACtI,MAAM,CAAC,GAAGqB,SAAS,CAAA;EAClF,EAAA,IAAI6T,aAAa,GAAG7M,WAAW,GAAG,QAAQ,GAAG,MAAM,CAAA;IACnD,IAAI4M,MAAM,IAAIE,eAAS,CAAUnV,MAAM,EAAEiV,MAAM,EAAEvN,OAAO,CAAC,EAAE;EACzDwN,IAAAA,aAAa,GAAGD,MAAM,CAAA;EACvB,GAAA;IACD,MAAM;EAAEtN,IAAAA,MAAM,GAAGuN,aAAa;EAAEzN,IAAAA,WAAW,GAAG,EAAE;EAAEtB,IAAAA,KAAK,EAAEyB,OAAO;MAAE,GAAGC,OAAAA;EAAO,GAAE,GAAGtD,kBAAY,CAAUF,QAAQ,CAAC,CAAA;IAChH,MAAM4D,YAAY,GAAG/H,WAAW,CAACgI,eAAe,CAAClI,MAAM,EAAEqE,QAAQ,EAAEG,eAAe,CAAC,CAAA;EACnF,EAAA,MAAMwD,KAAK,GAAGJ,OAAO,IAAIzB,KAAK,IAAIV,IAAI,CAAA;IACtC,MAAMqC,MAAM,GAAGC,eAAS,CAAU/H,MAAM,EAAE2H,MAAM,EAAED,OAAO,CAAC,CAAA;IAC1D,OACE5C,cAAC,CAAAgD,MAAM;EACLD,IAAAA,OAAO,EAAE;EAAE,MAAA,GAAGA,OAAO;EAAEQ,MAAAA,WAAAA;OAAa;EACpCrI,IAAAA,MAAM,EAAEA,MAAM;EACdqE,IAAAA,QAAQ,EAAEA,QAAQ;MAClBzB,EAAE,EAAEK,QAAQ,CAACC,GAAG;EAChBuC,IAAAA,IAAI,EAAEA,IAAI;EACVuC,IAAAA,KAAK,EAAEA,KAAK;MACZI,SAAS,EAAE,CAACH,YAAY;EACxBtF,IAAAA,KAAK,EAAEzD,QAAQ;EACf8B,IAAAA,QAAQ,EAAEA,QAAQ;EAClB8E,IAAAA,MAAM,EAAEA,MAAM;EACdC,IAAAA,OAAO,EAAEA,OAAO;EAChBF,IAAAA,QAAQ,EAAEA,QAAQ;EAClBH,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,QAAQ,EAAEA,QAAQ;EAClBS,IAAAA,WAAW,EAAEA,WAAW;EACxBR,IAAAA,SAAS,EAAEA,SAAS;EACpB3F,IAAAA,QAAQ,EAAEA,QAAQ;EAClBwH,IAAAA,WAAW,EAAEA,WAAW;EACxBvB,IAAAA,SAAS,EAAEA,SAAAA;EAAS,GAAA,CACpB,CAAA;EAEN;;ECjEA;;;;EAIG;EACH,SAASkP,SAASA,CAChBtV,KAA0B,EAAA;IAE1B,MAAM;MAAEZ,QAAQ;EAAE8B,IAAAA,QAAAA;EAAU,GAAA,GAAGlB,KAAK,CAAA;EACpCuV,EAAAA,eAAS,CAAC,MAAK;MACb,IAAInW,QAAQ,KAAKmC,SAAS,EAAE;QAC1BL,QAAQ,CAAC,IAAoB,CAAC,CAAA;EAC/B,KAAA;EACH,GAAC,EAAE,CAAC9B,QAAQ,EAAE8B,QAAQ,CAAC,CAAC,CAAA;EAExB,EAAA,OAAO,IAAI,CAAA;EACb;;ECRA,SAAS4H,MAAMA,GAAA;IAKb,OAAO;EACLqC,IAAAA,UAAU,EAAEqK,UAAgB;EAC5B3V,IAAAA,UAAU,EAAEA,UAAuC;EACnD;MACAuK,YAAY;MACZuD,WAAW;MACXe,WAAW;EACXoG,IAAAA,UAAU,EAAEU,UAAgB;MAC5BxM,WAAW;MACXgF,WAAW;EACXsH,IAAAA,SAAAA;KACD,CAAA;EACH;;EClBA;;;;EAIG;EACqB,SAAAG,6BAA6BA,CAInDzV,KAA0C,EAAA;IAC1C,MAAM;MAAEmD,QAAQ;MAAEsN,WAAW;MAAEtQ,QAAQ;MAAED,MAAM;EAAEqE,IAAAA,QAAAA;EAAU,GAAA,GAAGvE,KAAK,CAAA;IACnE,MAAM+H,OAAO,GAAGtD,kBAAY,CAAUF,QAAQ,EAAEpE,QAAQ,CAACuE,eAAe,CAAC,CAAA;IACzE,MAAM;MAAEwD,KAAK,EAAEC,YAAY,GAAG,IAAA;EAAI,GAAE,GAAGJ,OAAO,CAAA;EAC9C,EAAA,IAAI,CAAC0I,WAAW,IAAI,CAACtI,YAAY,EAAE;EACjC,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;IACD,MAAM2K,wBAAwB,GAAG/N,iBAAW,CAC1C,0BAA0B,EAC1B5E,QAAQ,EACR4H,OAAO,CACR,CAAA;IACD,OACE/C,cAAA,CAAC8N,wBAAwB,EAAA;EACvBhQ,IAAAA,EAAE,EAAEyR,mBAAa,CAAIpR,QAAQ,CAAC;EAC9BsN,IAAAA,WAAW,EAAEA,WAAW;EACxBvQ,IAAAA,MAAM,EAAEA,MAAM;EACdqE,IAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,IAAAA,QAAQ,EAAEA,QAAAA;EACV,GAAA,CAAA,CAAA;EAEN;;ECrCA;;;EAGG;EACqB,SAAAuV,sBAAsBA,CAI5C1V,KAA0C,EAAA;IAC1C,MAAM;MACJ8J,QAAQ;MACRtC,SAAS;MACT5B,QAAQ;MACRoE,UAAU;MACVE,WAAW;MACXD,SAAS;MACTE,SAAS;MACTJ,OAAO;MACPhJ,KAAK;MACLC,gBAAgB;MAChBY,gBAAgB;MAChBS,cAAc;MACdwD,QAAQ;MACR1F,QAAQ;EACRoE,IAAAA,QAAAA;EACD,GAAA,GAAGvE,KAAK,CAAA;IACT,MAAM;MAAE2V,UAAU;MAAEC,cAAc;MAAEC,YAAY;EAAEC,IAAAA,YAAAA;EAAY,GAAE,GAAG3V,QAAQ,CAAC4V,SAAS,CAACC,eAAe,CAAA;EACrG,EAAA,MAAMC,QAAQ,GAAkB;EAC9BC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,WAAW,EAAE,CAAC;EACdC,IAAAA,YAAY,EAAE,CAAC;EACfC,IAAAA,UAAU,EAAE,MAAA;KACb,CAAA;IACD,OACE9I,eAAK,CAAA,KAAA,EAAA;EAAA/F,IAAAA,SAAS,EAAEA,SAAS;iBACvBxC,cAAK,CAAA,KAAA,EAAA;EAAAwC,MAAAA,SAAS,EAAEwC,UAAU,GAAG,UAAU,GAAG,WAAW;EAAGF,MAAAA,QAAA,EAAAA,QAAAA;QAAe,EACtEE,UAAU,IACThF;EAAKwC,MAAAA,SAAS,EAAC,6BAA6B;EAAAsC,MAAAA,QAAA,EAC1CyD;EACE/F,QAAAA,SAAS,EAAC,WAAW;EACrBsJ,QAAAA,KAAK,EAAE;EACLwF,UAAAA,OAAO,EAAE,MAAM;EACfC,UAAAA,cAAc,EAAE,cAAA;WACjB;UAAAzM,QAAA,EAAA,CAEA,CAACG,SAAS,IAAIC,WAAW,KACxBlF,cAAA,CAAC6Q,YAAY,EAAA;EACX/E,UAAAA,KAAK,EAAEmF,QAAQ;EACfrQ,UAAAA,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ,IAAI,CAACoE,SAAS;YAC5CuM,OAAO,EAAEnU,cAAc,CAACtB,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC;EACzCwD,UAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,UAAAA,QAAQ,EAAEA,QAAAA;WACV,CACH,EACA,CAAC8J,SAAS,IAAIC,WAAW,KACxBlF,cAAC,CAAA4Q,cAAc,EACb;EAAA9E,UAAAA,KAAK,EAAEmF,QAAQ;EACfrQ,UAAAA,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ,IAAI,CAACqE,WAAW;YAC9CsM,OAAO,EAAEnU,cAAc,CAACtB,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC;EACzCwD,UAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,UAAAA,QAAQ,EAAEA,QAAAA;EAAQ,SAAA,CAErB,EACA4J,OAAO,IACN/E,eAAC2Q,UAAU,EAAA;EACT7E,UAAAA,KAAK,EAAEmF,QAAQ;YACfrQ,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9B2Q,UAAAA,OAAO,EAAExV,gBAAgB,CAACD,KAAK,CAAC;EAChCwD,UAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,UAAAA,QAAQ,EAAEA,QAAAA;EAAQ,SAAA,CAErB,EACAgK,SAAS,IACRnF,cAAC,CAAA8Q,YAAY;EACXhF,UAAAA,KAAK,EAAEmF,QAAQ;YACfrQ,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9B2Q,UAAAA,OAAO,EAAE5U,gBAAgB,CAACb,KAAK,CAAC;EAChCwD,UAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,UAAAA,QAAQ,EAAEA,QAAAA;YAEb,CAAA;SAAA,CAAA;QAGN,CAAA;EAAA,GAAA,CACG,CAAA;EAEV;;EC/EA;;;EAGG;EACqB,SAAAsW,kBAAkBA,CAIxCzW,KAAuC,EAAA;IACvC,MAAM;MACJ2G,MAAM;MACNa,SAAS;MACT5B,QAAQ;MACRzC,QAAQ;MACRoB,QAAQ;MACRjE,KAAK;MACLK,UAAU;MACVkF,QAAQ;MACR1F,QAAQ;MACR4F,QAAQ;MACR7F,MAAM;EACNmG,IAAAA,KAAAA;EAAK,GACN,GAAGrG,KAAK,CAAA;EACT,EAAA,MAAM6E,SAAS,GAAGJ,kBAAY,CAAUF,QAAQ,CAAC,CAAA;IACjD,MAAMkR,6BAA6B,GAAG1Q,iBAAW,CAC/C,+BAA+B,EAC/B5E,QAAQ,EACR0E,SAAS,CACV,CAAA;IACD,MAAM6Q,sBAAsB,GAAG3Q,iBAAW,CACxC,wBAAwB,EACxB5E,QAAQ,EACR0E,SAAS,CACV,CAAA;IACD,MAAM6R,uBAAuB,GAAG3R,iBAAW,CACzC,yBAAyB,EACzB5E,QAAQ,EACR0E,SAAS,CACV,CAAA;EACD;IACA,MAAM;EACJmR,IAAAA,eAAe,EAAE;EAAEW,MAAAA,SAAAA;EAAW,KAAA;KAC/B,GAAGxW,QAAQ,CAAC4V,SAAS,CAAA;IACtB,OACExI,eAAU,CAAA,UAAA,EAAA;EAAA/F,IAAAA,SAAS,EAAEA,SAAS;MAAE1E,EAAE,EAAEK,QAAQ,CAACC,GAAG;EAC9C0G,IAAAA,QAAA,EAAA,CAAA9E,cAAA,CAAC0R,uBAAuB,EAAA;EACtBvT,MAAAA,QAAQ,EAAEA,QAAQ;EAClBkD,MAAAA,KAAK,EAAExB,SAAS,CAACwB,KAAK,IAAIA,KAAK;EAC/BN,MAAAA,QAAQ,EAAEA,QAAQ;EAClB7F,MAAAA,MAAM,EAAEA,MAAM;EACdqE,MAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,MAAAA,QAAQ,EAAEA,QAAAA;EACV,KAAA,CAAA,EACF6E,cAAC,CAAAyQ,6BAA6B;EAC5BtS,MAAAA,QAAQ,EAAEA,QAAQ;EAClBsN,MAAAA,WAAW,EAAE5L,SAAS,CAAC4L,WAAW,IAAIvQ,MAAM,CAACuQ,WAAW;EACxDvQ,MAAAA,MAAM,EAAEA,MAAM;EACdqE,MAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,MAAAA,QAAQ,EAAEA,QAAAA;QACV,EACF6E,cAAA,CAAA,KAAA,EAAA;EAAKwC,MAAAA,SAAS,EAAC,qBAAqB;kBACjClH,KAAK,IACJA,KAAK,CAACf,GAAG,CAAC,CAAC;UAAEE,GAAG;UAAE,GAAGmX,SAAAA;EAAgD,OAAA,KACnE5R,cAAC,CAAA0Q,sBAAsB,EAAe;UAAA,GAAAkB,SAAAA;SAAT,EAAAnX,GAAG,CACjC,CAAA;EAAC,KAAA,CACA,EACLkH,MAAM,IACL3B,eAAC2R,SAAS,EAAA;EACRnP,MAAAA,SAAS,EAAC,gBAAgB;EAC1BgP,MAAAA,OAAO,EAAE7V,UAAU;QACnBiF,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9BtB,MAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,MAAAA,QAAQ,EAAEA,QAAAA;EACV,KAAA,CACH,CAAA;EACQ,GAAA,CAAA,CAAA;EAEf;;EC5EA;;;;EAIG;EACqB,SAAAuW,uBAAuBA,CAI7C1W,KAAoC,EAAA;IACpC,MAAM;MAAEmD,QAAQ;MAAEkD,KAAK;MAAEnG,MAAM;MAAEqE,QAAQ;MAAEwB,QAAQ;EAAE5F,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IACvE,MAAM+H,OAAO,GAAGtD,kBAAY,CAAUF,QAAQ,EAAEpE,QAAQ,CAACuE,eAAe,CAAC,CAAA;IACzE,MAAM;MAAEwD,KAAK,EAAEC,YAAY,GAAG,IAAA;EAAI,GAAE,GAAGJ,OAAO,CAAA;EAC9C,EAAA,IAAI,CAAC1B,KAAK,IAAI,CAAC8B,YAAY,EAAE;EAC3B,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;IACD,MAAM0O,kBAAkB,GAAiD9R,iBAAW,CAClF,oBAAoB,EACpB5E,QAAQ,EACR4H,OAAO,CACR,CAAA;IACD,OACE/C,cAAA,CAAC6R,kBAAkB,EAAA;EACjB/T,IAAAA,EAAE,EAAEgU,aAAO,CAAI3T,QAAQ,CAAC;EACxBkD,IAAAA,KAAK,EAAEA,KAAK;EACZN,IAAAA,QAAQ,EAAEA,QAAQ;EAClB7F,IAAAA,MAAM,EAAEA,MAAM;EACdqE,IAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,IAAAA,QAAQ,EAAEA,QAAAA;EAAQ,GAAA,CAClB,CAAA;EAEN;;EC/BA;;;;;EAKG;EACqB,SAAA4W,iBAAiBA,CAIvC/W,KAAsC,EAAA;IACtC,MAAM;MACJ8C,EAAE;MACF6C,IAAI;EAAE;MACN9C,KAAK;MACLgD,QAAQ;MACRD,QAAQ;MACRE,SAAS;MACTE,MAAM;MACNC,OAAO;MACP/E,QAAQ;MACR8V,gBAAgB;MAChBjP,OAAO;MACP7H,MAAM;MACNqE,QAAQ;MACR+B,WAAW;MACXnG,QAAQ;MACRiG,SAAS;MACTjC,IAAI;MACJmE,SAAS;EAAE;MACXZ,SAAS;EAAE;MACX,GAAGuP,IAAAA;EAAI,GACR,GAAGjX,KAAK,CAAA;EAET;EACA;IACA,IAAI,CAAC8C,EAAE,EAAE;EACPkR,IAAAA,OAAO,CAACkD,GAAG,CAAC,WAAW,EAAElX,KAAK,CAAC,CAAA;MAC/B,MAAM,IAAImX,KAAK,CAAC,CAAmBhG,gBAAAA,EAAAA,IAAI,CAACC,SAAS,CAACpR,KAAK,CAAG,CAAA,CAAA,CAAC,CAAA;EAC5D,GAAA;EACD,EAAA,MAAMoX,UAAU,GAAG;EACjB,IAAA,GAAGH,IAAI;EACP,IAAA,GAAGI,mBAAa,CAAUnX,MAAM,EAAEiE,IAAI,EAAE4D,OAAO,CAAA;KAChD,CAAA;EAED,EAAA,IAAIuP,UAAU,CAAA;IACd,IAAIF,UAAU,CAACjT,IAAI,KAAK,QAAQ,IAAIiT,UAAU,CAACjT,IAAI,KAAK,SAAS,EAAE;MACjEmT,UAAU,GAAGzU,KAAK,IAAIA,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE,CAAA;EAC/C,GAAA,MAAM;EACLyU,IAAAA,UAAU,GAAGzU,KAAK,IAAI,IAAI,GAAG,EAAE,GAAGA,KAAK,CAAA;EACxC,GAAA;EAED,EAAA,MAAM0U,SAAS,GAAGrJ,iBAAW,CAC3B,CAAC;EAAEsJ,IAAAA,MAAM,EAAE;EAAE3U,MAAAA,KAAAA;;EAAwC,GAAA,KAAK3B,QAAQ,CAAC2B,KAAK,KAAK,EAAE,GAAGkF,OAAO,CAAC0P,UAAU,GAAG5U,KAAK,CAAC,EAC7G,CAAC3B,QAAQ,EAAE6G,OAAO,CAAC,CACpB,CAAA;EACD,EAAA,MAAM2P,OAAO,GAAGxJ,iBAAW,CAAC,CAAC;EAAEsJ,IAAAA,MAAM,EAAE;EAAE3U,MAAAA,KAAAA;EAAO,KAAA;EAAA,GAAgC,KAAKmD,MAAM,CAAClD,EAAE,EAAED,KAAK,CAAC,EAAE,CAACmD,MAAM,EAAElD,EAAE,CAAC,CAAC,CAAA;EACrH,EAAA,MAAM6U,QAAQ,GAAGzJ,iBAAW,CAC1B,CAAC;EAAEsJ,IAAAA,MAAM,EAAE;EAAE3U,MAAAA,KAAAA;EAAO,KAAA;EAAA,GAAgC,KAAKoD,OAAO,CAACnD,EAAE,EAAED,KAAK,CAAC,EAC3E,CAACoD,OAAO,EAAEnD,EAAE,CAAC,CACd,CAAA;IAED,OACEyK;iBACEvI,cACE,CAAA,OAAA,EAAA;EAAAlC,MAAAA,EAAE,EAAEA,EAAE;EACN6C,MAAAA,IAAI,EAAE7C,EAAE;EACR0E,MAAAA,SAAS,EAAC,cAAc;EACxBgM,MAAAA,QAAQ,EAAE3N,QAAQ;EAClBD,MAAAA,QAAQ,EAAEA,QAAQ;EAClBgS,MAAAA,SAAS,EAAE9R,SAAS;EACpBjD,MAAAA,KAAK,EAAEyU,UAAU;EACb,MAAA,GAAAF,UAAU;QACdS,IAAI,EAAE3X,MAAM,CAAC4X,QAAQ,GAAGC,gBAAU,CAAIjV,EAAE,CAAC,GAAGvB,SAAS;QACrDL,QAAQ,EAAE8V,gBAAgB,IAAIO,SAAS;EACvCvR,MAAAA,MAAM,EAAE0R,OAAO;EACfzR,MAAAA,OAAO,EAAE0R,QAAQ;4BACCK,wBAAkB,CAAIlV,EAAE,EAAE,CAAC,CAAC5C,MAAM,CAAC4X,QAAQ,CAAA;EAC7D,KAAA,CAAA,EACDzY,KAAK,CAACC,OAAO,CAACY,MAAM,CAAC4X,QAAQ,CAAC,IAC7B9S,cAAiC,CAAA,UAAA,EAAA;EAAAlC,MAAAA,EAAE,EAAEiV,gBAAU,CAAIjV,EAAE,CAAC;EAAAgH,MAAAA,QAAA,EAClD5J,MAAM,CAAC4X,QAAqB,CAC3BnP,MAAM,CAACzI,MAAM,CAACsN,OAAO,IAAI,CAACtN,MAAM,CAAC4X,QAAQ,CAAC1T,QAAQ,CAAClE,MAAM,CAACsN,OAAO,CAAC,GAAI,CAACtN,MAAM,CAACsN,OAAO,CAAc,GAAG,EAAE,CAAC,CACzGjO,GAAG,CAAE0Y,OAAY,IAAI;UACpB,OAAOjT;EAAsBnC,UAAAA,KAAK,EAAEoV,OAAAA;WAAhB,EAAAA,OAAO,CAAoB,CAAA;SAChD,CAAA;SALsB,CAAA,SAAA,EAAAnV,IAAI,CAOhC,CAAA;EACA,GAAA,CAAA,CAAA;EAEP;;ECnGA;EACG;EACW,SAAUoV,YAAYA,CAIlC;EAAE3T,EAAAA,QAAAA;EAAsC,CAAA,EAAA;IACxC,MAAM;MAAE4T,UAAU;MAAEC,QAAQ;MAAEpY,KAAK,EAAEqY,iBAAiB,GAAG,EAAA;KAAI,GAAGC,4BAAsB,CAAU/T,QAAQ,CAAC,CAAA;EACzG,EAAA,IAAI6T,QAAQ,EAAE;EACZ,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;IACD,OACEpT;gBACEA,cAAQ,CAAA,QAAA,EAAA;EAAAb,MAAAA,IAAI,EAAC,QAAQ;EAAA,MAAA,GAAKkU,iBAAiB;EAAE7Q,MAAAA,SAAS,GAAkB6Q,aAAAA,EAAAA,iBAAiB,CAAC7Q,SAAS,IAAI,EAAE,CAAE,CAAA;kBACxG2Q,UAAAA;OAAU,CAAA;EAET,GAAA,CAAA,CAAA;EAEV;;EClBwB,SAAAI,UAAUA,CAChCvY,KAA+B,EAAA;IAE/B,MAAM;EAAEwY,IAAAA,QAAQ,GAAG,SAAS;MAAEC,IAAI;MAAEjR,SAAS;MAAEjD,QAAQ;MAAEpE,QAAQ;MAAE,GAAGuY,UAAAA;EAAY,GAAA,GAAG1Y,KAAK,CAAA;IAC1F,OACEgF,cAAQ,CAAA,QAAA,EAAA;EAAAb,IAAAA,IAAI,EAAC,QAAQ;EAACqD,IAAAA,SAAS,EAAa,CAAA,QAAA,EAAAgR,QAAY,CAAA,CAAA,EAAAhR,UAAW,CAAA;EAAM,IAAA,GAAAkR,UAAU;EACjF5O,IAAAA,QAAA,EAAA9E,cAAA,CAAA,GAAA,EAAA;QAAGwC,SAAS,EAAyB,uBAAAiR,IAAM,CAAA,CAAA;OAAA,CAAA;EACpC,GAAA,CAAA,CAAA;EAEb,CAAA;EAEM,SAAU9C,UAAUA,CACxB3V,KAA+B,EAAA;IAE/B,MAAM;EACJG,IAAAA,QAAQ,EAAE;EAAE0D,MAAAA,eAAAA;EAAiB,KAAA;EAAA,GAC9B,GAAG7D,KAAK,CAAA;IACT,OACEgF,cAAC,CAAAuT,UAAU,EACT;EAAAlS,IAAAA,KAAK,EAAExC,eAAe,CAACG,wBAAkB,CAAC2R,UAAU,CAAC;EACrDnO,IAAAA,SAAS,EAAC,iBAAiB;EAAA,IAAA,GACvBxH,KAAK;EACTyY,IAAAA,IAAI,EAAC,MAAA;EACL,GAAA,CAAA,CAAA;EAEN,CAAA;EAEM,SAAU7C,cAAcA,CAC5B5V,KAA+B,EAAA;IAE/B,MAAM;EACJG,IAAAA,QAAQ,EAAE;EAAE0D,MAAAA,eAAAA;EAAiB,KAAA;EAAA,GAC9B,GAAG7D,KAAK,CAAA;IACT,OACEgF,cAAC,CAAAuT,UAAU,EACT;EAAAlS,IAAAA,KAAK,EAAExC,eAAe,CAACG,wBAAkB,CAAC4R,cAAc,CAAC;EACzDpO,IAAAA,SAAS,EAAC,sBAAsB;EAAA,IAAA,GAC5BxH,KAAK;EACTyY,IAAAA,IAAI,EAAC,YAAA;EACL,GAAA,CAAA,CAAA;EAEN,CAAA;EAEM,SAAU5C,YAAYA,CAC1B7V,KAA+B,EAAA;IAE/B,MAAM;EACJG,IAAAA,QAAQ,EAAE;EAAE0D,MAAAA,eAAAA;EAAiB,KAAA;EAAA,GAC9B,GAAG7D,KAAK,CAAA;IACT,OACEgF,cAAC,CAAAuT,UAAU,EACT;EAAAlS,IAAAA,KAAK,EAAExC,eAAe,CAACG,wBAAkB,CAAC6R,YAAY,CAAC;EACvDrO,IAAAA,SAAS,EAAC,oBAAoB;EAAA,IAAA,GAC1BxH,KAAK;EACTyY,IAAAA,IAAI,EAAC,UAAA;EACL,GAAA,CAAA,CAAA;EAEN,CAAA;EAEM,SAAU3C,YAAYA,CAC1B9V,KAA+B,EAAA;IAE/B,MAAM;EACJG,IAAAA,QAAQ,EAAE;EAAE0D,MAAAA,eAAAA;EAAiB,KAAA;EAAA,GAC9B,GAAG7D,KAAK,CAAA;IACT,OACEgF,cAAA,CAACuT,UAAU,EAAA;EACTlS,IAAAA,KAAK,EAAExC,eAAe,CAACG,wBAAkB,CAAC8R,YAAY,CAAC;EACvDtO,IAAAA,SAAS,EAAC,mBAAmB;EACzB,IAAA,GAAAxH,KAAK;EACTwY,IAAAA,QAAQ,EAAC,QAAQ;EACjBC,IAAAA,IAAI,EAAC,QAAA;EACL,GAAA,CAAA,CAAA;EAEN;;ECxEA;EACG;EACqB,SAAA9B,SAASA,CAAoF;IACnHnP,SAAS;IACTgP,OAAO;IACP5Q,QAAQ;EACRzF,EAAAA,QAAAA;EACyB,CAAA,EAAA;IACzB,MAAM;EAAE0D,IAAAA,eAAAA;EAAiB,GAAA,GAAG1D,QAAQ,CAAA;IACpC,OACE6E,cAAK,CAAA,KAAA,EAAA;EAAAwC,IAAAA,SAAS,EAAC,KAAK;gBAClBxC,cAAG,CAAA,GAAA,EAAA;QAAAwC,SAAS,EAAE,CAAuCA,oCAAAA,EAAAA,SAAS,CAAE,CAAA;kBAC9DxC,cAAC,CAAAuT,UAAU,EACT;EAAAC,QAAAA,QAAQ,EAAC,MAAM;EACfC,QAAAA,IAAI,EAAC,MAAM;EACXjR,QAAAA,SAAS,EAAC,mBAAmB;EAC7BnB,QAAAA,KAAK,EAAExC,eAAe,CAACG,wBAAkB,CAAC2S,SAAS,CAAC;EACpDH,QAAAA,OAAO,EAAEA,OAAO;EAChB5Q,QAAAA,QAAQ,EAAEA,QAAQ;EAClBzF,QAAAA,QAAQ,EAAEA,QAAAA;SACV,CAAA;OAAA,CAAA;EAEA,GAAA,CAAA,CAAA;EAEV;;ECtBA,SAASwY,eAAeA,GAAA;IAKtB,OAAO;MACLT,YAAY;MACZvB,SAAS;MACThB,UAAU;MACVC,cAAc;MACdC,YAAY;EACZC,IAAAA,YAAAA;KACD,CAAA;EACH;;ECjBA;;;EAGG;EACqB,SAAA8C,gBAAgBA,CAItC5Y,KAAqC,EAAA;IACrC,MAAM;MAAE8C,EAAE;EAAE2N,IAAAA,WAAAA;EAAa,GAAA,GAAGzQ,KAAK,CAAA;IACjC,IAAI,CAACyQ,WAAW,EAAE;EAChB,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;EACD,EAAA,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;MACnC,OACEzL,cAAA,CAAA,GAAA,EAAA;EAAGlC,MAAAA,EAAE,EAAEA,EAAE;EAAE0E,MAAAA,SAAS,EAAC,mBAAmB;EAAAsC,MAAAA,QAAA,EACrC2G,WAAAA;EAAW,KAAA,CACV,CAAA;EAEP,GAAA,MAAM;MACL,OACEzL,cAAA,CAAA,KAAA,EAAA;EAAKlC,MAAAA,EAAE,EAAEA,EAAE;EAAE0E,MAAAA,SAAS,EAAC,mBAAmB;EAAAsC,MAAAA,QAAA,EACvC2G,WAAAA;EAAW,KAAA,CACR,CAAA;EAET,GAAA;EACH;;ECnBA;;;EAGG;EACqB,SAAAoI,SAASA,CAAoF;IACnHxE,MAAM;EACNlU,EAAAA,QAAAA;EACwB,CAAA,EAAA;IACxB,MAAM;EAAE0D,IAAAA,eAAAA;EAAiB,GAAA,GAAG1D,QAAQ,CAAA;IACpC,OACEoN,eAAK,CAAA,KAAA,EAAA;EAAA/F,IAAAA,SAAS,EAAC,2BAA2B;iBACxCxC,cAAK,CAAA,KAAA,EAAA;EAAAwC,MAAAA,SAAS,EAAC,eAAe;kBAC5BxC,cAAI,CAAA,IAAA,EAAA;EAAAwC,QAAAA,SAAS,EAAC,aAAa;EAAAsC,QAAAA,QAAA,EAAEjG,eAAe,CAACG,wBAAkB,CAAC8U,WAAW,CAAA;SAAO,CAAA;EAAA,KAAA,CAC9E,EACN9T,cAAI,CAAA,IAAA,EAAA;EAAAwC,MAAAA,SAAS,EAAC,YAAY;QAAAsC,QAAA,EACvBuK,MAAM,CAAC9U,GAAG,CAAC,CAACwZ,KAA0B,EAAE/W,CAAS,KAAI;UACpD,OACEgD,cAAA,CAAA,IAAA,EAAA;EAAYwC,UAAAA,SAAS,EAAC,6BAA6B;YAAAsC,QAAA,EAChDiP,KAAK,CAACC,KAAAA;WAAK,EADLhX,CAAC,CAEL,CAAA;SAER,CAAA;EAAC,KAAA,CACC,CAAA;EACD,GAAA,CAAA,CAAA;EAEV;;EClCA,MAAMiX,uBAAqB,GAAG,GAAG,CAAA;EAWjC;;;EAGG;EACqB,SAAAC,KAAKA,CAAClZ,KAAiB,EAAA;IAC7C,MAAM;MAAEkI,KAAK;MAAEnC,QAAQ;EAAEjD,IAAAA,EAAAA;EAAE,GAAE,GAAG9C,KAAK,CAAA;IACrC,IAAI,CAACkI,KAAK,EAAE;EACV,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;IACD,OACEqF;EAAO/F,IAAAA,SAAS,EAAC,eAAe;EAAC2R,IAAAA,OAAO,EAAErW,EAAE;MACzCgH,QAAA,EAAA,CAAA5B,KAAK,EACLnC,QAAQ,IAAIf,cAAM,CAAA,MAAA,EAAA;EAAAwC,MAAAA,SAAS,EAAC,UAAU;kBAAEyR,uBAAAA;EAAqB,KAAA,CAAQ,CAAA;EAChE,GAAA,CAAA,CAAA;EAEZ;;ECfA;;;;EAIG;EACqB,SAAApG,aAAaA,CAInC7S,KAAkC,EAAA;IAClC,MAAM;MAAE8C,EAAE;MAAEoF,KAAK;MAAE4B,QAAQ;MAAEuK,MAAM;MAAEP,IAAI;MAAErD,WAAW;MAAEe,MAAM;MAAEzL,QAAQ;MAAEoC,YAAY;MAAEhI,QAAQ;EAAEoE,IAAAA,QAAAA;EAAQ,GAAE,GAAGvE,KAAK,CAAA;EACpH,EAAA,MAAM6E,SAAS,GAAGJ,kBAAY,CAACF,QAAQ,CAAC,CAAA;IACxC,MAAM6U,wBAAwB,GAAGrU,iBAAW,CAC1C,0BAA0B,EAC1B5E,QAAQ,EACR0E,SAAS,CACV,CAAA;EACD,EAAA,IAAI2M,MAAM,EAAE;MACV,OAAOxM;EAAKwC,MAAAA,SAAS,EAAC,QAAQ;EAAEsC,MAAAA,QAAA,EAAAA,QAAAA;QAAe,CAAA;EAChD,GAAA;IACD,OACEyD,eAAC,CAAA6L,wBAAwB;SAAKpZ,KAAK;EAAA8J,IAAAA,QAAA,EAAA,CAChC3B,YAAY,IAAInD,cAAA,CAACkU,KAAK,EAAC;EAAAhR,MAAAA,KAAK,EAAEA,KAAK;EAAEnC,MAAAA,QAAQ,EAAEA,QAAQ;EAAEjD,MAAAA,EAAE,EAAEA,EAAAA;EAAM,KAAA,CAAA,EACnEqF,YAAY,IAAIsI,WAAW,GAAGA,WAAW,GAAG,IAAI,EAChD3G,QAAQ,EACRuK,MAAM,EACNP,IAAI,CAAA;EAAA,GAAA,CACoB,CAAA;EAE/B;;ECtCA;;;EAGG;EACqB,SAAAd,kBAAkBA,CAIxChT,KAA+B,EAAA;IAC/B,MAAM;EAAEqU,IAAAA,MAAM,GAAG,EAAE;EAAElR,IAAAA,QAAAA;EAAQ,GAAE,GAAGnD,KAAK,CAAA;EACvC,EAAA,IAAIqU,MAAM,CAAC3Q,MAAM,KAAK,CAAC,EAAE;EACvB,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;EACD,EAAA,MAAMZ,EAAE,GAAGuW,aAAO,CAAIlW,QAAQ,CAAC,CAAA;IAE/B,OACE6B,cACE,CAAA,KAAA,EAAA;EAAA8E,IAAAA,QAAA,EAAA9E,cAAA,CAAA,IAAA,EAAA;EAAIlC,MAAAA,EAAE,EAAEA,EAAE;EAAE0E,MAAAA,SAAS,EAAC,yCAAyC;EAAAsC,MAAAA,QAAA,EAC5DuK,MAAM,CACJlS,MAAM,CAAEmX,IAAI,IAAK,CAAC,CAACA,IAAI,CAAC,CACxB/Z,GAAG,CAAC,CAACwZ,KAAK,EAAEhY,KAAa,KAAI;UAC5B,OACEiE,cAAI,CAAA,IAAA,EAAA;EAAAwC,UAAAA,SAAS,EAAC,aAAa;EACxBsC,UAAAA,QAAA,EAAAiP,KAAAA;WAD8B,EAAAhY,KAAK,CAEjC,CAAA;SAER,CAAA;OAAC,CAAA;EAEF,GAAA,CAAA,CAAA;EAEV;;EC9BA;;;EAGG;EACqB,SAAAgS,iBAAiBA,CAIvC/S,KAA8B,EAAA;IAC9B,MAAM;MAAEmD,QAAQ;EAAE2Q,IAAAA,IAAAA;EAAM,GAAA,GAAG9T,KAAK,CAAA;IAChC,IAAI,CAAC8T,IAAI,EAAE;EACT,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;EACD,EAAA,MAAMhR,EAAE,GAAGyW,YAAM,CAAIpW,QAAQ,CAAC,CAAA;EAC9B,EAAA,IAAI,OAAO2Q,IAAI,KAAK,QAAQ,EAAE;MAC5B,OACE9O,cAAA,CAAA,GAAA,EAAA;EAAGlC,MAAAA,EAAE,EAAEA,EAAE;EAAE0E,MAAAA,SAAS,EAAC,YAAY;EAAAsC,MAAAA,QAAA,EAC9BgK,IAAAA;EAAI,KAAA,CACH,CAAA;EAEP,GAAA;IACD,OACE9O,cAAA,CAAA,KAAA,EAAA;EAAKlC,IAAAA,EAAE,EAAEA,EAAE;EAAE0E,IAAAA,SAAS,EAAC,YAAY;EAAAsC,IAAAA,QAAA,EAChCgK,IAAAA;EAAI,GAAA,CACD,CAAA;EAEV;;ECfA;;;;;EAKG;EACqB,SAAA0F,mBAAmBA,CAIzCxZ,KAAwC,EAAA;IACxC,MAAM;MACJyQ,WAAW;MACX7K,QAAQ;MACRxG,QAAQ;MACR+D,QAAQ;MACRxC,UAAU;MACV4P,UAAU;MACV1K,QAAQ;MACR1F,QAAQ;MACR4F,QAAQ;MACR7F,MAAM;MACNmG,KAAK;EACL9B,IAAAA,QAAAA;EAAQ,GACT,GAAGvE,KAAK,CAAA;EACT,EAAA,MAAM+H,OAAO,GAAGtD,kBAAY,CAAUF,QAAQ,CAAC,CAAA;IAC/C,MAAMsS,kBAAkB,GAAG9R,iBAAW,CAAgC,oBAAoB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;IAC9G,MAAM+K,wBAAwB,GAAG/N,iBAAW,CAC1C,0BAA0B,EAC1B5E,QAAQ,EACR4H,OAAO,CACR,CAAA;EACD;IACA,MAAM;EACJiO,IAAAA,eAAe,EAAE;EAAEW,MAAAA,SAAAA;EAAW,KAAA;KAC/B,GAAGxW,QAAQ,CAAC4V,SAAS,CAAA;IACtB,OACExI,eAAA,CAAA,UAAA,EAAA;MAAUzK,EAAE,EAAEK,QAAQ,CAACC,GAAG;EAAA0G,IAAAA,QAAA,EAAA,CACvBzD,KAAK,IACJrB,cAAA,CAAC6R,kBAAkB,EAAA;EACjB/T,MAAAA,EAAE,EAAEgU,aAAO,CAAI3T,QAAQ,CAAC;EACxBkD,MAAAA,KAAK,EAAEA,KAAK;EACZN,MAAAA,QAAQ,EAAEA,QAAQ;EAClB7F,MAAAA,MAAM,EAAEA,MAAM;EACdqE,MAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,MAAAA,QAAQ,EAAEA,QAAAA;EAAQ,KAAA,CAErB,EACAsQ,WAAW,IACVzL,cAAA,CAAC8N,wBAAwB,EAAA;EACvBhQ,MAAAA,EAAE,EAAEyR,mBAAa,CAAIpR,QAAQ,CAAC;EAC9BsN,MAAAA,WAAW,EAAEA,WAAW;EACxBvQ,MAAAA,MAAM,EAAEA,MAAM;EACdqE,MAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,MAAAA,QAAQ,EAAEA,QAAAA;OAAQ,CAErB,EACAoQ,UAAU,CAAChR,GAAG,CAAEka,IAAqC,IAAKA,IAAI,CAAC/H,OAAO,CAAC,EACvEgI,eAAS,CAAUxZ,MAAM,EAAEqE,QAAQ,EAAEnF,QAAQ,CAAC,IAC7C4F,cAAA,CAAC2R,SAAS,EAAA;EACRnP,MAAAA,SAAS,EAAC,wBAAwB;EAClCgP,MAAAA,OAAO,EAAE7V,UAAU,CAACT,MAAM,CAAC;QAC3B0F,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9BtB,MAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,MAAAA,QAAQ,EAAEA,QAAAA;EAAQ,KAAA,CAErB,CAAA;EAAA,GAAA,CACQ,CAAA;EAEf;;EChFA,MAAM8Y,qBAAqB,GAAG,GAAG,CAAA;EAEjC;;;EAGG;EACqB,SAAAU,UAAUA,CAChC3Z,KAA+B,EAAA;IAE/B,MAAM;MAAE8C,EAAE;MAAEuD,KAAK;EAAEN,IAAAA,QAAAA;EAAQ,GAAE,GAAG/F,KAAK,CAAA;IACrC,OACEuN,eAAQ,CAAA,QAAA,EAAA;EAAAzK,IAAAA,EAAE,EAAEA,EAAE;MAAAgH,QAAA,EAAA,CACXzD,KAAK,EACLN,QAAQ,IAAIf,cAAM,CAAA,MAAA,EAAA;EAAAwC,MAAAA,SAAS,EAAC,UAAU;EAAAsC,MAAAA,QAAA,EAAEmP,qBAAAA;EAA6B,KAAA,CAAA,CAAA;EAAA,GAAA,CAC/D,CAAA;EAEb;;ECfA;;;;EAIG;EACH,SAASW,gBAAgBA,CACvB5Z,KAAqC,EAAA;IAErC,MAAM;MAAEE,MAAM;MAAEiD,QAAQ;MAAE8B,MAAM;EAAE9E,IAAAA,QAAAA;EAAQ,GAAE,GAAGH,KAAK,CAAA;IACpD,MAAM;EAAE6D,IAAAA,eAAAA;EAAiB,GAAA,GAAG1D,QAAQ,CAAA;EACpC,EAAA,IAAI+M,aAAa,GAAuBlJ,wBAAkB,CAAC4V,gBAAgB,CAAA;IAC3E,MAAMvM,eAAe,GAAa,EAAE,CAAA;EACpC,EAAA,IAAIlK,QAAQ,IAAIA,QAAQ,CAACC,GAAG,EAAE;MAC5B8J,aAAa,GAAGlJ,wBAAkB,CAAC6V,sBAAsB,CAAA;EACzDxM,IAAAA,eAAe,CAAC5L,IAAI,CAAC0B,QAAQ,CAACC,GAAG,CAAC,CAAA;EACnC,GAAA;EACD,EAAA,IAAI6B,MAAM,EAAE;EACViI,IAAAA,aAAa,GACXA,aAAa,KAAKlJ,wBAAkB,CAAC4V,gBAAgB,GACjD5V,wBAAkB,CAAC8V,0BAA0B,GAC7C9V,wBAAkB,CAAC+V,+BAA+B,CAAA;EACxD1M,IAAAA,eAAe,CAAC5L,IAAI,CAACwD,MAAM,CAAC,CAAA;EAC7B,GAAA;IACD,OACEsI,eAAA,CAAA,KAAA,EAAA;EAAK/F,IAAAA,SAAS,EAAC,mBAAmB;EAChCsC,IAAAA,QAAA,EAAA,CAAA9E,cAAA,CAAA,GAAA,EAAA;EAAA8E,MAAAA,QAAA,EACE9E,cAAC,CAAAgM,4BAAQ;oBAAEnN,eAAe,CAACqJ,aAAa,EAAEG,eAAe,CAAA;SAAC,CAAA;EACxD,KAAA,CAAA,EACHnN,MAAM,IAAI8E,cAAA,CAAA,KAAA,EAAA;QAAA8E,QAAA,EAAMqH,IAAI,CAACC,SAAS,CAAClR,MAAM,EAAE,IAAI,EAAE,CAAC,CAAA;EAAQ,KAAA,CAAA,CAAA;EAAA,GAAA,CACnD,CAAA;EAEV;;ECvBA;;;;EAIG;EACqB,SAAAkZ,wBAAwBA,CAI9CpZ,KAA6C,EAAA;IAC7C,MAAM;MACJ8C,EAAE;MACFiR,UAAU;MACVjD,KAAK;MACLlL,QAAQ;MACRsC,KAAK;MACLoH,WAAW;MACXN,mBAAmB;MACnBnJ,QAAQ;MACRE,QAAQ;MACR7F,MAAM;MACN4J,QAAQ;MACRvF,QAAQ;EACRpE,IAAAA,QAAAA;EACD,GAAA,GAAGH,KAAK,CAAA;IACT,MAAM;MAAE+V,SAAS;EAAElS,IAAAA,eAAAA;EAAiB,GAAA,GAAG1D,QAAQ,CAAA;EAC/C;IACA,MAAM;EAAE2V,IAAAA,YAAAA;KAAc,GAAGC,SAAS,CAACC,eAAe,CAAA;IAClD,MAAMgE,QAAQ,GAAGnW,eAAe,CAACG,wBAAkB,CAACiW,QAAQ,EAAE,CAAC/R,KAAK,CAAC,CAAC,CAAA;EACtE,EAAA,MAAMU,UAAU,IAAGmE,8BAAwB,IAAI7M,MAAM,CAAA,CAAA;IAErD,IAAI,CAAC0I,UAAU,EAAE;MACf,OACE5D,cAAA,CAAA,KAAA,EAAA;EAAKwC,MAAAA,SAAS,EAAEuM,UAAU;EAAEjD,MAAAA,KAAK,EAAEA,KAAK;EAAAhH,MAAAA,QAAA,EACrCA,QAAAA;EAAQ,KAAA,CACL,CAAA;EAET,GAAA;IAED,OACE9E,cAAA,CAAA,KAAA,EAAA;EAAKwC,IAAAA,SAAS,EAAEuM,UAAU;EAAEjD,IAAAA,KAAK,EAAEA,KAAK;EAAAhH,IAAAA,QAAA,EACtCyD,eAAK,CAAA,KAAA,EAAA;EAAA/F,MAAAA,SAAS,EAAC,KAAK;EAAAsC,MAAAA,QAAA,EAAA,CAClB9E,cAAK,CAAA,KAAA,EAAA;EAAAwC,QAAAA,SAAS,EAAC,0BAA0B;EACvCsC,QAAAA,QAAA,EAAAyD,eAAA,CAAA,KAAA,EAAA;EAAK/F,UAAAA,SAAS,EAAC,YAAY;EAAAsC,UAAAA,QAAA,EAAA,CACzB9E,cAAC,CAAAkU,KAAK,EAAC;EAAAhR,YAAAA,KAAK,EAAE8R,QAAQ;EAAEjU,YAAAA,QAAQ,EAAEA,QAAQ;cAAEjD,EAAE,EAAK,GAAAA,EAAQ,CAAA,IAAA,CAAA;EAAA,WAAA,CAAI,EAC/DkC,cAAA,CAAA,OAAA,EAAA;EACEwC,YAAAA,SAAS,EAAC,cAAc;EACxBrD,YAAAA,IAAI,EAAC,MAAM;cACXrB,EAAE,EAAE,CAAGA,EAAAA,EAAQ,CAAA,IAAA,CAAA;cACfkD,MAAM,EAAGpF,KAAK,IAAK0O,WAAW,CAAC1O,KAAK,CAAC4W,MAAM,CAAC3U,KAAK,CAAC;EAClDqX,YAAAA,YAAY,EAAEhS,KAAAA;EACd,WAAA,CAAA,CAAA;WAAA,CAAA;EAEA,OAAA,CAAA,EACNlD;EAAKwC,QAAAA,SAAS,EAAC,qCAAqC;EAAAsC,QAAAA,QAAA,EAAEA,QAAAA;EAAQ,OAAA,CAAO,EACrE9E,cAAA,CAAA,KAAA,EAAA;EAAKwC,QAAAA,SAAS,EAAC,UAAU;EAAAsC,QAAAA,QAAA,EACvB9E,cAAC,CAAA8Q,YAAY,EACX;EAAAtO,UAAAA,SAAS,EAAC,6BAA6B;EACvCsJ,UAAAA,KAAK,EAAE;EAAEqJ,YAAAA,MAAM,EAAE,GAAA;aAAK;YACtBvU,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9B2Q,UAAAA,OAAO,EAAExH,mBAAmB,CAAC9G,KAAK,CAAC;EACnC3D,UAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,UAAAA,QAAQ,EAAEA,QAAAA;WACV,CAAA;EAAA,OAAA,CACE,CAAA;OACF,CAAA;EAAA,GAAA,CACF,CAAA;EAEV;;EC7DA,SAAS4V,SAASA,GAAA;IAKhB,OAAO;MACLN,6BAA6B;MAC7BC,sBAAsB;MACtBe,kBAAkB;MAClBC,uBAAuB;MACvBV,eAAe,EAAEA,eAAe,EAAW;MAC3Ce,iBAAiB;EACjBjE,IAAAA,wBAAwB,EAAE8F,gBAAgB;EAC1CwB,IAAAA,iBAAiB,EAAEvB,SAAS;MAC5BhG,aAAa;MACbG,kBAAkB;MAClBD,iBAAiB;MACjByG,mBAAmB;EACnB3C,IAAAA,kBAAkB,EAAE8C,UAAU;EAC9B7U,IAAAA,wBAAwB,EAAE8U,gBAAgB;EAC1CR,IAAAA,wBAAAA;KACD,CAAA;EACH;;EC1BA,SAASiB,YAAYA,CAACC,KAAa,EAAEC,IAAY,EAAA;IAC/C,MAAMxS,OAAO,GAAG,EAAE,CAAA;IAClB,KAAK,IAAI/F,CAAC,GAAGsY,KAAK,EAAEtY,CAAC,IAAIuY,IAAI,EAAEvY,CAAC,EAAE,EAAE;MAClC+F,OAAO,CAACtG,IAAI,CAAC;EAAEoB,MAAAA,KAAK,EAAEb,CAAC;EAAEkG,MAAAA,KAAK,EAAEsS,SAAG,CAACxY,CAAC,EAAE,CAAC,CAAA;EAAC,KAAE,CAAC,CAAA;EAC7C,GAAA;EACD,EAAA,OAAO+F,OAAO,CAAA;EAChB,CAAA;EAEA,SAAS0S,cAAcA,CAACtZ,KAAiB,EAAA;EACvC,EAAA,OAAOwI,MAAM,CAAC+Q,MAAM,CAACvZ,KAAK,CAAC,CAAC8J,KAAK,CAAEpI,KAAK,IAAKA,KAAK,KAAK,CAAC,CAAC,CAAC,CAAA;EAC5D,CAAA;EAEA,SAAS8X,gBAAgBA,CACvBxZ,KAAiB,EACjByZ,IAAa,EACbC,aAA+B,CAAC,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE,GAAG,CAAC,CAAC,EAAA;IAEnE,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC,GAAG;MAAEC,IAAI;MAAEC,MAAM;EAAEC,IAAAA,MAAAA;EAAQ,GAAA,GAAGla,KAAK,CAAA;IACxD,MAAMma,IAAI,GAAG,CACX;EACEnX,IAAAA,IAAI,EAAE,MAAM;EACZoX,IAAAA,KAAK,EAAEV,UAAU;EACjBhY,IAAAA,KAAK,EAAEmY,IAAAA;EACR,GAAA,EACD;EAAE7W,IAAAA,IAAI,EAAE,OAAO;EAAEoX,IAAAA,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAAE1Y,IAAAA,KAAK,EAAEoY,KAAAA;EAAO,GAAA,EAC/C;EAAE9W,IAAAA,IAAI,EAAE,KAAK;EAAEoX,IAAAA,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAAE1Y,IAAAA,KAAK,EAAEqY,GAAAA;EAAK,GAAA,CAC8B,CAAA;EAC3E,EAAA,IAAIN,IAAI,EAAE;MACRU,IAAI,CAAC7Z,IAAI,CACP;EAAE0C,MAAAA,IAAI,EAAE,MAAM;EAAEoX,MAAAA,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAAE1Y,MAAAA,KAAK,EAAEsY,IAAAA;EAAI,KAAE,EAC7C;EAAEhX,MAAAA,IAAI,EAAE,QAAQ;EAAEoX,MAAAA,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAAE1Y,MAAAA,KAAK,EAAEuY,MAAAA;EAAQ,KAAA,EACjD;EAAEjX,MAAAA,IAAI,EAAE,QAAQ;EAAEoX,MAAAA,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAAE1Y,MAAAA,KAAK,EAAEwY,MAAAA;EAAQ,KAAA,CAClD,CAAA;EACF,GAAA;EACD,EAAA,OAAOC,IAAI,CAAA;EACb,CAAA;EAYA,SAASE,WAAWA,CAAoF;IACtGrX,IAAI;IACJoX,KAAK;IACL1Y,KAAK;IACL4Y,MAAM;IACNC,MAAM;IACN/V,IAAI;IACJC,QAAQ;IACRC,QAAQ;IACRC,SAAS;IACT3F,QAAQ;IACR6F,MAAM;EACNC,EAAAA,OAAAA;EAC0B,CAAA,EAAA;EAC1B,EAAA,MAAMnD,EAAE,GAAG4Y,MAAM,GAAG,GAAG,GAAGvX,IAAI,CAAA;IAC9B,MAAM;EAAEwX,IAAAA,YAAAA;KAAc,GAAGxb,QAAQ,CAACyH,OAAO,CAAA;IACzC,OACE5C,eAAC2W,YAAY,EAAA;EACXzb,IAAAA,MAAM,EAAE;EAAEiE,MAAAA,IAAI,EAAE,SAAA;OAAgB;EAChCrB,IAAAA,EAAE,EAAEA,EAAE;EACN6C,IAAAA,IAAI,EAAEA,IAAI;EACV6B,IAAAA,SAAS,EAAC,cAAc;EACxBO,IAAAA,OAAO,EAAE;QAAEQ,WAAW,EAAE8R,YAAY,CAACkB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAA;OAAG;EAC1D5T,IAAAA,WAAW,EAAExD,IAAI;EACjBtB,IAAAA,KAAK,EAAEA,KAAK;EACZ+C,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,SAAS,EAAEA,SAAS;MACpB5E,QAAQ,EAAG2B,KAAU,IAAK4Y,MAAM,CAACtX,IAAwB,EAAEtB,KAAK,CAAC;EACjEmD,IAAAA,MAAM,EAAEA,MAAM;EACdC,IAAAA,OAAO,EAAEA,OAAO;EAChB9F,IAAAA,QAAQ,EAAEA,QAAQ;EAClB+H,IAAAA,KAAK,EAAC,EAAE;MACU,kBAAA,EAAA8P,wBAAkB,CAAI0D,MAAM,CAAA;EAC9C,GAAA,CAAA,CAAA;EAEN,CAAA;EAEA;;EAEG;EACH,SAASE,aAAaA,CAAoF;EACxGhB,EAAAA,IAAI,GAAG,KAAK;EACZhV,EAAAA,QAAQ,GAAG,KAAK;EAChBC,EAAAA,QAAQ,GAAG,KAAK;EAChBC,EAAAA,SAAS,GAAG,KAAK;IACjBiC,OAAO;IACPjF,EAAE;IACF6C,IAAI;IACJxF,QAAQ;IACR6F,MAAM;IACNC,OAAO;IACP/E,QAAQ;EACR2B,EAAAA,KAAAA;EACqB,CAAA,EAAA;IACrB,MAAM;EAAEgB,IAAAA,eAAAA;EAAiB,GAAA,GAAG1D,QAAQ,CAAA;IACpC,MAAM,CAAC0N,SAAS,EAAEC,YAAY,CAAC,GAAGC,cAAQ,CAAClL,KAAK,CAAC,CAAA;EACjD,EAAA,MAAM,CAAC1B,KAAK,EAAEO,QAAQ,CAAC,GAAGma,gBAAU,CAAC,CAAC1a,KAAiB,EAAE2a,MAA2B,KAAI;MACtF,OAAO;EAAE,MAAA,GAAG3a,KAAK;QAAE,GAAG2a,MAAAA;OAAQ,CAAA;EAChC,GAAC,EAAEC,qBAAe,CAAClZ,KAAK,EAAE+X,IAAI,CAAC,CAAC,CAAA;EAEhCrF,EAAAA,eAAS,CAAC,MAAK;EACb,IAAA,MAAMyG,UAAU,GAAGC,kBAAY,CAAC9a,KAAK,EAAEyZ,IAAI,CAAC,CAAA;MAC5C,IAAIH,cAAc,CAACtZ,KAAK,CAAC,IAAI6a,UAAU,KAAKnZ,KAAK,EAAE;EACjD;QACA3B,QAAQ,CAAC8a,UAAU,CAAC,CAAA;EACrB,KAAA,MAAM,IAAInO,SAAS,KAAKhL,KAAK,EAAE;EAC9B;QACAiL,YAAY,CAACjL,KAAK,CAAC,CAAA;EACnBnB,MAAAA,QAAQ,CAACqa,qBAAe,CAAClZ,KAAK,EAAE+X,IAAI,CAAC,CAAC,CAAA;EACvC,KAAA;EACH,GAAC,EAAE,CAACA,IAAI,EAAE/X,KAAK,EAAE3B,QAAQ,EAAEC,KAAK,EAAE0M,SAAS,CAAC,CAAC,CAAA;IAE7C,MAAMI,YAAY,GAAGC,iBAAW,CAAC,CAACgO,QAA0B,EAAErZ,KAAa,KAAI;EAC7EnB,IAAAA,QAAQ,CAAC;EAAE,MAAA,CAACwa,QAAQ,GAAGrZ,KAAAA;EAAO,KAAA,CAAC,CAAA;KAChC,EAAE,EAAE,CAAC,CAAA;EAEN,EAAA,MAAMsZ,YAAY,GAAGjO,iBAAW,CAC7BtN,KAAoC,IAAI;MACvCA,KAAK,CAACK,cAAc,EAAE,CAAA;MACtB,IAAI2E,QAAQ,IAAIC,QAAQ,EAAE;EACxB,MAAA,OAAA;EACD,KAAA;EACD,IAAA,MAAMuW,SAAS,GAAGL,qBAAe,CAAC,IAAIjB,IAAI,EAAE,CAACuB,MAAM,EAAE,EAAEzB,IAAI,CAAC,CAAA;EAC5D1Z,IAAAA,QAAQ,CAAC+a,kBAAY,CAACG,SAAS,EAAExB,IAAI,CAAC,CAAC,CAAA;KACxC,EACD,CAAChV,QAAQ,EAAEC,QAAQ,EAAE+U,IAAI,CAAC,CAC3B,CAAA;EAED,EAAA,MAAM0B,WAAW,GAAGpO,iBAAW,CAC5BtN,KAAoC,IAAI;MACvCA,KAAK,CAACK,cAAc,EAAE,CAAA;MACtB,IAAI2E,QAAQ,IAAIC,QAAQ,EAAE;EACxB,MAAA,OAAA;EACD,KAAA;MACD3E,QAAQ,CAACK,SAAS,CAAC,CAAA;KACpB,EACD,CAACqE,QAAQ,EAAEC,QAAQ,EAAE3E,QAAQ,CAAC,CAC/B,CAAA;IAED,OACEqM,eAAI,CAAA,IAAA,EAAA;EAAA/F,IAAAA,SAAS,EAAC,aAAa;MAAAsC,QAAA,EAAA,CACxB6Q,gBAAgB,CAACxZ,KAAK,EAAEyZ,IAAI,EAAE7S,OAAO,CAAC8S,UAA0C,CAAC,CAACtb,GAAG,CAAC,CAACgd,SAAS,EAAEva,CAAC,KAClGgD,cAAI,CAAA,IAAA,EAAA;EAAAwC,MAAAA,SAAS,EAAC,kBAAkB;EAAAsC,MAAAA,QAAA,EAC9B9E,eAACwW,WAAW,EAAA;EACVE,QAAAA,MAAM,EAAE5Y,EAAE;EACV6C,QAAAA,IAAI,EAAEA,IAAI;EACV8V,QAAAA,MAAM,EAAExN,YAAY;aAChBsO,SAAS;EACb3W,QAAAA,QAAQ,EAAEA,QAAQ;EAClBC,QAAAA,QAAQ,EAAEA,QAAQ;EAClB1F,QAAAA,QAAQ,EAAEA,QAAQ;EAClB6F,QAAAA,MAAM,EAAEA,MAAM;EACdC,QAAAA,OAAO,EAAEA,OAAO;EAChBH,QAAAA,SAAS,EAAEA,SAAS,IAAI9D,CAAC,KAAK,CAAA;SAC9B,CAAA;OAAA,EAZkCA,CAAC,CAcxC,CAAC,EACD,CAAC+F,OAAO,CAACyU,aAAa,KAAK,WAAW,GAAG,CAACzU,OAAO,CAACyU,aAAa,GAAG,IAAI,KACrExX,cAAA,CAAA,IAAA,EAAA;EAAIwC,MAAAA,SAAS,EAAC,kBAAkB;kBAC9BxC,cAAG,CAAA,GAAA,EAAA;EAAAyX,QAAAA,IAAI,EAAC,GAAG;EAACjV,QAAAA,SAAS,EAAC,sBAAsB;EAACgP,QAAAA,OAAO,EAAE2F,YAAY;EAAArS,QAAAA,QAAA,EAC/DjG,eAAe,CAACG,wBAAkB,CAAC0Y,QAAQ,CAAA;;EAE3C,KAAA,CACN,EACA,CAAC3U,OAAO,CAAC4U,eAAe,KAAK,WAAW,GAAG,CAAC5U,OAAO,CAAC4U,eAAe,GAAG,IAAI,KACzE3X,cAAI,CAAA,IAAA,EAAA;EAAAwC,MAAAA,SAAS,EAAC,kBAAkB;EAAAsC,MAAAA,QAAA,EAC9B9E;EAAGyX,QAAAA,IAAI,EAAC,GAAG;EAACjV,QAAAA,SAAS,EAAC,2BAA2B;EAACgP,QAAAA,OAAO,EAAE8F,WAAW;EACnExS,QAAAA,QAAA,EAAAjG,eAAe,CAACG,wBAAkB,CAAC4Y,UAAU,CAAA;SAAC,CAAA;QAGpD,CAAA;EAAA,GAAA,CACE,CAAA;EAET;;ECjMA;;;;EAIG;EACH,SAASC,iBAAiBA,CAAoF;EAC5GjC,EAAAA,IAAI,GAAG,IAAI;IACX,GAAG5a,KAAAA;EACkB,CAAA,EAAA;IACrB,MAAM;EAAE4b,IAAAA,aAAAA;EAAe,GAAA,GAAG5b,KAAK,CAACG,QAAQ,CAACyH,OAAO,CAAA;IAChD,OAAO5C,cAAA,CAAC4W,aAAa,EAAC;EAAAhB,IAAAA,IAAI,EAAEA,IAAI;MAAA,GAAM5a,KAAAA;EAAK,GAAA,CAAI,CAAA;EACjD;;ECAA;;;;EAIG;EACH,SAAS8c,cAAcA,CAAoF;IACzG5c,MAAM;IACNqE,QAAQ;IACRwD,OAAO;IACPjF,EAAE;IACFD,KAAK;IACL+C,QAAQ;IACRC,QAAQ;IACRqC,KAAK;IACLI,SAAS;EACTxC,EAAAA,SAAS,GAAG,KAAK;IACjBE,MAAM;IACNC,OAAO;IACP/E,QAAQ;EACRf,EAAAA,QAAAA;EACqB,CAAA,EAAA;IACrB,MAAM2S,wBAAwB,GAAG/N,iBAAW,CAC1C,0BAA0B,EAC1B5E,QAAQ,EACR4H,OAAO,CACR,CAAA;EACD;EACA;EACA;EACA,EAAA,MAAMhC,QAAQ,GAAGgX,6BAAuB,CAAI7c,MAAM,CAAC,CAAA;EAEnD,EAAA,MAAM+N,YAAY,GAAGC,iBAAW,CAC7BtN,KAAoC,IAAKM,QAAQ,CAACN,KAAK,CAAC4W,MAAM,CAACwF,OAAO,CAAC,EACxE,CAAC9b,QAAQ,CAAC,CACX,CAAA;IAED,MAAM+b,UAAU,GAAG/O,iBAAW,CAC3BtN,KAAmC,IAAKoF,MAAM,CAAClD,EAAE,EAAElC,KAAK,CAAC4W,MAAM,CAACwF,OAAO,CAAC,EACzE,CAAChX,MAAM,EAAElD,EAAE,CAAC,CACb,CAAA;IAED,MAAMoa,WAAW,GAAGhP,iBAAW,CAC5BtN,KAAmC,IAAKqF,OAAO,CAACnD,EAAE,EAAElC,KAAK,CAAC4W,MAAM,CAACwF,OAAO,CAAC,EAC1E,CAAC/W,OAAO,EAAEnD,EAAE,CAAC,CACd,CAAA;IACD,MAAM2N,WAAW,GAAG1I,OAAO,CAAC0I,WAAW,IAAIvQ,MAAM,CAACuQ,WAAW,CAAA;IAE7D,OACElD,eAAA,CAAA,KAAA,EAAA;MAAK/F,SAAS,EAAc,YAAA5B,QAAQ,IAAIC,QAAQ,GAAG,UAAU,GAAG,EAAI,CAAA,CAAA;EAAAiE,IAAAA,QAAA,EAAA,CACjE,CAACxB,SAAS,IAAI,CAAC,CAACmI,WAAW,IAC1BzL,cAAC,CAAA8N,wBAAwB,EACvB;EAAAhQ,MAAAA,EAAE,EAAEyR,mBAAa,CAAIzR,EAAE,CAAC;EACxB2N,MAAAA,WAAW,EAAEA,WAAW;EACxBvQ,MAAAA,MAAM,EAAEA,MAAM;EACdqE,MAAAA,QAAQ,EAAEA,QAAQ;EAClBpE,MAAAA,QAAQ,EAAEA,QAAAA;EAAQ,KAAA,CAErB,EACDoN,eACE,CAAA,OAAA,EAAA;EAAAzD,MAAAA,QAAA,EAAA,CAAA9E,cAAA,CAAA,OAAA,EAAA;EACEb,QAAAA,IAAI,EAAC,UAAU;EACfrB,QAAAA,EAAE,EAAEA,EAAE;EACN6C,QAAAA,IAAI,EAAE7C,EAAE;UACRka,OAAO,EAAE,OAAOna,KAAK,KAAK,WAAW,GAAG,KAAK,GAAGA,KAAK;EACrDkD,QAAAA,QAAQ,EAAEA,QAAQ;UAClBH,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9B+R,QAAAA,SAAS,EAAE9R,SAAS;EACpB5E,QAAAA,QAAQ,EAAE+M,YAAY;EACtBjI,QAAAA,MAAM,EAAEiX,UAAU;EAClBhX,QAAAA,OAAO,EAAEiX,WAAW;UAAA,kBAAA,EACFlF,wBAAkB,CAAIlV,EAAE,CAAA;EAC1C,OAAA,CAAA,EACDqa,gBAAU,CAACnY,cAAO,CAAA,MAAA,EAAA;EAAA8E,QAAAA,QAAA,EAAA5B,KAAAA;SAAa,CAAA,EAAEI,SAAS,CAAC,CAAA;EACtC,KAAA,CAAA,CAAA;EAAA,GAAA,CACJ,CAAA;EAEV;;EC3EA;;;;EAIG;EACH,SAAS8U,gBAAgBA,CAAoF;IAC3Gta,EAAE;IACF8C,QAAQ;EACRmC,EAAAA,OAAO,EAAE;EAAEsV,IAAAA,MAAM,GAAG,KAAK;MAAE9U,WAAW;MAAE+U,YAAY;EAAE7F,IAAAA,UAAAA;KAAY;IAClE5U,KAAK;EACLiD,EAAAA,SAAS,GAAG,KAAK;IACjBD,QAAQ;IACR3E,QAAQ;IACR8E,MAAM;EACNC,EAAAA,OAAAA;EACqB,CAAA,EAAA;EACrB,EAAA,MAAMsX,gBAAgB,GAAGle,KAAK,CAACC,OAAO,CAACuD,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC,CAAA;EAE/D,EAAA,MAAMoa,UAAU,GAAG/O,iBAAW,CAC5B,CAAC;EAAEsJ,IAAAA,MAAM,EAAE;EAAE3U,MAAAA,KAAAA;EAAO,KAAA;KAAgC,KAClDmD,MAAM,CAAClD,EAAE,EAAE0a,8BAAwB,CAAI3a,KAAK,EAAE0F,WAAW,EAAEkP,UAAU,CAAC,CAAC,EACzE,CAACzR,MAAM,EAAElD,EAAE,CAAC,CACb,CAAA;EAED,EAAA,MAAMoa,WAAW,GAAGhP,iBAAW,CAC7B,CAAC;EAAEsJ,IAAAA,MAAM,EAAE;EAAE3U,MAAAA,KAAAA;EAAO,KAAA;KAAgC,KAClDoD,OAAO,CAACnD,EAAE,EAAE0a,8BAAwB,CAAI3a,KAAK,EAAE0F,WAAW,EAAEkP,UAAU,CAAC,CAAC,EAC1E,CAACxR,OAAO,EAAEnD,EAAE,CAAC,CACd,CAAA;IACD,OACEkC,cAAA,CAAA,KAAA,EAAA;EAAKwC,IAAAA,SAAS,EAAC,YAAY;EAAC1E,IAAAA,EAAE,EAAEA,EAAE;gBAC/BzD,KAAK,CAACC,OAAO,CAACiJ,WAAW,CAAC,IACzBA,WAAW,CAAChJ,GAAG,CAAC,CAACmL,MAAM,EAAE3J,KAAK,KAAI;QAChC,MAAMic,OAAO,GAAGS,2BAAqB,CAAI/S,MAAM,CAAC7H,KAAK,EAAE0a,gBAAgB,CAAC,CAAA;EACxE,MAAA,MAAMG,YAAY,GAAGre,KAAK,CAACC,OAAO,CAACge,YAAY,CAAC,IAAIA,YAAY,CAAClN,OAAO,CAAC1F,MAAM,CAAC7H,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA;QAC7F,MAAM8a,WAAW,GAAG/X,QAAQ,IAAI8X,YAAY,IAAI7X,QAAQ,GAAG,UAAU,GAAG,EAAE,CAAA;QAE1E,MAAMoI,YAAY,GAAIrN,KAAoC,IAAI;EAC5D,QAAA,IAAIA,KAAK,CAAC4W,MAAM,CAACwF,OAAO,EAAE;YACxB9b,QAAQ,CAAC0c,4BAAsB,CAAI7c,KAAK,EAAEwc,gBAAgB,EAAEhV,WAAW,CAAC,CAAC,CAAA;EAC1E,SAAA,MAAM;YACLrH,QAAQ,CAAC2c,8BAAwB,CAAI9c,KAAK,EAAEwc,gBAAgB,EAAEhV,WAAW,CAAC,CAAC,CAAA;EAC5E,SAAA;SACF,CAAA;EAED,MAAA,MAAMuV,QAAQ,GACZvQ,eAAA,CAAA,MAAA,EAAA;EAAAzD,QAAAA,QAAA,EAAA,CACE9E;EACEb,UAAAA,IAAI,EAAC,UAAU;EACfrB,UAAAA,EAAE,EAAEib,cAAQ,CAACjb,EAAE,EAAE/B,KAAK,CAAC;EACvB4E,UAAAA,IAAI,EAAE7C,EAAE;EACRka,UAAAA,OAAO,EAAEA,OAAO;EAChBna,UAAAA,KAAK,EAAEyK,MAAM,CAACvM,KAAK,CAAC;EACpB6E,UAAAA,QAAQ,EAAEA,QAAQ,IAAI8X,YAAY,IAAI7X,QAAQ;EAC9C+R,UAAAA,SAAS,EAAE9R,SAAS,IAAI/E,KAAK,KAAK,CAAC;EACnCG,UAAAA,QAAQ,EAAE+M,YAAY;EACtBjI,UAAAA,MAAM,EAAEiX,UAAU;EAClBhX,UAAAA,OAAO,EAAEiX,WAAW;YAAA,kBAAA,EACFlF,wBAAkB,CAAIlV,EAAE,CAAA;EAAC,SAAA,CAC3C,EACFkC,cAAA,CAAA,MAAA,EAAA;YAAA8E,QAAA,EAAOY,MAAM,CAACxC,KAAAA;EAAa,SAAA,CAAA,CAAA;EAAA,OAAA,CAE9B,CAAA;EACD,MAAA,OAAOmV,MAAM,GACXrY,cAAmB,CAAA,OAAA,EAAA;UAAAwC,SAAS,EAAE,CAAmBmW,gBAAAA,EAAAA,WAAa,CAAA,CAAA;EAAA7T,QAAAA,QAAA,EAC3DgU,QAAAA;EAAQ,OAAA,EADC/c,KAAK,CAET,GAERiE,cAAA,CAAA,KAAA,EAAA;UAAiBwC,SAAS,GAAcmW,SAAAA,EAAAA,WAAW,CAAE,CAAA;EACnD7T,QAAAA,QAAA,EAAA9E,cAAA,CAAA,OAAA,EAAA;EAAA8E,UAAAA,QAAA,EAAQgU,QAAAA;WAAiB,CAAA;SAAA,EADjB/c,KAAK,CAGhB,CAAA;OACF,CAAA;EACC,GAAA,CAAA,CAAA;EAEV;;ECvFA;;;;EAIG;EACqB,SAAAid,WAAWA,CACjChe,KAA2B,EAAA;IAE3B,MAAM;MAAE4F,QAAQ;MAAEC,QAAQ;MAAEkC,OAAO;EAAE5H,IAAAA,QAAAA;EAAQ,GAAE,GAAGH,KAAK,CAAA;IACvD,MAAM+W,iBAAiB,GAAGhS,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;IAC3G,OAAO/C,cAAC,CAAA+R,iBAAiB,EAAC;EAAA5S,IAAAA,IAAI,EAAC,OAAO;EAAA,IAAA,GAAKnE,KAAK;MAAE4F,QAAQ,EAAEA,QAAQ,IAAIC,QAAAA;MAAY,CAAA;EACtF;;ECVA;;;;EAIG;EACqB,SAAAoY,UAAUA,CAChCje,KAA2B,EAAA;IAE3B,MAAM;MAAEkB,QAAQ;MAAE6G,OAAO;EAAE5H,IAAAA,QAAAA;EAAQ,GAAE,GAAGH,KAAK,CAAA;IAC7C,MAAM+W,iBAAiB,GAAGhS,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;EAC3G,EAAA,MAAMkG,YAAY,GAAGC,iBAAW,CAAErL,KAAU,IAAK3B,QAAQ,CAAC2B,KAAK,IAAItB,SAAS,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC,CAAA;IAE1F,OAAO8D,cAAC,CAAA+R,iBAAiB,EAAC;EAAA5S,IAAAA,IAAI,EAAC,MAAM;EAAK,IAAA,GAAAnE,KAAK;EAAEkB,IAAAA,QAAQ,EAAE+M,YAAAA;MAAgB,CAAA;EAC7E;;ECNA;;;;EAIG;EACqB,SAAAiQ,cAAcA,CAIpCle,KAA2B,EAAA;IAC3B,MAAM;MAAEkB,QAAQ;MAAE2B,KAAK;MAAEkF,OAAO;EAAE5H,IAAAA,QAAAA;EAAQ,GAAE,GAAGH,KAAK,CAAA;IACpD,MAAM+W,iBAAiB,GAAGhS,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;IAC3G,OACE/C,cAAA,CAAC+R,iBAAiB,EAAA;EAChB5S,IAAAA,IAAI,EAAC,gBAAgB;EACjB,IAAA,GAAAnE,KAAK;EACT6C,IAAAA,KAAK,EAAEsb,gBAAU,CAACtb,KAAK,CAAC;MACxB3B,QAAQ,EAAG2B,KAAK,IAAK3B,QAAQ,CAACkd,gBAAU,CAACvb,KAAK,CAAC,CAAA;EAAC,GAAA,CAChD,CAAA;EAEN;;EC5BA;;;EAGG;EACqB,SAAAwb,WAAWA,CACjCre,KAA2B,EAAA;IAE3B,MAAM;MAAE+H,OAAO;EAAE5H,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IACnC,MAAM+W,iBAAiB,GAAGhS,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;IAC3G,OAAO/C,cAAA,CAAC+R,iBAAiB,EAAC;EAAA5S,IAAAA,IAAI,EAAC,OAAO;MAAA,GAAKnE,KAAAA;EAAK,GAAA,CAAI,CAAA;EACtD;;ECCA,SAASse,gBAAgBA,CAACC,OAAe,EAAE5Y,IAAY,EAAA;IACrD,IAAI4Y,OAAO,KAAK,IAAI,EAAE;EACpB,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;EACD,EAAA,OAAOA,OAAO,CAAChQ,OAAO,CAAC,SAAS,EAAW,CAAAiQ,MAAAA,EAAAA,kBAAkB,CAAC7Y,IAAI,CAAC,CAAA,OAAA,CAAS,CAAC,CAAA;EAC/E,CAAA;EASA,SAAS8Y,WAAWA,CAACC,IAAU,EAAA;IAC7B,MAAM;MAAE/Y,IAAI;MAAEgZ,IAAI;EAAExa,IAAAA,IAAAA;EAAI,GAAE,GAAGua,IAAI,CAAA;EACjC,EAAA,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;EACrC,IAAA,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAU,EAAE,CAAA;MACtCF,MAAM,CAACG,OAAO,GAAGJ,MAAM,CAAA;EACvBC,IAAAA,MAAM,CAACI,MAAM,GAAIve,KAAK,IAAI;EAAA,MAAA,IAAAwe,aAAA,CAAA;EACxB,MAAA,IAAI,QAAAA,CAAAA,aAAA,GAAOxe,KAAK,CAAC4W,MAAM,MAAA,IAAA,IAAA4H,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZA,aAAA,CAAcC,MAAM,CAAA,KAAK,QAAQ,EAAE;EAC5CR,QAAAA,OAAO,CAAC;YACNN,OAAO,EAAED,gBAAgB,CAAC1d,KAAK,CAAC4W,MAAM,CAAC6H,MAAM,EAAE1Z,IAAI,CAAC;YACpDA,IAAI;YACJgZ,IAAI;EACJxa,UAAAA,IAAAA;EACD,SAAA,CAAC,CAAA;EACH,OAAA,MAAM;EACL0a,QAAAA,OAAO,CAAC;EACNN,UAAAA,OAAO,EAAE,IAAI;YACb5Y,IAAI;YACJgZ,IAAI;EACJxa,UAAAA,IAAAA;EACD,SAAA,CAAC,CAAA;EACH,OAAA;OACF,CAAA;EACD4a,IAAAA,MAAM,CAACO,aAAa,CAACZ,IAAI,CAAC,CAAA;EAC5B,GAAC,CAAC,CAAA;EACJ,CAAA;EAEA,SAASa,YAAYA,CAACC,KAAe,EAAA;EACnC,EAAA,OAAOZ,OAAO,CAACa,GAAG,CAACpgB,KAAK,CAACqgB,IAAI,CAACF,KAAK,CAAC,CAACjgB,GAAG,CAACkf,WAAW,CAAC,CAAC,CAAA;EACxD,CAAA;EAEA,SAASkB,eAAeA,CAAoF;IAC1GC,QAAQ;EACRzf,EAAAA,QAAAA;EAID,CAAA,EAAA;IACC,MAAM;EAAE0D,IAAAA,eAAAA;EAAiB,GAAA,GAAG1D,QAAQ,CAAA;IACpC,MAAM;MAAEoe,OAAO;MAAEpa,IAAI;EAAEwB,IAAAA,IAAAA;EAAI,GAAE,GAAGia,QAAQ,CAAA;IACxC,IAAI,CAACrB,OAAO,EAAE;EACZ,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;IAED,IAAIpa,IAAI,CAACiM,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;MAChC,OAAOpL;EAAK6a,MAAAA,GAAG,EAAEtB,OAAO;EAAEzN,MAAAA,KAAK,EAAE;EAAEgP,QAAAA,QAAQ,EAAE,MAAA;SAAQ;EAAEtY,MAAAA,SAAS,EAAC,cAAA;QAAiB,CAAA;EACnF,GAAA;IAED,OACE+F,eAAA,CAAAyH,mBAAA,EAAA;EAAAlL,IAAAA,QAAA,EAAA,CACG,GAAG,EACJ9E,cAAG,CAAA,GAAA,EAAA;QAAA+a,QAAQ,EAAE,CAAWpa,QAAAA,EAAAA,IAAI,CAAE,CAAA;EAAE8W,MAAAA,IAAI,EAAE8B,OAAO;EAAE/W,MAAAA,SAAS,EAAC,eAAe;EACrEsC,MAAAA,QAAA,EAAAjG,eAAe,CAACG,wBAAkB,CAACgc,YAAY,CAAA;EAAC,KAAA,CAC/C,CAAA;EACH,GAAA,CAAA,CAAA;EAEP,CAAA;EAEA,SAASC,SAASA,CAAoF;IACpGC,SAAS;IACT/f,QAAQ;EACRggB,EAAAA,OAAAA;EAKD,CAAA,EAAA;EACC,EAAA,IAAID,SAAS,CAACxc,MAAM,KAAK,CAAC,EAAE;EAC1B,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;IACD,MAAM;EAAEG,IAAAA,eAAAA;EAAiB,GAAA,GAAG1D,QAAQ,CAAA;IACpC,OACE6E,cAAA,CAAA,IAAA,EAAA;EAAIwC,IAAAA,SAAS,EAAC,WAAW;MACtBsC,QAAA,EAAAoW,SAAS,CAAC3gB,GAAG,CAAC,CAACqgB,QAAQ,EAAEngB,GAAG,KAAI;QAC/B,MAAM;UAAEkG,IAAI;UAAEgZ,IAAI;EAAExa,QAAAA,IAAAA;EAAI,OAAE,GAAGyb,QAAQ,CAAA;QACrC,OACErS,eACE,CAAA,IAAA,EAAA;EAAAzD,QAAAA,QAAA,EAAA,CAAA9E,cAAA,CAACgM,4BAAQ,EAAE;EAAAlH,UAAAA,QAAA,EAAAjG,eAAe,CAACG,wBAAkB,CAACic,SAAS,EAAE,CAACta,IAAI,EAAExB,IAAI,EAAEmJ,MAAM,CAACqR,IAAI,CAAC,CAAC,CAAA;YAAa,EAC/FwB,OAAO,IAAInb,cAAC,CAAA2a,eAAe;EAAUC,UAAAA,QAAQ,EAAEA,QAAQ;EAAEzf,UAAAA,QAAQ,EAAEA,QAAAA;EAAQ,SAAA,CAAI,CAAA;WAFzEV,GAAG,CAGP,CAAA;OAER,CAAA;EACE,GAAA,CAAA,CAAA;EAET,CAAA;EAEA,SAAS2gB,eAAeA,CAACC,QAAkB,EAAA;EACzC,EAAA,OAAOA,QAAQ,CACZle,MAAM,CAAEoc,OAAO,IAAKA,OAAO,CAAC,CAC5Bhf,GAAG,CAAEgf,OAAO,IAAI;MACf,MAAM;QAAE+B,IAAI;EAAE3a,MAAAA,IAAAA;EAAI,KAAE,GAAG4a,mBAAa,CAAChC,OAAO,CAAC,CAAA;MAC7C,OAAO;QACLA,OAAO;EACP5Y,MAAAA,IAAI,EAAEA,IAAI;QACVgZ,IAAI,EAAE2B,IAAI,CAAC3B,IAAI;QACfxa,IAAI,EAAEmc,IAAI,CAACnc,IAAAA;OACZ,CAAA;EACH,GAAC,CAAC,CAAA;EACN,CAAA;EAEA;;;EAGG;EACH,SAASqc,UAAUA,CACjBxgB,KAA2B,EAAA;IAE3B,MAAM;MAAE4F,QAAQ;MAAEC,QAAQ;MAAEE,QAAQ;MAAEsC,QAAQ;MAAEnH,QAAQ;MAAE2B,KAAK;MAAEkF,OAAO;EAAE5H,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IAC5F,MAAM+W,iBAAiB,GAAGhS,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;IAC3G,MAAM,CAACmY,SAAS,EAAEO,YAAY,CAAC,GAAG1S,cAAQ,CACxC1O,KAAK,CAACC,OAAO,CAACuD,KAAK,CAAC,GAAGud,eAAe,CAACvd,KAAK,CAAC,GAAGud,eAAe,CAAC,CAACvd,KAAK,CAAC,CAAC,CACzE,CAAA;EAED,EAAA,MAAMoL,YAAY,GAAGC,iBAAW,CAC7BtN,KAAoC,IAAI;EACvC,IAAA,IAAI,CAACA,KAAK,CAAC4W,MAAM,CAACgI,KAAK,EAAE;EACvB,MAAA,OAAA;EACD,KAAA;EACD;EACA;EACA;MACAD,YAAY,CAAC3e,KAAK,CAAC4W,MAAM,CAACgI,KAAK,CAAC,CAACkB,IAAI,CAAEC,cAAc,IAAI;QACvD,MAAMC,QAAQ,GAAGD,cAAc,CAACphB,GAAG,CAAEqgB,QAAQ,IAAKA,QAAQ,CAACrB,OAAO,CAAC,CAAA;EACnE,MAAA,IAAIlW,QAAQ,EAAE;UACZoY,YAAY,CAACP,SAAS,CAACvX,MAAM,CAACgY,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;UACjDzf,QAAQ,CAAC2B,KAAK,CAAC8F,MAAM,CAACiY,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;EACpC,OAAA,MAAM;UACLH,YAAY,CAACE,cAAc,CAAC,CAAA;EAC5Bzf,QAAAA,QAAQ,CAAC0f,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;EACtB,OAAA;EACH,KAAC,CAAC,CAAA;KACH,EACD,CAACvY,QAAQ,EAAExF,KAAK,EAAEqd,SAAS,EAAEhf,QAAQ,CAAC,CACvC,CAAA;IAED,OACEqM,eACE,CAAA,KAAA,EAAA;EAAAzD,IAAAA,QAAA,EAAA,CAAA9E,cAAA,CAAC+R,iBAAiB,EAAA;EAAA,MAAA,GACZ/W,KAAK;QACT4F,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9B1B,MAAAA,IAAI,EAAC,MAAM;EACX4B,MAAAA,QAAQ,EAAElD,KAAK,GAAG,KAAK,GAAGkD,QAAQ;EAClCiR,MAAAA,gBAAgB,EAAE/I,YAAY;EAC9BpL,MAAAA,KAAK,EAAC,EAAE;QACRge,MAAM,EAAE9Y,OAAO,CAAC8Y,MAAM,GAAGvT,MAAM,CAACvF,OAAO,CAAC8Y,MAAM,CAAC,GAAGtf,SAAAA;QAClD,EACFyD,cAAA,CAACib,SAAS,EAAA;EAAUC,MAAAA,SAAS,EAAEA,SAAS;EAAE/f,MAAAA,QAAQ,EAAEA,QAAQ;QAAEggB,OAAO,EAAEpY,OAAO,CAAC+Y,WAAAA;EAAe,KAAA,CAAA,CAAA;EAAA,GAAA,CAC1F,CAAA;EAEV;;EC7KA;;;;EAIG;EACH,SAASC,YAAYA,CAAoF;IACvGje,EAAE;EACFD,EAAAA,KAAAA;EACqB,CAAA,EAAA;IACrB,OAAOmC,cAAO,CAAA,OAAA,EAAA;EAAAb,IAAAA,IAAI,EAAC,QAAQ;EAACrB,IAAAA,EAAE,EAAEA,EAAE;EAAE6C,IAAAA,IAAI,EAAE7C,EAAE;EAAED,IAAAA,KAAK,EAAE,OAAOA,KAAK,KAAK,WAAW,GAAG,EAAE,GAAGA,KAAAA;EAAK,GAAA,CAAI,CAAA;EACpG;;ECVA;;;EAGG;EACqB,SAAAme,cAAcA,CAIpChhB,KAA2B,EAAA;IAC3B,MAAM;MAAE+H,OAAO;EAAE5H,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IACnC,MAAM+W,iBAAiB,GAAGhS,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;IAC3G,OAAO/C,cAAA,CAAC+R,iBAAiB,EAAC;EAAA5S,IAAAA,IAAI,EAAC,UAAU;MAAA,GAAKnE,KAAAA;EAAK,GAAA,CAAI,CAAA;EACzD;;ECFA;;;;EAIG;EACH,SAASihB,WAAWA,CAAoF;IACtGlZ,OAAO;IACPlF,KAAK;IACLkD,QAAQ;IACRH,QAAQ;IACRC,QAAQ;EACRC,EAAAA,SAAS,GAAG,KAAK;IACjBE,MAAM;IACNC,OAAO;IACP/E,QAAQ;EACR4B,EAAAA,EAAAA;EACqB,CAAA,EAAA;IACrB,MAAM;MAAEyF,WAAW;MAAE+U,YAAY;MAAED,MAAM;EAAE5F,IAAAA,UAAAA;EAAU,GAAE,GAAG1P,OAAO,CAAA;EAEjE,EAAA,MAAMkV,UAAU,GAAG/O,iBAAW,CAC5B,CAAC;EAAEsJ,IAAAA,MAAM,EAAE;EAAE3U,MAAAA,KAAAA;EAAO,KAAA;KAAgC,KAClDmD,MAAM,CAAClD,EAAE,EAAE0a,8BAAwB,CAAI3a,KAAK,EAAE0F,WAAW,EAAEkP,UAAU,CAAC,CAAC,EACzE,CAACzR,MAAM,EAAElD,EAAE,CAAC,CACb,CAAA;EAED,EAAA,MAAMoa,WAAW,GAAGhP,iBAAW,CAC7B,CAAC;EAAEsJ,IAAAA,MAAM,EAAE;EAAE3U,MAAAA,KAAAA;EAAO,KAAA;KAAgC,KAClDoD,OAAO,CAACnD,EAAE,EAAE0a,8BAAwB,CAAI3a,KAAK,EAAE0F,WAAW,EAAEkP,UAAU,CAAC,CAAC,EAC1E,CAACxR,OAAO,EAAEnD,EAAE,CAAC,CACd,CAAA;IAED,OACEkC,cAAA,CAAA,KAAA,EAAA;EAAKwC,IAAAA,SAAS,EAAC,mBAAmB;EAAC1E,IAAAA,EAAE,EAAEA,EAAE;gBACtCzD,KAAK,CAACC,OAAO,CAACiJ,WAAW,CAAC,IACzBA,WAAW,CAAChJ,GAAG,CAAC,CAACmL,MAAM,EAAE1I,CAAC,KAAI;QAC5B,MAAMgb,OAAO,GAAGS,2BAAqB,CAAI/S,MAAM,CAAC7H,KAAK,EAAEA,KAAK,CAAC,CAAA;EAC7D,MAAA,MAAM6a,YAAY,GAAGre,KAAK,CAACC,OAAO,CAACge,YAAY,CAAC,IAAIA,YAAY,CAAClN,OAAO,CAAC1F,MAAM,CAAC7H,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA;QAC7F,MAAM8a,WAAW,GAAG/X,QAAQ,IAAI8X,YAAY,IAAI7X,QAAQ,GAAG,UAAU,GAAG,EAAE,CAAA;QAE1E,MAAMoI,YAAY,GAAGA,MAAM/M,QAAQ,CAACwJ,MAAM,CAAC7H,KAAK,CAAC,CAAA;EAEjD,MAAA,MAAMqe,KAAK,GACT3T,eACE,CAAA,MAAA,EAAA;EAAAzD,QAAAA,QAAA,EAAA,CAAA9E,cAAA,CAAA,OAAA,EAAA;EACEb,UAAAA,IAAI,EAAC,OAAO;EACZrB,UAAAA,EAAE,EAAEib,cAAQ,CAACjb,EAAE,EAAEd,CAAC,CAAC;EACnBgb,UAAAA,OAAO,EAAEA,OAAO;EAChBrX,UAAAA,IAAI,EAAE7C,EAAE;EACRiD,UAAAA,QAAQ,EAAEA,QAAQ;EAClBlD,UAAAA,KAAK,EAAEyK,MAAM,CAACtL,CAAC,CAAC;EAChB4D,UAAAA,QAAQ,EAAEA,QAAQ,IAAI8X,YAAY,IAAI7X,QAAQ;EAC9C+R,UAAAA,SAAS,EAAE9R,SAAS,IAAI9D,CAAC,KAAK,CAAC;EAC/Bd,UAAAA,QAAQ,EAAE+M,YAAY;EACtBjI,UAAAA,MAAM,EAAEiX,UAAU;EAClBhX,UAAAA,OAAO,EAAEiX,WAAW;YACF,kBAAA,EAAAlF,wBAAkB,CAAIlV,EAAE,CAAA;EAC1C,SAAA,CAAA,EACFkC;sBAAO0F,MAAM,CAACxC,KAAAA;EAAa,SAAA,CAAA,CAAA;EAAA,OAAA,CAE9B,CAAA;EAED,MAAA,OAAOmV,MAAM,GACXrY,cAAe,CAAA,OAAA,EAAA;UAAAwC,SAAS,EAAE,CAAgBmW,aAAAA,EAAAA,WAAa,CAAA,CAAA;EAAA7T,QAAAA,QAAA,EACpDoX,KAAAA;EAAK,OAAA,EADIlf,CAAC,CAEL,GAERgD,cAAA,CAAA,KAAA,EAAA;UAAawC,SAAS,GAAWmW,MAAAA,EAAAA,WAAW,CAAE,CAAA;EAC5C7T,QAAAA,QAAA,EAAA9E,cAAA,CAAA,OAAA,EAAA;EAAA8E,UAAAA,QAAA,EAAQoX,KAAAA;WAAc,CAAA;SAAA,EADdlf,CAAC,CAGZ,CAAA;OACF,CAAA;EACC,GAAA,CAAA,CAAA;EAEV;;ECnFA;;;;EAIG;EACqB,SAAAmf,WAAWA,CACjCnhB,KAA2B,EAAA;IAE3B,MAAM;MACJ6C,KAAK;EACL1C,IAAAA,QAAQ,EAAE;EACR4V,MAAAA,SAAS,EAAE;EAAEgB,QAAAA,iBAAAA;EAAmB,OAAA;EAAA,KAAA;EAEnC,GAAA,GAAG/W,KAAK,CAAA;IACT,OACEuN,eAAK,CAAA,KAAA,EAAA;EAAA/F,IAAAA,SAAS,EAAC,qBAAqB;iBAClCxC,cAAC,CAAA+R,iBAAiB,EAAC;EAAA5S,MAAAA,IAAI,EAAC,OAAO;WAAKnE,KAAAA;EAAK,KAAA,CAAI,EAC7CgF,cAAA,CAAA,MAAA,EAAA;EAAMwC,MAAAA,SAAS,EAAC,YAAY;EAAAsC,MAAAA,QAAA,EAAEjH,KAAAA;EAAK,KAAA,CAAQ,CAAA;EACvC,GAAA,CAAA,CAAA;EAEV;;ECXA,SAASue,QAAQA,CAACxgB,KAAwC,EAAEyH,QAAiB,EAAA;EAC3E,EAAA,IAAIA,QAAQ,EAAE;EACZ,IAAA,OAAOhJ,KAAK,CAACqgB,IAAI,CAAE9e,KAAK,CAAC4W,MAA4B,CAACzP,OAAO,CAAC,CAC3DpF,KAAK,EAAE,CACPR,MAAM,CAAEyI,CAAC,IAAKA,CAAC,CAACyW,QAAQ,CAAC,CACzB9hB,GAAG,CAAEqL,CAAC,IAAKA,CAAC,CAAC/H,KAAK,CAAC,CAAA;EACvB,GAAA;EACD,EAAA,OAAQjC,KAAK,CAAC4W,MAA4B,CAAC3U,KAAK,CAAA;EAClD,CAAA;EAEA;;;;EAIG;EACH,SAAS8Y,YAAYA,CAAoF;IACvGzb,MAAM;IACN4C,EAAE;IACFiF,OAAO;IACPlF,KAAK;IACLkD,QAAQ;IACRH,QAAQ;IACRC,QAAQ;EACRwC,EAAAA,QAAQ,GAAG,KAAK;EAChBvC,EAAAA,SAAS,GAAG,KAAK;IACjB5E,QAAQ;IACR8E,MAAM;IACNC,OAAO;EACP0B,EAAAA,WAAAA;EACqB,CAAA,EAAA;IACrB,MAAM;MAAEY,WAAW;MAAE+U,YAAY;EAAE7F,IAAAA,UAAU,EAAE6J,WAAAA;EAAW,GAAE,GAAGvZ,OAAO,CAAA;EACtE,EAAA,MAAM0P,UAAU,GAAGpP,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAA;EAErC,EAAA,MAAM6U,WAAW,GAAGhP,iBAAW,CAC5BtN,KAAoC,IAAI;EACvC,IAAA,MAAMggB,QAAQ,GAAGQ,QAAQ,CAACxgB,KAAK,EAAEyH,QAAQ,CAAC,CAAA;EAC1C,IAAA,OAAOpC,OAAO,CAACnD,EAAE,EAAE0a,8BAAwB,CAAIoD,QAAQ,EAAErY,WAAW,EAAE+Y,WAAW,CAAC,CAAC,CAAA;EACrF,GAAC,EACD,CAACrb,OAAO,EAAEnD,EAAE,EAAE5C,MAAM,EAAEmI,QAAQ,EAAEN,OAAO,CAAC,CACzC,CAAA;EAED,EAAA,MAAMkV,UAAU,GAAG/O,iBAAW,CAC3BtN,KAAoC,IAAI;EACvC,IAAA,MAAMggB,QAAQ,GAAGQ,QAAQ,CAACxgB,KAAK,EAAEyH,QAAQ,CAAC,CAAA;EAC1C,IAAA,OAAOrC,MAAM,CAAClD,EAAE,EAAE0a,8BAAwB,CAAIoD,QAAQ,EAAErY,WAAW,EAAE+Y,WAAW,CAAC,CAAC,CAAA;EACpF,GAAC,EACD,CAACtb,MAAM,EAAElD,EAAE,EAAE5C,MAAM,EAAEmI,QAAQ,EAAEN,OAAO,CAAC,CACxC,CAAA;EAED,EAAA,MAAMkG,YAAY,GAAGC,iBAAW,CAC7BtN,KAAqC,IAAI;EACxC,IAAA,MAAMggB,QAAQ,GAAGQ,QAAQ,CAACxgB,KAAK,EAAEyH,QAAQ,CAAC,CAAA;MAC1C,OAAOnH,QAAQ,CAACsc,8BAAwB,CAAIoD,QAAQ,EAAErY,WAAW,EAAE+Y,WAAW,CAAC,CAAC,CAAA;KACjF,EACD,CAACpgB,QAAQ,EAAEhB,MAAM,EAAEmI,QAAQ,EAAEN,OAAO,CAAC,CACtC,CAAA;IAED,MAAMwZ,eAAe,GAAGC,8BAAwB,CAAI3e,KAAK,EAAE0F,WAAW,EAAEF,QAAQ,CAAC,CAAA;IAEjF,OACEkF,eACE,CAAA,QAAA,EAAA;EAAAzK,IAAAA,EAAE,EAAEA,EAAE;EACN6C,IAAAA,IAAI,EAAE7C,EAAE;EACRuF,IAAAA,QAAQ,EAAEA,QAAQ;EAClBb,IAAAA,SAAS,EAAC,cAAc;MACxB3E,KAAK,EAAE,OAAO0e,eAAe,KAAK,WAAW,GAAG9J,UAAU,GAAG8J,eAAe;EAC5Exb,IAAAA,QAAQ,EAAEA,QAAQ;MAClBH,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9B+R,IAAAA,SAAS,EAAE9R,SAAS;EACpBE,IAAAA,MAAM,EAAEiX,UAAU;EAClBhX,IAAAA,OAAO,EAAEiX,WAAW;EACpBhc,IAAAA,QAAQ,EAAE+M,YAAY;EAAA,IAAA,kBAAA,EACJ+J,wBAAkB,CAAIlV,EAAE,CAAC;EAE1CgH,IAAAA,QAAA,EAAA,CAAA,CAACzB,QAAQ,IAAInI,MAAM,CAACsN,OAAO,KAAKjM,SAAS,IAAIyD;EAAQnC,MAAAA,KAAK,EAAC,EAAE;EAAEiH,MAAAA,QAAA,EAAAnC,WAAAA;QAAqB,EACpFtI,KAAK,CAACC,OAAO,CAACiJ,WAAW,CAAC,IACzBA,WAAW,CAAChJ,GAAG,CAAC,CAAC;QAAEsD,KAAK;EAAEqF,MAAAA,KAAAA;OAAO,EAAElG,CAAC,KAAI;EACtC,MAAA,MAAM4D,QAAQ,GAAG0X,YAAY,IAAIA,YAAY,CAAClN,OAAO,CAACvN,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA;QACnE,OACEmC,cAAgB,CAAA,QAAA,EAAA;EAAAnC,QAAAA,KAAK,EAAEyK,MAAM,CAACtL,CAAC,CAAC;EAAE4D,QAAAA,QAAQ,EAAEA,QAAQ;EACjDkE,QAAAA,QAAA,EAAA5B,KAAAA;WADUlG,CAAC,CAEL,CAAA;EAEb,KAAC,CAAC,CAAA;EACG,GAAA,CAAA,CAAA;EAEb;;EC9FA;;;EAGG;EACH,SAASyf,cAAcA,CAAoF;IACzG3e,EAAE;IACFiF,OAAO,GAAG,EAAE;IACZJ,WAAW;IACX9E,KAAK;IACLkD,QAAQ;IACRH,QAAQ;IACRC,QAAQ;EACRC,EAAAA,SAAS,GAAG,KAAK;IACjB5E,QAAQ;IACR8E,MAAM;EACNC,EAAAA,OAAAA;EACqB,CAAA,EAAA;EACrB,EAAA,MAAMgI,YAAY,GAAGC,iBAAW,CAC9B,CAAC;EAAEsJ,IAAAA,MAAM,EAAE;EAAE3U,MAAAA,KAAAA;EAAK,KAAA;KAAsC,KAAK3B,QAAQ,CAAC2B,KAAK,KAAK,EAAE,GAAGkF,OAAO,CAAC0P,UAAU,GAAG5U,KAAK,CAAC,EAChH,CAAC3B,QAAQ,EAAE6G,OAAO,CAAC0P,UAAU,CAAC,CAC/B,CAAA;EAED,EAAA,MAAMwF,UAAU,GAAG/O,iBAAW,CAC5B,CAAC;EAAEsJ,IAAAA,MAAM,EAAE;EAAE3U,MAAAA,KAAAA;EAAO,KAAA;EAAA,GAAmC,KAAKmD,MAAM,CAAClD,EAAE,EAAED,KAAK,CAAC,EAC7E,CAACmD,MAAM,EAAElD,EAAE,CAAC,CACb,CAAA;EAED,EAAA,MAAMoa,WAAW,GAAGhP,iBAAW,CAC7B,CAAC;EAAEsJ,IAAAA,MAAM,EAAE;EAAE3U,MAAAA,KAAAA;EAAO,KAAA;EAAA,GAAmC,KAAKoD,OAAO,CAACnD,EAAE,EAAED,KAAK,CAAC,EAC9E,CAACC,EAAE,EAAEmD,OAAO,CAAC,CACd,CAAA;IAED,OACEjB,cAAA,CAAA,UAAA,EAAA;EACElC,IAAAA,EAAE,EAAEA,EAAE;EACN6C,IAAAA,IAAI,EAAE7C,EAAE;EACR0E,IAAAA,SAAS,EAAC,cAAc;EACxB3E,IAAAA,KAAK,EAAEA,KAAK,GAAGA,KAAK,GAAG,EAAE;EACzB8E,IAAAA,WAAW,EAAEA,WAAW;EACxB5B,IAAAA,QAAQ,EAAEA,QAAQ;EAClBH,IAAAA,QAAQ,EAAEA,QAAQ;EAClB4N,IAAAA,QAAQ,EAAE3N,QAAQ;EAClB+R,IAAAA,SAAS,EAAE9R,SAAS;MACpB4b,IAAI,EAAE3Z,OAAO,CAAC2Z,IAAI;EAClB1b,IAAAA,MAAM,EAAEiX,UAAU;EAClBhX,IAAAA,OAAO,EAAEiX,WAAW;EACpBhc,IAAAA,QAAQ,EAAE+M,YAAY;MAAA,kBAAA,EACJ+J,wBAAkB,CAAIlV,EAAE,CAAA;EAAC,GAAA,CAC3C,CAAA;EAEN,CAAA;EAEA2e,cAAc,CAACE,YAAY,GAAG;EAC5B7b,EAAAA,SAAS,EAAE,KAAK;EAChBiC,EAAAA,OAAO,EAAE,EAAE;GACZ;;ECxDD;;;EAGG;EACqB,SAAA6Z,UAAUA,CAChC5hB,KAA2B,EAAA;IAE3B,MAAM;MAAE+H,OAAO;EAAE5H,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IACnC,MAAM+W,iBAAiB,GAAGhS,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;IAC3G,OAAO/C,cAAC,CAAA+R,iBAAiB,EAAK;MAAA,GAAA/W,KAAAA;MAAS,CAAA;EACzC;;ECTA;;;;EAIG;EACqB,SAAA6hB,UAAUA,CAChC7hB,KAA2B,EAAA;IAE3B,MAAM;MAAEkB,QAAQ;MAAE6G,OAAO;EAAE5H,IAAAA,QAAAA;EAAQ,GAAE,GAAGH,KAAK,CAAA;IAC7C,MAAM+W,iBAAiB,GAAGhS,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;IAC3G,MAAMkG,YAAY,GAAGC,iBAAW,CAAErL,KAAU,IAAK3B,QAAQ,CAAC2B,KAAK,GAAG,GAAGA,KAAK,CAAA,GAAA,CAAK,GAAGtB,SAAS,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC,CAAA;IAEzG,OAAO8D,cAAC,CAAA+R,iBAAiB,EAAC;EAAA5S,IAAAA,IAAI,EAAC,MAAM;EAAK,IAAA,GAAAnE,KAAK;EAAEkB,IAAAA,QAAQ,EAAE+M,YAAAA;MAAgB,CAAA;EAC7E;;ECdA;;;EAGG;EACqB,SAAA6T,SAASA,CAC/B9hB,KAA2B,EAAA;IAE3B,MAAM;MAAE+H,OAAO;EAAE5H,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IACnC,MAAM+W,iBAAiB,GAAGhS,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;IAC3G,OAAO/C,cAAA,CAAC+R,iBAAiB,EAAC;EAAA5S,IAAAA,IAAI,EAAC,KAAK;MAAA,GAAKnE,KAAAA;EAAK,GAAA,CAAI,CAAA;EACpD;;ECVA;;;EAGG;EACqB,SAAA+hB,YAAYA,CAClC/hB,KAA2B,EAAA;IAE3B,MAAM;MAAE+H,OAAO;EAAE5H,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IACnC,MAAM+W,iBAAiB,GAAGhS,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;IAC3G,OAAO/C,cAAA,CAAC+R,iBAAiB,EAAC;EAAA5S,IAAAA,IAAI,EAAC,QAAQ;MAAA,GAAKnE,KAAAA;EAAK,GAAA,CAAI,CAAA;EACvD;;ECUA,SAAS4H,OAAOA,GAAA;IAKd,OAAO;MACLgU,aAAa;MACbiB,iBAAiB;MACjBC,cAAc;MACdM,gBAAgB;MAChBY,WAAW;MACXC,UAAU;MACVC,cAAc;MACdG,WAAW;MACXmC,UAAU;MACVO,YAAY;MACZC,cAAc;MACdC,WAAW;MACXE,WAAW;MACXxF,YAAY;MACZiG,UAAU;MACVH,cAAc;MACdI,UAAU;MACVE,YAAY;EACZD,IAAAA,SAAAA;KACD,CAAA;EACH;;EC1CA;;;EAGG;EACW,SAAUE,kBAAkBA,GAAA;IAKxC,OAAO;MACLlZ,MAAM,EAAEA,MAAM,EAAW;MACzBiN,SAAS,EAAEA,SAAS,EAAW;MAC/BnO,OAAO,EAAEA,OAAO,EAAW;MAC3Bqa,UAAU,EAAE,EAAO;MACnB3b,WAAW,EAAE,EAAO;EACpBzC,IAAAA,eAAe,EAAEqe,6BAAAA;KAClB,CAAA;EACH;;ECoOA;EACqB,MAAAC,IAInB,SAAQriB,eAAiD,CAAA;EAMzD;;;;;EAKG;IACHC,WAAAA,CAAYC,KAAyB,EAAA;MACnC,KAAK,CAACA,KAAK,CAAC,CAAA;EAZd;;EAEG;EAFH,IAAA,IAAA,CAGAoiB,WAAW,GAAA,KAAA,CAAA,CAAA;EAmLX;;;;EAIG;EAJH,IAAA,IAAA,CAKAC,eAAe,GAAG,CAACjjB,QAAuB,EAAE0J,MAAkB,KAAmB;EAC/E;QACA,IAAIA,MAAM,CAACpF,MAAM,KAAK,CAAC,IAAI,OAAOtE,QAAQ,KAAK,QAAQ,EAAE;EACvD,QAAA,OAAOA,QAAQ,CAAA;EAChB,OAAA;EAED;EACA,MAAA,MAAMkc,IAAI,GAAsBgH,yBAAK,CAACljB,QAAQ,EAAE0J,MAA6B,CAAC,CAAA;EAC9E,MAAA,IAAIzJ,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;EAC3B,QAAA,OAAOuK,MAAM,CAACC,IAAI,CAAC0R,IAAI,CAAC,CAAC/b,GAAG,CAAEE,GAAW,IAAK6b,IAAI,CAAC7b,GAAG,CAAC,CAAiB,CAAA;EACzE,OAAA;EAED,MAAA,OAAO6b,IAAS,CAAA;OACjB,CAAA;EAED;;;;EAIG;EAJH,IAAA,IAAA,CAKAiH,aAAa,GAAG,CAACC,UAAyB,EAAEpjB,QAAY,KAAgB;EACtE,MAAA,MAAMqjB,WAAW,GAAGA,CAACC,IAAuB,EAAEC,GAAA,GAAkB,EAAE,EAAEC,KAAoB,GAAA,CAAC,EAAE,CAAC,KAAI;UAC9FjZ,MAAM,CAACC,IAAI,CAAC8Y,IAAI,CAAC,CAACG,OAAO,CAAEpjB,GAAW,IAAI;EACxC,UAAA,IAAI,OAAOijB,IAAI,CAACjjB,GAAG,CAAC,KAAK,QAAQ,EAAE;EACjC,YAAA,MAAMqjB,QAAQ,GAAGF,KAAK,CAACrjB,GAAG,CAAEwjB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEtjB,GAAG,CAAC,CAAC,CAAA;EACpD;EACA,YAAA,IAAIijB,IAAI,CAACjjB,GAAG,CAAC,CAACujB,oCAA8B,CAAC,IAAIN,IAAI,CAACjjB,GAAG,CAAC,CAACwjB,cAAQ,CAAC,KAAK,EAAE,EAAE;gBAC3EN,GAAG,CAAClhB,IAAI,CAACihB,IAAI,CAACjjB,GAAG,CAAC,CAACwjB,cAAQ,CAAC,CAAC,CAAA;EAC9B,aAAA,MAAM;gBACLR,WAAW,CAACC,IAAI,CAACjjB,GAAG,CAAC,EAAEkjB,GAAG,EAAEG,QAAQ,CAAC,CAAA;EACtC,aAAA;EACF,WAAA,MAAM,IAAIrjB,GAAG,KAAKwjB,cAAQ,IAAIP,IAAI,CAACjjB,GAAG,CAAC,KAAK,EAAE,EAAE;EAC/CmjB,YAAAA,KAAK,CAACC,OAAO,CAAEE,IAAI,IAAI;EACrB,cAAA,MAAMG,SAAS,GAAGC,uBAAI,CAAC/jB,QAAQ,EAAE2jB,IAAI,CAAC,CAAA;EACtC;EACA;gBACA,IAAI,OAAOG,SAAS,KAAK,QAAQ,IAAIE,2BAAQ,CAACF,SAAS,CAAC,EAAE;EACxDP,gBAAAA,GAAG,CAAClhB,IAAI,CAACshB,IAAI,CAAC,CAAA;EACf,eAAA;EACH,aAAC,CAAC,CAAA;EACH,WAAA;EACH,SAAC,CAAC,CAAA;EACF,QAAA,OAAOJ,GAAG,CAAA;SACX,CAAA;QAED,OAAOF,WAAW,CAACD,UAAU,CAAC,CAAA;OAC/B,CAAA;EAED;;;;;;;;;;EAUG;MAVH,IAWAthB,CAAAA,QAAQ,GAAG,CAAC9B,QAAuB,EAAE0C,cAA+B,EAAEgB,EAAW,KAAI;QACnF,MAAM;UAAEugB,WAAW;UAAEC,aAAa;UAAEC,QAAQ;UAAEC,UAAU;UAAEC,YAAY;EAAEviB,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAAClB,KAAK,CAAA;QAC/F,MAAM;UAAEI,WAAW;EAAEF,QAAAA,MAAAA;SAAQ,GAAG,IAAI,CAACiB,KAAK,CAAA;QAC1C,IAAIqF,cAAQ,CAACpH,QAAQ,CAAC,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;UACjD,MAAM4M,QAAQ,GAAG,IAAI,CAAC0X,iBAAiB,CAAC,IAAI,CAAC1jB,KAAK,EAAEZ,QAAQ,CAAC,CAAA;UAC7DA,QAAQ,GAAG4M,QAAQ,CAAC5M,QAAQ,CAAA;EAC7B,OAAA;EAED,MAAA,MAAMukB,YAAY,GAAG,CAACH,UAAU,IAAIC,YAAY,CAAA;EAChD,MAAA,IAAItiB,KAAK,GAAgC;UAAE/B,QAAQ;EAAEc,QAAAA,MAAAA;SAAQ,CAAA;QAC7D,IAAI8C,WAAW,GAAG5D,QAAQ,CAAA;EAE1B,MAAA,IAAIkkB,aAAa,KAAK,IAAI,IAAIC,QAAQ,KAAK,IAAI,EAAE;UAC/C,MAAMK,eAAe,GAAGxjB,WAAW,CAACsG,cAAc,CAACxG,MAAM,EAAEd,QAAQ,CAAC,CAAA;UACpE,MAAMojB,UAAU,GAAGpiB,WAAW,CAACyjB,YAAY,CAACD,eAAe,EAAE,EAAE,EAAExkB,QAAQ,CAAC,CAAA;UAE1E,MAAM0kB,UAAU,GAAG,IAAI,CAACvB,aAAa,CAACC,UAAU,EAAEpjB,QAAQ,CAAC,CAAA;UAE3D4D,WAAW,GAAG,IAAI,CAACqf,eAAe,CAACjjB,QAAQ,EAAE0kB,UAAU,CAAC,CAAA;EACxD3iB,QAAAA,KAAK,GAAG;EACN/B,UAAAA,QAAQ,EAAE4D,WAAAA;WACX,CAAA;EACF,OAAA;EAED,MAAA,IAAI2gB,YAAY,EAAE;EAChB,QAAA,MAAMI,gBAAgB,GAAG,IAAI,CAACC,QAAQ,CAAChhB,WAAW,CAAC,CAAA;EACnD,QAAA,IAAIqR,MAAM,GAAG0P,gBAAgB,CAAC1P,MAAM,CAAA;EACpC,QAAA,IAAIxS,WAAW,GAAGkiB,gBAAgB,CAACliB,WAAW,CAAA;UAC9C,MAAMoiB,sBAAsB,GAAG5P,MAAM,CAAA;UACrC,MAAM6P,2BAA2B,GAAGriB,WAAW,CAAA;EAC/C,QAAA,IAAIwhB,WAAW,EAAE;EACf,UAAA,MAAMc,MAAM,GAAGC,yBAAmB,CAACL,gBAAgB,EAAEV,WAAW,CAAC,CAAA;YACjExhB,WAAW,GAAGsiB,MAAM,CAACtiB,WAAW,CAAA;YAChCwS,MAAM,GAAG8P,MAAM,CAAC9P,MAAM,CAAA;EACvB,SAAA;EACDlT,QAAAA,KAAK,GAAG;EACN/B,UAAAA,QAAQ,EAAE4D,WAAW;YACrBqR,MAAM;YACNxS,WAAW;YACXoiB,sBAAsB;EACtBC,UAAAA,2BAAAA;WACD,CAAA;EACF,OAAA,MAAM,IAAI,CAACV,UAAU,IAAI1hB,cAAc,EAAE;EACxC,QAAA,MAAMD,WAAW,GAAGwhB,WAAW,GAC1BlQ,kBAAY,CAACrR,cAAc,EAAEuhB,WAAW,EAAE,mBAAmB,CAAoB,GAClFvhB,cAAc,CAAA;EAClBX,QAAAA,KAAK,GAAG;EACN/B,UAAAA,QAAQ,EAAE4D,WAAW;EACrBnB,UAAAA,WAAW,EAAEA,WAAW;YACxBwS,MAAM,EAAEgQ,iBAAW,CAACxiB,WAAW,CAAA;WAChC,CAAA;EACF,OAAA;QACD,IAAI,CAACH,QAAQ,CAACP,KAA2B,EAAE,MAAMD,QAAQ,IAAIA,QAAQ,CAAC;UAAE,GAAG,IAAI,CAACC,KAAK;UAAE,GAAGA,KAAAA;SAAO,EAAE2B,EAAE,CAAC,CAAC,CAAA;OACxG,CAAA;EAED;;;;;EAKG;MALH,IAMAwhB,CAAAA,KAAK,GAAG,MAAK;QACX,MAAM;EAAEpjB,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAAClB,KAAK,CAAA;QAC/B,MAAMgM,QAAQ,GAAG,IAAI,CAAC0X,iBAAiB,CAAC,IAAI,CAAC1jB,KAAK,EAAEuB,SAAS,CAAC,CAAA;EAC9D,MAAA,MAAMyB,WAAW,GAAGgJ,QAAQ,CAAC5M,QAAQ,CAAA;EACrC,MAAA,MAAM+B,KAAK,GAAG;EACZ/B,QAAAA,QAAQ,EAAE4D,WAAW;UACrBnB,WAAW,EAAE,EAAE;EACfwS,QAAAA,MAAM,EAAE,EAAa;EACrB4P,QAAAA,sBAAsB,EAAE,EAAa;EACrCC,QAAAA,2BAA2B,EAAE,EAAE;SACV,CAAA;QAEvB,IAAI,CAACxiB,QAAQ,CAACP,KAAK,EAAE,MAAMD,QAAQ,IAAIA,QAAQ,CAAC;UAAE,GAAG,IAAI,CAACC,KAAK;UAAE,GAAGA,KAAAA;EAAK,OAAE,CAAC,CAAC,CAAA;OAC9E,CAAA;EAED;;;;;EAKG;EALH,IAAA,IAAA,CAMA6E,MAAM,GAAG,CAAClD,EAAU,EAAEwY,IAAS,KAAI;QACjC,MAAM;EAAEtV,QAAAA,MAAAA;SAAQ,GAAG,IAAI,CAAChG,KAAK,CAAA;EAC7B,MAAA,IAAIgG,MAAM,EAAE;EACVA,QAAAA,MAAM,CAAClD,EAAE,EAAEwY,IAAI,CAAC,CAAA;EACjB,OAAA;OACF,CAAA;EAED;;;;;EAKG;EALH,IAAA,IAAA,CAMArV,OAAO,GAAG,CAACnD,EAAU,EAAEwY,IAAS,KAAI;QAClC,MAAM;EAAErV,QAAAA,OAAAA;SAAS,GAAG,IAAI,CAACjG,KAAK,CAAA;EAC9B,MAAA,IAAIiG,OAAO,EAAE;EACXA,QAAAA,OAAO,CAACnD,EAAE,EAAEwY,IAAI,CAAC,CAAA;EAClB,OAAA;OACF,CAAA;EAED;;;;;;;EAOG;MAPH,IAQAiJ,CAAAA,QAAQ,GAAI3jB,KAAqB,IAAI;QACnCA,KAAK,CAACK,cAAc,EAAE,CAAA;EACtB,MAAA,IAAIL,KAAK,CAAC4W,MAAM,KAAK5W,KAAK,CAAC2B,aAAa,EAAE;EACxC,QAAA,OAAA;EACD,OAAA;QAED3B,KAAK,CAAC4jB,OAAO,EAAE,CAAA;QACf,MAAM;UAAElB,aAAa;UAAED,WAAW;UAAEG,UAAU;EAAEe,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAACvkB,KAAK,CAAA;QACvE,IAAI;EAAEZ,QAAAA,QAAQ,EAAE4D,WAAAA;SAAa,GAAG,IAAI,CAAC7B,KAAK,CAAA;QAC1C,MAAM;UAAEjB,MAAM;EAAEE,QAAAA,WAAAA;SAAa,GAAG,IAAI,CAACe,KAAK,CAAA;QAE1C,IAAImiB,aAAa,KAAK,IAAI,EAAE;UAC1B,MAAMM,eAAe,GAAGxjB,WAAW,CAACsG,cAAc,CAACxG,MAAM,EAAE8C,WAAW,CAAC,CAAA;UACvE,MAAMwf,UAAU,GAAGpiB,WAAW,CAACyjB,YAAY,CAACD,eAAe,EAAE,EAAE,EAAE5gB,WAAW,CAAC,CAAA;UAE7E,MAAM8gB,UAAU,GAAG,IAAI,CAACvB,aAAa,CAACC,UAAU,EAAExf,WAAW,CAAC,CAAA;UAE9DA,WAAW,GAAG,IAAI,CAACqf,eAAe,CAACrf,WAAW,EAAE8gB,UAAU,CAAC,CAAA;EAC5D,OAAA;EAED,MAAA,IAAIN,UAAU,IAAI,IAAI,CAACiB,YAAY,EAAE,EAAE;EACrC;EACA;EACA,QAAA,MAAM5iB,WAAW,GAAGwhB,WAAW,IAAI,EAAE,CAAA;UACrC,MAAMhP,MAAM,GAAGgP,WAAW,GAAGgB,iBAAW,CAAChB,WAAW,CAAC,GAAG,EAAE,CAAA;UAC1D,IAAI,CAAC3hB,QAAQ,CACX;EACEtC,UAAAA,QAAQ,EAAE4D,WAAW;YACrBqR,MAAM;YACNxS,WAAW;EACXoiB,UAAAA,sBAAsB,EAAE,EAAE;EAC1BC,UAAAA,2BAA2B,EAAE,EAAE;EAChC,SAAA,EACD,MAAK;EACH,UAAA,IAAIK,QAAQ,EAAE;EACZA,YAAAA,QAAQ,CAAC;gBAAE,GAAG,IAAI,CAACpjB,KAAK;EAAE/B,cAAAA,QAAQ,EAAE4D,WAAW;EAAE0hB,cAAAA,MAAM,EAAE,WAAA;eAAa,EAAE9jB,KAAK,CAAC,CAAA;EAC/E,WAAA;EACH,SAAC,CACF,CAAA;EACF,OAAA;OACF,CAAA;EA9XC,IAAA,IAAI,CAACZ,KAAK,CAAC2kB,SAAS,EAAE;EACpB,MAAA,MAAM,IAAIxN,KAAK,CAAC,wDAAwD,CAAC,CAAA;EAC1E,KAAA;EAED,IAAA,IAAI,CAAChW,KAAK,GAAG,IAAI,CAACuiB,iBAAiB,CAAC1jB,KAAK,EAAEA,KAAK,CAACZ,QAAQ,CAAC,CAAA;MAC1D,IAAI,IAAI,CAACY,KAAK,CAACkB,QAAQ,IAAI,CAAC+K,gBAAU,CAAC,IAAI,CAAC9K,KAAK,CAAC/B,QAAQ,EAAE,IAAI,CAACY,KAAK,CAACZ,QAAQ,CAAC,EAAE;QAChF,IAAI,CAACY,KAAK,CAACkB,QAAQ,CAAC,IAAI,CAACC,KAAK,CAAC,CAAA;EAChC,KAAA;EACD,IAAA,IAAI,CAACihB,WAAW,gBAAGwC,eAAS,EAAE,CAAA;EAChC,GAAA;EAEA;;;;;EAKG;IACHC,gCAAgCA,CAACvhB,SAA6B,EAAA;MAC5D,MAAM8Y,SAAS,GAAG,IAAI,CAACsH,iBAAiB,CAACpgB,SAAS,EAAEA,SAAS,CAAClE,QAAQ,CAAC,CAAA;EACvE,IAAA,IACE,CAAC6M,gBAAU,CAACmQ,SAAS,CAAChd,QAAQ,EAAEkE,SAAS,CAAClE,QAAQ,CAAC,IACnD,CAAC6M,gBAAU,CAACmQ,SAAS,CAAChd,QAAQ,EAAE,IAAI,CAAC+B,KAAK,CAAC/B,QAAQ,CAAC,IACpDkE,SAAS,CAACpC,QAAQ,EAClB;EACAoC,MAAAA,SAAS,CAACpC,QAAQ,CAACkb,SAAS,CAAC,CAAA;EAC9B,KAAA;EACD,IAAA,IAAI,CAAC1a,QAAQ,CAAC0a,SAAS,CAAC,CAAA;EAC1B,GAAA;EAEA;;;;;;;EAOG;EACHsH,EAAAA,iBAAiBA,CAAC1jB,KAAyB,EAAE8kB,aAAiB,EAAA;EAC5D,IAAA,MAAM3jB,KAAK,GAAuB,IAAI,CAACA,KAAK,IAAI,EAAE,CAAA;EAClD,IAAA,MAAMjB,MAAM,GAAG,QAAQ,IAAIF,KAAK,GAAGA,KAAK,CAACE,MAAM,GAAG,IAAI,CAACF,KAAK,CAACE,MAAM,CAAA;EACnE,IAAA,MAAMqE,QAAQ,GAAsB,CAAC,UAAU,IAAIvE,KAAK,GAAGA,KAAK,CAACuE,QAAS,GAAG,IAAI,CAACvE,KAAK,CAACuE,QAAS,KAAK,EAAE,CAAA;EACxG,IAAA,MAAMwgB,IAAI,GAAG,OAAOD,aAAa,KAAK,WAAW,CAAA;EACjD,IAAA,MAAMrB,YAAY,GAAG,cAAc,IAAIzjB,KAAK,GAAGA,KAAK,CAACyjB,YAAY,GAAG,IAAI,CAACzjB,KAAK,CAACyjB,YAAY,CAAA;MAC3F,MAAME,YAAY,GAAGoB,IAAI,IAAI,CAAC/kB,KAAK,CAACwjB,UAAU,IAAIC,YAAY,CAAA;MAC9D,MAAMxB,UAAU,GAAG/hB,MAAM,CAAA;EACzB,IAAA,MAAM8kB,qCAAqC,GACzC,uCAAuC,IAAIhlB,KAAK,GAC5CA,KAAK,CAACglB,qCAAqC,GAC3C,IAAI,CAAChlB,KAAK,CAACglB,qCAAqC,CAAA;EACtD,IAAA,IAAI5kB,WAAW,GAA6Be,KAAK,CAACf,WAAW,CAAA;EAC7D,IAAA,IACE,CAACA,WAAW,IACZA,WAAW,CAAC6kB,qBAAqB,CAACjlB,KAAK,CAAC2kB,SAAS,EAAE1C,UAAU,EAAE+C,qCAAqC,CAAC,EACrG;QACA5kB,WAAW,GAAG8kB,uBAAiB,CAAUllB,KAAK,CAAC2kB,SAAS,EAAE1C,UAAU,EAAE+C,qCAAqC,CAAC,CAAA;EAC7G,KAAA;MACD,MAAM5lB,QAAQ,GAAMgB,WAAW,CAACM,mBAAmB,CAACR,MAAM,EAAE4kB,aAAa,CAAM,CAAA;MAC/E,MAAMlB,eAAe,GAAGxjB,WAAW,CAACsG,cAAc,CAACxG,MAAM,EAAEd,QAAQ,CAAC,CAAA;MAEpE,MAAM+lB,gBAAgB,GAAGA,MAAwB;QAC/C,IAAInlB,KAAK,CAACwjB,UAAU,EAAE;UACpB,OAAO;EAAEnP,UAAAA,MAAM,EAAE,EAAE;EAAExS,UAAAA,WAAW,EAAE,EAAE;WAAE,CAAA;EACvC,OAAA,MAAM,IAAI,CAAC7B,KAAK,CAACyjB,YAAY,EAAE;UAC9B,OAAO;EACLpP,UAAAA,MAAM,EAAElT,KAAK,CAAC8iB,sBAAsB,IAAI,EAAE;EAC1CpiB,UAAAA,WAAW,EAAEV,KAAK,CAAC+iB,2BAA2B,IAAI,EAAE;WACrD,CAAA;EACF,OAAA;QACD,OAAO;EACL7P,QAAAA,MAAM,EAAElT,KAAK,CAACkT,MAAM,IAAI,EAAE;EAC1BxS,QAAAA,WAAW,EAAEV,KAAK,CAACU,WAAW,IAAI,EAAE;SACrC,CAAA;OACF,CAAA;EAED,IAAA,IAAIwS,MAA6B,CAAA;EACjC,IAAA,IAAIxS,WAAuC,CAAA;EAC3C,IAAA,IAAIoiB,sBAAsB,GAA0B9iB,KAAK,CAAC8iB,sBAAsB,CAAA;EAChF,IAAA,IAAIC,2BAA2B,GAAmB/iB,KAAK,CAAC+iB,2BAA2B,CAAA;EACnF,IAAA,IAAIP,YAAY,EAAE;QAChB,MAAMI,gBAAgB,GAAG,IAAI,CAACC,QAAQ,CAAC5kB,QAAQ,EAAEc,MAAM,EAAEE,WAAW,CAAC,CAAA;QACrEiU,MAAM,GAAG0P,gBAAgB,CAAC1P,MAAM,CAAA;QAChCxS,WAAW,GAAGkiB,gBAAgB,CAACliB,WAAW,CAAA;EAC1CoiB,MAAAA,sBAAsB,GAAG5P,MAAM,CAAA;EAC/B6P,MAAAA,2BAA2B,GAAGriB,WAAW,CAAA;EAC1C,KAAA,MAAM;EACL,MAAA,MAAMujB,aAAa,GAAGD,gBAAgB,EAAE,CAAA;QACxC9Q,MAAM,GAAG+Q,aAAa,CAAC/Q,MAAM,CAAA;QAC7BxS,WAAW,GAAGujB,aAAa,CAACvjB,WAAW,CAAA;EACxC,KAAA;MACD,IAAI7B,KAAK,CAACqjB,WAAW,EAAE;QACrB,MAAMc,MAAM,GAAGC,yBAAmB,CAAC;UAAEviB,WAAW;EAAEwS,QAAAA,MAAAA;EAAM,OAAE,EAAErU,KAAK,CAACqjB,WAAW,CAAC,CAAA;QAC9ExhB,WAAW,GAAGsiB,MAAM,CAACtiB,WAAW,CAAA;QAChCwS,MAAM,GAAG8P,MAAM,CAAC9P,MAAM,CAAA;EACvB,KAAA;MACD,MAAMlR,QAAQ,GAAG/C,WAAW,CAAC6G,UAAU,CACrC2c,eAAe,EACfrf,QAAQ,CAAC,gBAAgB,CAAC,EAC1BnF,QAAQ,EACRY,KAAK,CAACkG,QAAQ,EACdlG,KAAK,CAACmG,WAAW,CAClB,CAAA;EACD,IAAA,MAAMiW,SAAS,GAAuB;QACpChc,WAAW;QACXF,MAAM;QACNqE,QAAQ;QACRpB,QAAQ;QACR/D,QAAQ;QACR2lB,IAAI;QACJ1Q,MAAM;QACNxS,WAAW;QACXoiB,sBAAsB;EACtBC,MAAAA,2BAAAA;OACD,CAAA;EACD,IAAA,OAAO9H,SAAS,CAAA;EAClB,GAAA;EAEA;;;;;EAKG;EACHlH,EAAAA,qBAAqBA,CAAC5R,SAA6B,EAAE8Y,SAA6B,EAAA;EAChF,IAAA,OAAOiJ,kBAAY,CAAC,IAAI,EAAE/hB,SAAS,EAAE8Y,SAAS,CAAC,CAAA;EACjD,GAAA;EAEA;;;;;;EAMG;EACH4H,EAAAA,QAAQA,CACN5kB,QAAuB,EACvBc,MAAM,GAAG,IAAI,CAACF,KAAK,CAACE,MAAM,EAC1BolB,cAAyC,EAAA;MAEzC,MAAMllB,WAAW,GAAGklB,cAAc,GAAGA,cAAc,GAAG,IAAI,CAACnkB,KAAK,CAACf,WAAW,CAAA;MAC5E,MAAM;QAAEmlB,cAAc;QAAEC,eAAe;EAAEjhB,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAACvE,KAAK,CAAA;MAChE,MAAMylB,cAAc,GAAGrlB,WAAW,CAACsG,cAAc,CAACxG,MAAM,EAAEd,QAAQ,CAAC,CAAA;EACnE,IAAA,OAAOgB,WAAW,CACfslB,YAAY,EAAE,CACdC,gBAAgB,CAACvmB,QAAQ,EAAEqmB,cAAc,EAAEF,cAAc,EAAEC,eAAe,EAAEjhB,QAAQ,CAAC,CAAA;EAC1F,GAAA;EAEA;IACAqhB,YAAYA,CAACzlB,QAA2B,EAAA;MACtC,MAAM;QAAEkU,MAAM;QAAExS,WAAW;QAAE3B,MAAM;EAAEqE,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAACpD,KAAK,CAAA;MAC5D,MAAM;EAAEmF,MAAAA,WAAAA;OAAa,GAAG,IAAI,CAACtG,KAAK,CAAA;EAClC,IAAA,MAAM+H,OAAO,GAAGtD,kBAAY,CAAUF,QAAQ,CAAC,CAAA;MAC/C,MAAM6V,iBAAiB,GAAGrV,iBAAW,CAA+B,mBAAmB,EAAE5E,QAAQ,EAAE4H,OAAO,CAAC,CAAA;EAE3G,IAAA,IAAIsM,MAAM,IAAIA,MAAM,CAAC3Q,MAAM,EAAE;QAC3B,OACEsB,cAAA,CAACoV,iBAAiB,EAAA;EAChB/F,QAAAA,MAAM,EAAEA,MAAM;EACdxS,QAAAA,WAAW,EAAEA,WAAW,IAAI,EAAE;EAC9B3B,QAAAA,MAAM,EAAEA,MAAM;EACdqE,QAAAA,QAAQ,EAAEA,QAAQ;EAClB+B,QAAAA,WAAW,EAAEA,WAAW;EACxBnG,QAAAA,QAAQ,EAAEA,QAAAA;EAAQ,OAAA,CAClB,CAAA;EAEL,KAAA;EACD,IAAA,OAAO,IAAI,CAAA;EACb,GAAA;EA0NA;EACA0lB,EAAAA,WAAWA,GAAA;EAAA,IAAA,IAAAC,qBAAA,CAAA;MACT,MAAM;EAAEjiB,MAAAA,eAAe,EAAEkiB,qBAAqB;EAAExhB,MAAAA,QAAQ,GAAG,EAAA;OAAI,GAAG,IAAI,CAACvE,KAAK,CAAA;MAC5E,MAAM;EAAEI,MAAAA,WAAAA;OAAa,GAAG,IAAI,CAACe,KAAK,CAAA;MAClC,MAAM;QAAE2H,MAAM;QAAEiN,SAAS;QAAEnO,OAAO;QAAEtB,WAAW;EAAEzC,MAAAA,eAAAA;OAAiB,GAAGme,kBAAkB,EAAW,CAAA;MAClG,OAAO;EACLlZ,MAAAA,MAAM,EAAE;EAAE,QAAA,GAAGA,MAAM;UAAE,GAAG,IAAI,CAAC9I,KAAK,CAAC8I,MAAAA;SAAQ;EAC3CiN,MAAAA,SAAS,EAAE;EACT,QAAA,GAAGA,SAAS;EACZ,QAAA,GAAG,IAAI,CAAC/V,KAAK,CAAC+V,SAAS;EACvBC,QAAAA,eAAe,EAAE;YACf,GAAGD,SAAS,CAACC,eAAe;EAC5B,UAAA,IAAA,CAAA8P,qBAAA,GAAG,IAAI,CAAC9lB,KAAK,CAAC+V,SAAS,MAAA,IAAA,IAAA+P,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAApBA,qBAAA,CAAsB9P,eAAe,CAAA;EACzC,SAAA;SACF;EACDpO,MAAAA,OAAO,EAAE;EAAE,QAAA,GAAGA,OAAO;UAAE,GAAG,IAAI,CAAC5H,KAAK,CAAC4H,OAAAA;SAAS;EAC9Cqa,MAAAA,UAAU,EAAE,IAAI,CAACjiB,KAAK,CAACE,MAAM;EAC7BoG,MAAAA,WAAW,EAAE,IAAI,CAACtG,KAAK,CAACsG,WAAW,IAAIA,WAAW;QAClDlG,WAAW;QACXyD,eAAe,EAAEkiB,qBAAqB,IAAIliB,eAAe;QACzDa,eAAe,EAAEH,QAAQ,CAACyhB,2BAAqB,CAAA;OAChD,CAAA;EACH,GAAA;EAEA;EACAC,EAAAA,MAAMA,GAAA;EACJ,IAAA,IAAI,IAAI,CAAC7D,WAAW,CAAC8D,OAAO,EAAE;QAC5B,IAAI,CAAC9D,WAAW,CAAC8D,OAAO,CAACC,aAAa,CACpC,IAAIC,WAAW,CAAC,QAAQ,EAAE;EACxBC,QAAAA,UAAU,EAAE,IAAA;EACb,OAAA,CAAC,CACH,CAAA;EACD,MAAA,IAAI,CAACjE,WAAW,CAAC8D,OAAO,CAACI,aAAa,EAAE,CAAA;EACzC,KAAA;EACH,GAAA;EAEA;;;;;EAKG;IACHC,YAAYA,CAACxN,KAA0B,EAAA;MACrC,MAAM;EAAE7S,MAAAA,QAAQ,GAAG,MAAM;EAAEC,MAAAA,WAAW,GAAG,GAAA;OAAK,GAAG,IAAI,CAACnG,KAAK,CAAA;MAC3D,MAAM;EAAEkc,MAAAA,QAAAA;EAAU,KAAA,GAAGnD,KAAK,CAAA;EAC1B,IAAA,MAAMgK,IAAI,GAAGyD,2BAAO,CAACtK,QAAQ,CAAC,CAAA;EAC9B,IAAA,IAAI6G,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;EAClB;EACAA,MAAAA,IAAI,CAAC,CAAC,CAAC,GAAG7c,QAAQ,CAAA;EACnB,KAAA,MAAM;EACL;EACA6c,MAAAA,IAAI,CAAC0D,OAAO,CAACvgB,QAAQ,CAAC,CAAA;EACvB,KAAA;EAED,IAAA,MAAMwgB,SAAS,GAAG3D,IAAI,CAACrO,IAAI,CAACvO,WAAW,CAAC,CAAA;MACxC,IAAIiM,KAAK,GAAG,IAAI,CAACgQ,WAAW,CAAC8D,OAAO,CAACS,QAAQ,CAACD,SAAS,CAAC,CAAA;MACxD,IAAI,CAACtU,KAAK,EAAE;EACV;EACAA,MAAAA,KAAK,GAAG,IAAI,CAACgQ,WAAW,CAAC8D,OAAO,CAACU,aAAa,CAAC,CAAA,UAAA,EAAaF,SAAS,CAAA,CAAE,CAAC,CAAA;EACzE,KAAA;EACD,IAAA,IAAItU,KAAK,IAAIA,KAAK,CAAC1O,MAAM,EAAE;EACzB;EACA0O,MAAAA,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,CAAA;EACjB,KAAA;EACD,IAAA,IAAIA,KAAK,EAAE;QACTA,KAAK,CAACyU,KAAK,EAAE,CAAA;EACd,KAAA;EACH,GAAA;EAEA;;;;EAIG;EACHpC,EAAAA,YAAYA,GAAA;MACV,MAAM;QAAEpB,WAAW;QAAEyD,sBAAsB;QAAEC,iBAAiB;EAAEC,MAAAA,OAAAA;OAAS,GAAG,IAAI,CAAChnB,KAAK,CAAA;MACtF,MAAM;EAAEZ,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAAC+B,KAAK,CAAA;EAC/B,IAAA,MAAM4iB,gBAAgB,GAAG,IAAI,CAACC,QAAQ,CAAC5kB,QAAQ,CAAC,CAAA;EAChD,IAAA,IAAIiV,MAAM,GAAG0P,gBAAgB,CAAC1P,MAAM,CAAA;EACpC,IAAA,IAAIxS,WAAW,GAAGkiB,gBAAgB,CAACliB,WAAW,CAAA;MAC9C,MAAMoiB,sBAAsB,GAAG5P,MAAM,CAAA;MACrC,MAAM6P,2BAA2B,GAAGriB,WAAW,CAAA;MAC/C,IAAIwS,MAAM,CAAC3Q,MAAM,GAAG,CAAC,IAAK2f,WAAW,IAAIyD,sBAAuB,EAAE;EAChE,MAAA,IAAIzD,WAAW,EAAE;EACf,QAAA,MAAMc,MAAM,GAAGC,yBAAmB,CAACL,gBAAgB,EAAEV,WAAW,CAAC,CAAA;UACjExhB,WAAW,GAAGsiB,MAAM,CAACtiB,WAAW,CAAA;UAChCwS,MAAM,GAAG8P,MAAM,CAAC9P,MAAM,CAAA;EACvB,OAAA;EACD,MAAA,IAAI0S,iBAAiB,EAAE;EACrB,QAAA,IAAI,OAAOA,iBAAiB,KAAK,UAAU,EAAE;EAC3CA,UAAAA,iBAAiB,CAAC1S,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;EAC7B,SAAA,MAAM;EACL,UAAA,IAAI,CAACkS,YAAY,CAAClS,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;EAC7B,SAAA;EACF,OAAA;QACD,IAAI,CAAC3S,QAAQ,CACX;UACE2S,MAAM;UACNxS,WAAW;UACXoiB,sBAAsB;EACtBC,QAAAA,2BAAAA;EACD,OAAA,EACD,MAAK;EACH,QAAA,IAAI8C,OAAO,EAAE;YACXA,OAAO,CAAC3S,MAAM,CAAC,CAAA;EAChB,SAAA,MAAM;EACLL,UAAAA,OAAO,CAAC+E,KAAK,CAAC,wBAAwB,EAAE1E,MAAM,CAAC,CAAA;EAChD,SAAA;EACH,OAAC,CACF,CAAA;EACD,MAAA,OAAO,KAAK,CAAA;EACb,KAAA;EACD,IAAA,OAAO,IAAI,CAAA;EACb,GAAA;EAEA;;EAEG;EACHzP,EAAAA,MAAMA,GAAA;MACJ,MAAM;QACJkF,QAAQ;QACRhH,EAAE;QACFoD,QAAQ;QACRC,WAAW;EACXqB,MAAAA,SAAS,GAAG,EAAE;QACdyf,OAAO;QACPthB,IAAI;QACJuhB,MAAM;QACN1P,MAAM;QACNsE,MAAM;QACNqL,YAAY;QACZC,OAAO;QACPC,aAAa;EACbC,MAAAA,eAAe,GAAG,KAAK;EACvB1hB,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;QAChBS,WAAW;EACXihB,MAAAA,aAAa,GAAG,KAAK;EACrBC,MAAAA,oBAAAA;OACD,GAAG,IAAI,CAACxnB,KAAK,CAAA;MAEd,MAAM;QAAEE,MAAM;QAAEqE,QAAQ;QAAEnF,QAAQ;QAAEyC,WAAW;EAAEsB,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAAChC,KAAK,CAAA;EACxE,IAAA,MAAMhB,QAAQ,GAAG,IAAI,CAAC0lB,WAAW,EAAE,CAAA;MACnC,MAAM;EAAE7c,MAAAA,WAAW,EAAEsD,YAAAA;OAAc,GAAGnM,QAAQ,CAAC2I,MAAM,CAAA;MACrD,MAAM;EAAEoP,MAAAA,YAAAA;EAAc,KAAA,GAAG/X,QAAQ,CAAC4V,SAAS,CAACC,eAAe,CAAA;EAC3D;EACA;EACA;EACA,IAAA,MAAMyR,EAAE,GAAGD,oBAAoB,GAAGP,OAAO,GAAG1lB,SAAS,CAAA;EACrD,IAAA,MAAMmmB,OAAO,GAAGF,oBAAoB,IAAIP,OAAO,IAAI,MAAM,CAAA;MAEzD,IAAI;EAAE,MAAA,CAACU,4BAAsB,GAAGC,aAAa,GAAG,EAAE;EAAA,KAAE,GAAGnjB,kBAAY,CAAUF,QAAQ,CAAC,CAAA;EACtF,IAAA,IAAIqB,QAAQ,EAAE;EACZgiB,MAAAA,aAAa,GAAG;EAAE,QAAA,GAAGA,aAAa;EAAE5nB,QAAAA,KAAK,EAAE;YAAE,GAAG4nB,aAAa,CAAC5nB,KAAK;EAAE4F,UAAAA,QAAQ,EAAE,IAAA;EAAI,SAAA;SAAI,CAAA;EACxF,KAAA;EACD,IAAA,MAAMiiB,cAAc,GAAG;EAAE,MAAA,CAAClU,oBAAc,GAAG;EAAE,QAAA,CAACgU,4BAAsB,GAAGC,aAAAA;EAAa,OAAA;OAAI,CAAA;MAExF,OACEra,eAAC,CAAAma,OAAO;EACNlgB,MAAAA,SAAS,EAAEA,SAAS,GAAGA,SAAS,GAAG,MAAM;EACzC1E,MAAAA,EAAE,EAAEA,EAAE;EACN6C,MAAAA,IAAI,EAAEA,IAAI;EACVuhB,MAAAA,MAAM,EAAEA,MAAM;EACd1P,MAAAA,MAAM,EAAEA,MAAM;EACdsE,MAAAA,MAAM,EAAEA,MAAM;EACdqL,MAAAA,YAAY,EAAEA,YAAY;EAC1BW,MAAAA,OAAO,EAAEV,OAAO;EAChBW,MAAAA,aAAa,EAAEV,aAAa;EAC5B7D,MAAAA,UAAU,EAAE8D,eAAe;QAC3B/C,QAAQ,EAAE,IAAI,CAACA,QAAQ;EACvBkD,MAAAA,EAAE,EAAEA,EAAE;QACNO,GAAG,EAAE,IAAI,CAAC5F,WAAW;EAEpBtY,MAAAA,QAAA,EAAA,CAAAyd,aAAa,KAAK,KAAK,IAAI,IAAI,CAAC3B,YAAY,CAACzlB,QAAQ,CAAC,EACvD6E,cAAC,CAAAsH,YAAY;EACX3G,QAAAA,IAAI,EAAC,EAAE;EACPzF,QAAAA,MAAM,EAAEA,MAAM;EACdqE,QAAAA,QAAQ,EAAEA,QAAQ;EAClB1C,QAAAA,WAAW,EAAEA,WAAW;EACxBsB,QAAAA,QAAQ,EAAEA,QAAQ;EAClB+C,QAAAA,QAAQ,EAAEA,QAAQ;EAClBC,QAAAA,WAAW,EAAEA,WAAW;EACxBG,QAAAA,WAAW,EAAEA,WAAW;EACxBlH,QAAAA,QAAQ,EAAEA,QAAQ;UAClB8B,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvB8E,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBC,OAAO,EAAE,IAAI,CAACA,OAAO;EACrB9F,QAAAA,QAAQ,EAAEA,QAAQ;EAClByF,QAAAA,QAAQ,EAAEA,QAAQ;EAClBC,QAAAA,QAAQ,EAAEA,QAAAA;UACV,EAEDiE,QAAQ,GAAGA,QAAQ,GAAG9E,cAAC,CAAAkT,YAAY;EAAC3T,QAAAA,QAAQ,EAAEsjB,cAAc;EAAE1nB,QAAAA,QAAQ,EAAEA,QAAAA;SAAQ,CAAI,EACpFonB,aAAa,KAAK,QAAQ,IAAI,IAAI,CAAC3B,YAAY,CAACzlB,QAAQ,CAAC,CAAA;EAAA,KAAA,CAClD,CAAA;EAEd,GAAA;EACD;;ECx0BD;EACwB,SAAA8nB,SAASA,CAC/BC,UAA+B,EAAA;IAE/B,oBAAOC,gBAAU,CACf,CAAC;MAAErf,MAAM;MAAElB,OAAO;MAAEmO,SAAS;MAAE,GAAGqS,WAAAA;KAAiC,EAAEJ,GAAgC,KAAI;MAAA,IAAAK,qBAAA,EAAAC,UAAA,CAAA;EACvGxf,IAAAA,MAAM,GAAG;EAAE,MAAA,IAAGof,UAAU,KAAVA,IAAAA,IAAAA,UAAU,KAAVA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,CAAEpf,MAAM,CAAA;QAAE,GAAGA,MAAAA;OAAQ,CAAA;EAC7ClB,IAAAA,OAAO,GAAG;EAAE,MAAA,IAAGsgB,UAAU,KAAVA,IAAAA,IAAAA,UAAU,KAAVA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,CAAEtgB,OAAO,CAAA;QAAE,GAAGA,OAAAA;OAAS,CAAA;EAChDmO,IAAAA,SAAS,GAAG;EACV,MAAA,IAAGmS,UAAU,KAAVA,IAAAA,IAAAA,UAAU,KAAVA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,CAAEnS,SAAS,CAAA;EACxB,MAAA,GAAGA,SAAS;EACZC,MAAAA,eAAe,EAAE;EACf,QAAA,IAAGkS,UAAU,KAAA,IAAA,IAAVA,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAAG,qBAAA,GAAVH,UAAU,CAAEnS,SAAS,MAAAsS,IAAAA,IAAAA,qBAAA,KAArBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAAuBrS,eAAe,CAAA;UACzC,IAAAsS,CAAAA,UAAA,GAAGvS,SAAS,MAAA,IAAA,IAAAuS,UAAA,KAATA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAA,CAAWtS,eAAe,CAAA;EAC9B,OAAA;OACF,CAAA;MAED,OACEhR,cAAC,CAAAmd,IAAI,EACC;EAAA,MAAA,GAAA+F,UAAU;WACVE,WAAW;EACftf,MAAAA,MAAM,EAAEA,MAAM;EACdlB,MAAAA,OAAO,EAAEA,OAAO;EAChBmO,MAAAA,SAAS,EAAEA,SAAS;EACpBiS,MAAAA,GAAG,EAAEA,GAAAA;EACL,KAAA,CAAA,CAAA;EAEN,GAAC,CACF,CAAA;EACH;;;;;;;;;;;;"}