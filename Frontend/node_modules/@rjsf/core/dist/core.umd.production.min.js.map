{"version":3,"file":"core.umd.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/TimeWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/getDefaultRegistry.ts","../src/components/fields/index.ts","../src/components/templates/index.ts","../src/components/templates/ButtonTemplates/index.ts","../src/components/widgets/index.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import { Component, MouseEvent } from 'react';\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UiSchema,\n  ITEMS_KEY,\n} from '@rjsf/utils';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport { nanoid } from 'nanoid';\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T[], S, F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema, registry } = this.props;\n    const { translateString } = registry;\n    return get(\n      schema,\n      [ITEMS_KEY, 'title'],\n      get(schema, [ITEMS_KEY, 'description'], translateString(TranslatableString.ArrayItemTitle))\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes('null');\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== 'null';\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema, registry } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema, registry.globalUiOptions);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data\n   * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into\n   * the state, and then returning `onChange()` with the plain form data converted from the keyed data\n   *\n   * @param event - The event for the click\n   * @param [index] - The optional index at which to add the new data\n   */\n  _handleAddClick(event: MouseEvent, index?: number) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData];\n    if (index !== undefined) {\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n    } else {\n      newKeyedFormData.push(newKeyedFormDataRow);\n    }\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  }\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    this._handleAddClick(event);\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      this._handleAddClick(event, index);\n    };\n  };\n\n  /** Callback handler for when the user clicks on the copy button on an existing array element. Clones the row of\n   * keyed form data at the `index` into the next position in the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the copy button is clicked\n   */\n  onCopyIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: cloneDeep(keyedFormData[index].item),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      if (index !== undefined) {\n        newKeyedFormData.splice(index + 1, 0, newKeyedFormDataRow);\n      } else {\n        newKeyedFormData.push(newKeyedFormDataRow);\n      }\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === 'undefined' ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils, translateString } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T[], S, F>(\n        'UnsupportedFieldTemplate',\n        registry,\n        uiOptions\n      );\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason={translateString(TranslatableString.MissingItems)}\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = '_',\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items) ? (schema.items as S) : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const canAdd = this.canAddItem(formData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n    const { widget, title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={label}\n        hideLabel={!displayLabel}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext, globalUiOptions } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = 'select', title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={label}\n        hideLabel={!displayLabel}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n    const { widget = 'files', title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        options={options}\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label={label}\n        hideLabel={!displayLabel}\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = '_',\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items) ? (schema.items as S[]) : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const canAdd = this.canAddItem(items) && !!additionalSchema;\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      className: 'field field-array field-array-fixed-items',\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canAdd: boolean;\n    canRemove?: boolean;\n    canMoveUp: boolean;\n    canMoveDown: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>['onBlur'];\n    onFocus: FieldProps<T[], S, F>['onFocus'];\n    rawErrors?: string[];\n    totalItems: number;\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canAdd,\n      canRemove = true,\n      canMoveUp,\n      canMoveDown,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n      totalItems,\n    } = props;\n    const { disabled, hideError, idPrefix, idSeparator, readonly, uiSchema, registry, formContext } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n      globalUiOptions,\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true, copyable = false } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      copy: copyable && canAdd,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: 'array-item',\n      disabled,\n      canAdd,\n      hasCopy: has.copy,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      totalItems,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onCopyIndexClick: this.onCopyIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      schema: itemSchema,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext, translateString, globalUiOptions } = registry;\n  const {\n    widget = 'checkbox',\n    title: uiTitle,\n    // Unlike the other fields, don't use `getDisplayLabel()` since it always returns false for the boolean type\n    label: displayLabel = true,\n    ...options\n  } = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const Widget = getWidget(schema, widget, widgets);\n  const yes = translateString(TranslatableString.YesLabel);\n  const no = translateString(TranslatableString.NoLabel);\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n  const label = uiTitle ?? title ?? name;\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? yes : no),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every((v: any) => typeof v === 'boolean')) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? yes : no,\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? yes : no,\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={label}\n      hideLabel={!displayLabel}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import { Component } from 'react';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport unset from 'lodash/unset';\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  deepEquals,\n  ERRORS_KEY,\n  FieldProps,\n  FormContextType,\n  getDiscriminatorFieldFromSchema,\n  getUiOptions,\n  getWidget,\n  mergeSchemas,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState<S extends StrictRJSFSchema = RJSFSchema> = {\n  /** The currently selected option */\n  selectedOption: number;\n  /** The option schemas after retrieving all $refs */\n  retrievedOptions: S[];\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  AnyOfFieldState<S>\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const {\n      formData,\n      options,\n      registry: { schemaUtils },\n    } = this.props;\n    // cache the retrieved options in state in case they have $refs to save doing it later\n    const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n\n    this.state = {\n      retrievedOptions,\n      selectedOption: this.getMatchingOption(0, formData, retrievedOptions),\n    };\n  }\n\n  /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(prevProps: Readonly<FieldProps<T, S, F>>, prevState: Readonly<AnyOfFieldState>) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    let newState = this.state;\n    if (!deepEquals(prevProps.options, options)) {\n      const {\n        registry: { schemaUtils },\n      } = this.props;\n      // re-cache the retrieved options in state in case they have $refs to save doing it later\n      const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n      newState = { selectedOption, retrievedOptions };\n    }\n    if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {\n      const { retrievedOptions } = newState;\n      const matchingOption = this.getMatchingOption(selectedOption, formData, retrievedOptions);\n\n      if (prevState && matchingOption !== selectedOption) {\n        newState = { selectedOption: matchingOption, retrievedOptions };\n      }\n    }\n    if (newState !== this.state) {\n      this.setState(newState);\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T | undefined, options: S[]) {\n    const {\n      schema,\n      registry: { schemaUtils },\n    } = this.props;\n\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    const option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption, discriminator);\n    return option;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option - The new option value being selected\n   */\n  onOptionChange = (option?: string) => {\n    const { selectedOption, retrievedOptions } = this.state;\n    const { formData, onChange, registry } = this.props;\n    const { schemaUtils } = registry;\n    const intOption = option !== undefined ? parseInt(option, 10) : -1;\n    if (intOption === selectedOption) {\n      return;\n    }\n    const newOption = intOption >= 0 ? retrievedOptions[intOption] : undefined;\n    const oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : undefined;\n\n    let newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);\n    if (newFormData && newOption) {\n      // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n      // so that only the root objects themselves are created without adding undefined children properties\n      newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, 'excludeObjectChildren') as T;\n    }\n    onChange(newFormData, undefined, this.getFieldId());\n\n    this.setState({ selectedOption: intOption });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      disabled = false,\n      errorSchema = {},\n      formContext,\n      onBlur,\n      onFocus,\n      registry,\n      schema,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields, translateString, globalUiOptions, schemaUtils } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption, retrievedOptions } = this.state;\n    const {\n      widget = 'select',\n      placeholder,\n      autofocus,\n      autocomplete,\n      title = schema.title,\n      ...uiOptions\n    } = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T, S, F>({ type: 'number' }, widget, widgets);\n    const rawErrors = get(errorSchema, ERRORS_KEY, []);\n    const fieldErrorSchema = omit(errorSchema, [ERRORS_KEY]);\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n    const option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;\n    let optionSchema: S;\n\n    if (option) {\n      const { oneOf, anyOf, ...remaining } = schema;\n      // Merge in all the non-oneOf/anyOf properties and also skip the special ADDITIONAL_PROPERTY_FLAG property\n      unset(remaining, ADDITIONAL_PROPERTY_FLAG);\n      optionSchema = !isEmpty(remaining) ? (mergeSchemas(remaining, option) as S) : option;\n    }\n\n    const translateEnum: TranslatableString = title\n      ? TranslatableString.TitleOptionPrefix\n      : TranslatableString.OptionPrefix;\n    const translateParams = title ? [title] : [];\n    const enumOptions = retrievedOptions.map((opt: { title?: string }, index: number) => ({\n      label: opt.title || translateString(translateEnum, translateParams.concat(String(index + 1))),\n      value: index,\n    }));\n\n    return (\n      <div className='panel panel-default panel-body'>\n        <div className='form-group'>\n          <Widget\n            id={this.getFieldId()}\n            name={`${name}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`}\n            schema={{ type: 'number', default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            disabled={disabled || isEmpty(enumOptions)}\n            multiple={false}\n            rawErrors={rawErrors}\n            errorSchema={fieldErrorSchema}\n            value={selectedOption >= 0 ? selectedOption : undefined}\n            options={{ enumOptions, ...uiOptions }}\n            registry={registry}\n            formContext={formContext}\n            placeholder={placeholder}\n            autocomplete={autocomplete}\n            autofocus={autofocus}\n            label={title ?? name}\n            hideLabel={!displayLabel}\n          />\n        </div>\n        {option !== null && <_SchemaField {...this.props} schema={optionSchema!} />}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import { useState, useCallback } from 'react';\nimport { asNumber, FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>['value']) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === '.') {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === 'string' && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, ''))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === 'string' && typeof value === 'number') {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace('.', '\\\\.') + '\\\\.?0*$');\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import { Component } from 'react';\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n  ANY_OF_KEY,\n  ONE_OF_KEY,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = '' as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value } as unknown as T;\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData } as T;\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param [formData] - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData?: T) => {\n    const { uiSchema, registry } = this.props;\n    const { duplicateKeySuffixSeparator = '-' } = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (has(formData, newKey)) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema['type']) {\n    const {\n      registry: { translateString },\n    } = this.props;\n    switch (type) {\n      case 'array':\n        return [];\n      case 'boolean':\n        return false;\n      case 'null':\n        return null;\n      case 'number':\n        return 0;\n      case 'object':\n        return {};\n      case 'string':\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return translateString(TranslatableString.NewStringDefault);\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData } as T;\n\n    let type: RJSFSchema['type'] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      let apSchema = schema.additionalProperties;\n      if (REF_KEY in apSchema) {\n        const { schemaUtils } = registry;\n        apSchema = schemaUtils.retrieveSchema({ $ref: apSchema[REF_KEY] } as S, formData);\n        type = apSchema.type;\n      }\n      if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {\n        type = 'object';\n      }\n    }\n\n    const newKey = this.getAvailableKey('newKey', newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils, translateString, globalUiOptions } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = uiOptions.title ?? schema.title ?? name;\n    const description = uiOptions.description ?? schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className='config-error' style={{ color: 'red' }}>\n            <Markdown>\n              {translateString(TranslatableString.InvalidObjectField, [name || 'root', (err as Error).message])}\n            </Markdown>\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<'ObjectFieldTemplate', T, S, F>('ObjectFieldTemplate', registry, uiOptions);\n\n    const templateProps = {\n      // getDisplayLabel() always returns false for object types, so just check the `uiOptions.label`\n      title: uiOptions.label === false ? '' : title,\n      description: uiOptions.label === false ? undefined : description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [PROPERTIES_KEY, name, ADDITIONAL_PROPERTY_FLAG]);\n        const fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === 'hidden';\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(name, addedByAdditionalProperties)}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      errorSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import { useCallback, Component } from 'react';\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  deepEquals,\n  descriptionId,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  getSchemaType,\n  getTemplate,\n  getUiOptions,\n  ID_KEY,\n  IdSchema,\n  mergeObjects,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UI_OPTIONS_KEY,\n  UIOptionsType,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\nimport omit from 'lodash/omit';\nimport Markdown from 'markdown-to-jsx';\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: 'ArrayField',\n  boolean: 'BooleanField',\n  integer: 'NumberField',\n  number: 'NumberField',\n  object: 'ObjectField',\n  string: 'StringField',\n  null: 'NullField',\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields, translateString } = registry;\n  if (typeof field === 'function') {\n    return field;\n  }\n  if (typeof field === 'string' && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType) ? schemaType[0] : schemaType || '';\n\n  const schemaId = schema.$id;\n\n  let componentName = COMPONENT_TYPES[type];\n  if (schemaId && schemaId in fields) {\n    componentName = schemaId;\n  }\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T, S, F>(\n          'UnsupportedFieldTemplate',\n          registry,\n          uiOptions\n        );\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={translateString(TranslatableString.UnknownFieldType, [String(schema.type)])}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils, globalUiOptions } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const FieldTemplate = getTemplate<'FieldTemplate', T, S, F>('FieldTemplate', registry, uiOptions);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    uiOptions\n  );\n  const FieldHelpTemplate = getTemplate<'FieldHelpTemplate', T, S, F>('FieldHelpTemplate', registry, uiOptions);\n  const FieldErrorTemplate = getTemplate<'FieldErrorTemplate', T, S, F>('FieldErrorTemplate', registry, uiOptions);\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = useCallback(\n    (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(schema, uiOptions, idSchema, registry);\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(props.readonly || uiOptions.readonly || props.schema.readOnly || schema.readOnly);\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError = uiSchemaHideError === undefined ? props.hideError : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names or style to child components\n  const fieldUiSchema = omit(uiSchema, ['ui:classNames', 'classNames', 'ui:style']);\n  if (UI_OPTIONS_KEY in fieldUiSchema) {\n    fieldUiSchema[UI_OPTIONS_KEY] = omit(fieldUiSchema[UI_OPTIONS_KEY], ['classNames', 'style']);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description = uiOptions.description || props.schema.description || schema.description || '';\n\n  const richDescription = uiOptions.enableMarkdownInDescription ? <Markdown>{description}</Markdown> : description;\n\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === 'hidden';\n\n  const classNames = ['form-group', 'field', `field-${getSchemaType(schema)}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push('field-error has-error has-danger');\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  /*\n   * AnyOf/OneOf errors handled by child schema\n   */\n  const errorsComponent =\n    hideError || schema.anyOf || schema.oneOf ? undefined : (\n      <FieldErrorTemplate\n        errors={__errors}\n        errorSchema={errorSchema}\n        idSchema={idSchema}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, 'children'> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={descriptionId<T>(id)}\n        description={richDescription}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === 'string' ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(' ').trim(),\n    style: uiOptions.style,\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n  const isReplacingAnyOrOneOf = uiSchema?.['ui:field'] && uiSchema?.['ui:fieldReplacesAnyOrOneOf'] === true;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_AnyOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.anyOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n        {schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_OneOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.oneOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>\n> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils, globalUiOptions } = registry;\n  const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : undefined;\n  let defaultWidget = enumOptions ? 'select' : 'text';\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const { widget = defaultWidget, placeholder = '', title: uiTitle, ...options } = getUiOptions<T, S, F>(uiSchema);\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n  const label = uiTitle ?? title ?? name;\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      label={label}\n      hideLabel={!displayLabel}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from 'react';\nimport { FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import {\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <DescriptionFieldTemplate\n      id={descriptionId<T>(idSchema)}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { CSSProperties } from 'react';\nimport { ArrayFieldTemplateItemType, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    hasCopy,\n    index,\n    onCopyIndexClick,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: 'bold',\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? 'col-xs-9' : 'col-xs-12'}>{children}</div>\n      {hasToolbar && (\n        <div className='col-xs-3 array-item-toolbox'>\n          <div\n            className='btn-group'\n            style={{\n              display: 'flex',\n              justifyContent: 'space-around',\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasCopy && (\n              <CopyButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onCopyIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<'ArrayFieldDescriptionTemplate', T, S, F>(\n    'ArrayFieldDescriptionTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldItemTemplate = getTemplate<'ArrayFieldItemTemplate', T, S, F>(\n    'ArrayFieldItemTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<'ArrayFieldTitleTemplate', T, S, F>(\n    'ArrayFieldTitleTemplate',\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className='row array-item-list'>\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className='array-item-add'\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  titleId,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>['TitleFieldTemplate'] = getTemplate<'TitleFieldTemplate', T, S, F>(\n    'TitleFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <TitleFieldTemplate\n      id={titleId<T>(idSchema)}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  BaseInputTemplateProps,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: BaseInputTemplateProps<T, S, F>) {\n  const {\n    id,\n    name, // remove this from ...rest\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    onChangeOverride,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    hideLabel, // remove this from ...rest\n    hideError, // remove this from ...rest\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log('No id for', props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === 'number' || inputProps.type === 'integer') {\n    inputValue = value || value === 0 ? value : '';\n  } else {\n    inputValue = value == null ? '' : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(({ target: { value } }: FocusEvent<HTMLInputElement>) => onBlur(id, value), [onBlur, id]);\n  const _onFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) => onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className='form-control'\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        onChange={onChangeOverride || _onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(schema.default && !schema.examples.includes(schema.default) ? ([schema.default] as string[]) : [])\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import { getSubmitButtonOptions, FormContextType, RJSFSchema, StrictRJSFSchema, SubmitButtonProps } from '@rjsf/utils';\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions<T, S, F>(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button type='submit' {...submitButtonProps} className={`btn btn-info ${submitButtonProps.className || ''}`}>\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nexport default function IconButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const { iconType = 'default', icon, className, uiSchema, registry, ...otherProps } = props;\n  return (\n    <button type='button' className={`btn btn-${iconType} ${className}`} {...otherProps}>\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function CopyButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.CopyButton)}\n      className='array-item-copy'\n      {...props}\n      icon='copy'\n    />\n  );\n}\n\nexport function MoveDownButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveDownButton)}\n      className='array-item-move-down'\n      {...props}\n      icon='arrow-down'\n    />\n  );\n}\n\nexport function MoveUpButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveUpButton)}\n      className='array-item-move-up'\n      {...props}\n      icon='arrow-up'\n    />\n  );\n}\n\nexport function RemoveButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.RemoveButton)}\n      className='array-item-remove'\n      {...props}\n      iconType='danger'\n      icon='remove'\n    />\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nimport IconButton from './IconButton';\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  className,\n  onClick,\n  disabled,\n  registry,\n}: IconButtonProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='row'>\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType='info'\n          icon='plus'\n          className='btn-add col-xs-12'\n          title={translateString(TranslatableString.AddButton)}\n          onClick={onClick}\n          disabled={disabled}\n          registry={registry}\n        />\n      </p>\n    </div>\n  );\n}\n","import { DescriptionFieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === 'string') {\n    return (\n      <p id={id} className='field-description'>\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className='field-description'>\n        {description}\n      </div>\n    );\n  }\n}\n","import {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  errors,\n  registry,\n}: ErrorListProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='panel panel-danger errors'>\n      <div className='panel-heading'>\n        <h3 className='panel-title'>{translateString(TranslatableString.ErrorsLabel)}</h3>\n      </div>\n      <ul className='list-group'>\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className='list-group-item text-danger'>\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","const REQUIRED_FIELD_SYMBOL = '*';\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className='control-label' htmlFor={id}>\n      {label}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from '@rjsf/utils';\n\nimport Label from './Label';\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const { id, label, children, errors, help, description, hidden, required, displayLabel, registry, uiSchema } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<'WrapIfAdditionalTemplate', T, S, F>(\n    'WrapIfAdditionalTemplate',\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className='hidden'>{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import { errorId, FieldErrorProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <div>\n      <ul id={id} className='error-detail bs-callout bs-callout-info'>\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className='text-danger' key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import { helpId, FieldHelpProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = helpId<T>(idSchema);\n  if (typeof help === 'string') {\n    return (\n      <p id={id} className='help-block'>\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className='help-block'>\n      {help}\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from '@rjsf/utils';\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<'TitleFieldTemplate', T, S, F>('TitleFieldTemplate', registry, options);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {title && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand<T, S, F>(schema, uiSchema, formData) && (\n        <AddButton\n          className='object-property-expand'\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import { FormContextType, TitleFieldProps, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nconst REQUIRED_FIELD_SYMBOL = '*';\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: TitleFieldProps<T, S, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TranslatableString, UnsupportedFieldProps } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: UnsupportedFieldProps<T, S, F>\n) {\n  const { schema, idSchema, reason, registry } = props;\n  const { translateString } = registry;\n  let translateEnum: TranslatableString = TranslatableString.UnsupportedField;\n  const translateParams: string[] = [];\n  if (idSchema && idSchema.$id) {\n    translateEnum = TranslatableString.UnsupportedFieldWithId;\n    translateParams.push(idSchema.$id);\n  }\n  if (reason) {\n    translateEnum =\n      translateEnum === TranslatableString.UnsupportedField\n        ? TranslatableString.UnsupportedFieldWithReason\n        : TranslatableString.UnsupportedFieldWithIdAndReason;\n    translateParams.push(reason);\n  }\n  return (\n    <div className='unsupported-field'>\n      <p>\n        <Markdown>{translateString(translateEnum, translateParams)}</Markdown>\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WrapIfAdditionalTemplateProps,\n} from '@rjsf/utils';\n\nimport Label from './FieldTemplate/Label';\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    style,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  const { templates, translateString } = registry;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = templates.ButtonTemplates;\n  const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames} style={style}>\n      <div className='row'>\n        <div className='col-xs-5 form-additional'>\n          <div className='form-group'>\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className='form-control'\n              type='text'\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className='form-additional form-group col-xs-5'>{children}</div>\n        <div className='col-xs-2'>\n          <RemoveButton\n            className='array-item-remove btn-block'\n            style={{ border: '0' }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n            registry={registry}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react';\nimport {\n  ariaDescribedByIds,\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: 'year',\n      range: yearsRange,\n      value: year,\n    },\n    { type: 'month', range: [1, 12], value: month },\n    { type: 'day', range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: 'hour', range: [0, 23], value: hour },\n      { type: 'minute', range: [0, 59], value: minute },\n      { type: 'second', range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  WidgetProps<T, S, F>,\n  'value' | 'name' | 'disabled' | 'readonly' | 'autofocus' | 'registry' | 'onBlur' | 'onFocus'\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  name,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + '_' + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: 'integer' } as S}\n      id={id}\n      name={name}\n      className='form-control'\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=''\n      aria-describedby={ariaDescribedByIds<T>(rootId)}\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  name,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { translateString } = registry;\n  const [lastValue, setLastValue] = useState(value);\n  const [state, setState] = useReducer((state: DateObject, action: Partial<DateObject>) => {\n    return { ...state, ...action };\n  }, parseDateString(value, time));\n\n  useEffect(() => {\n    const stateValue = toDateString(state, time);\n    if (readyForChange(state) && stateValue !== value) {\n      // The user changed the date to a new valid data via the comboboxes, so call onChange\n      onChange(stateValue);\n    } else if (lastValue !== value) {\n      // We got a new value in the props\n      setLastValue(value);\n      setState(parseDateString(value, time));\n    }\n  }, [time, value, onChange, state, lastValue]);\n\n  const handleChange = useCallback((property: keyof DateObject, value: string) => {\n    setState({ [property]: value });\n  }, []);\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nextState = parseDateString(new Date().toJSON(), time);\n      onChange(toDateString(nextState, time));\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      onChange(undefined);\n    },\n    [disabled, readonly, onChange]\n  );\n\n  return (\n    <ul className='list-inline'>\n      {dateElementProps(state, time, options.yearsRange as [number, number] | undefined).map((elemProps, i) => (\n        <li className='list-inline-item' key={i}>\n          <DateElement\n            rootId={id}\n            name={name}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-info btn-now' onClick={handleSetNow}>\n            {translateString(TranslatableString.NowLabel)}\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-warning btn-clear' onClick={handleClear}>\n            {translateString(TranslatableString.ClearLabel)}\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  descriptionId,\n  getTemplate,\n  labelValue,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  hideLabel,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n  const description = options.description ?? schema.description;\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? 'disabled' : ''}`}>\n      {!hideLabel && !!description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(id)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          name={id}\n          checked={typeof value === 'undefined' ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n        {labelValue(<span>{label}</span>, hideLabel)}\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled, emptyValue },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n  return (\n    <div className='checkboxes' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = enumOptionsIsSelected<S>(option.value, checkboxesValues);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checked) {\n              onChange(enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions));\n            } else {\n              onChange(enumOptionsDeselectValue<S>(index, checkboxesValues, enumOptions));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type='checkbox'\n                id={optionId(id, index)}\n                name={id}\n                checked={checked}\n                value={String(index)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label key={index} className={`checkbox-inline ${disabledCls}`}>\n              {checkbox}\n            </label>\n          ) : (\n            <div key={index} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='color' {...props} disabled={disabled || readonly} />;\n}\n","import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value || undefined), [onChange]);\n\n  return <BaseInputTemplate type='date' {...props} onChange={handleChange} />;\n}\n","import {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return (\n    <BaseInputTemplate\n      type='datetime-local'\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='email' {...props} />;\n}\n","import { ChangeEvent, useCallback, useState } from 'react';\nimport {\n  dataURItoBlob,\n  FormContextType,\n  getTemplate,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(';base64', `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === 'string') {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FileInfoPreview<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  fileInfo,\n  registry,\n}: {\n  fileInfo: FileInfoType;\n  registry: Registry<T, S, F>;\n}) {\n  const { translateString } = registry;\n  const { dataURL, type, name } = fileInfo;\n  if (!dataURL) {\n    return null;\n  }\n\n  if (type.indexOf('image') !== -1) {\n    return <img src={dataURL} style={{ maxWidth: '100%' }} className='file-preview' />;\n  }\n\n  return (\n    <>\n      {' '}\n      <a download={`preview-${name}`} href={dataURL} className='file-download'>\n        {translateString(TranslatableString.PreviewLabel)}\n      </a>\n    </>\n  );\n}\n\nfunction FilesInfo<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  filesInfo,\n  registry,\n  preview,\n}: {\n  filesInfo: FileInfoType[];\n  registry: Registry<T, S, F>;\n  preview?: boolean;\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  const { translateString } = registry;\n  return (\n    <ul className='file-info'>\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <Markdown>{translateString(TranslatableString.FilesInfo, [name, type, String(size)])}</Markdown>\n            {preview && <FileInfoPreview<T, S, F> fileInfo={fileInfo} registry={registry} />}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]): FileInfoType[] {\n  return dataURLs\n    .filter((dataURL) => dataURL)\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        dataURL,\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, required, multiple, onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const [filesInfo, setFilesInfo] = useState<FileInfoType[]>(\n    Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value])\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      // Due to variances in themes, dealing with multiple files for the array case now happens one file at a time.\n      // This is because we don't pass `multiple` into the `BaseInputTemplate` anymore. Instead, we deal with the single\n      // file in each event and concatenate them together ourselves\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          setFilesInfo(filesInfo.concat(filesInfoEvent[0]));\n          onChange(value.concat(newValue[0]));\n        } else {\n          setFilesInfo(filesInfoEvent);\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, value, filesInfo, onChange]\n  );\n\n  return (\n    <div>\n      <BaseInputTemplate\n        {...props}\n        disabled={disabled || readonly}\n        type='file'\n        required={value ? false : required} // this turns off HTML required validation when a value exists\n        onChangeOverride={handleChange}\n        value=''\n        accept={options.accept ? String(options.accept) : undefined}\n      />\n      <FilesInfo<T, S, F> filesInfo={filesInfo} registry={registry} preview={options.filePreview} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  value,\n}: WidgetProps<T, S, F>) {\n  return <input type='hidden' id={id} name={id} value={typeof value === 'undefined' ? '' : value} />;\n}\n\nexport default HiddenWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='password' {...props} />;\n}\n","import { FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n\n  return (\n    <div className='field-radio-group' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = enumOptionsIsSelected<S>(option.value, value);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type='radio'\n                id={optionId(id, i)}\n                checked={checked}\n                name={id}\n                required={required}\n                value={String(i)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={i} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={i} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className='field-range-wrapper'>\n      <BaseInputTemplate type='range' {...props} />\n      <span className='range-view'>{value}</span>\n    </div>\n  );\n}\n","import { ChangeEvent, FocusEvent, SyntheticEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction getValue(event: SyntheticEvent<HTMLSelectElement>, multiple: boolean) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n  const emptyValue = multiple ? [] : '';\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(value, enumOptions, multiple);\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className='form-control'\n      value={typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {!multiple && schema.default === undefined && <option value=''>{placeholder}</option>}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n          return (\n            <option key={i} value={String(i)} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport { ariaDescribedByIds, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className='form-control'\n      value={value ? value : ''}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate {...props} />;\n}\n","import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TimeWidget` component uses the `BaseInputTemplate` changing the type to `time` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value ? `${value}:00` : undefined), [onChange]);\n\n  return <BaseInputTemplate type='time' {...props} onChange={handleChange} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='url' {...props} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='number' {...props} />;\n}\n","import { englishStringTranslator, FormContextType, Registry, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport fields from './components/fields';\nimport templates from './components/templates';\nimport widgets from './components/widgets';\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, 'schemaUtils'> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n    translateString: englishStringTranslator,\n  };\n}\n","import { Field, FormContextType, RegistryFieldsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport ArrayField from './ArrayField';\nimport BooleanField from './BooleanField';\nimport MultiSchemaField from './MultiSchemaField';\nimport NumberField from './NumberField';\nimport ObjectField from './ObjectField';\nimport SchemaField from './SchemaField';\nimport StringField from './StringField';\nimport NullField from './NullField';\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport ArrayFieldDescriptionTemplate from './ArrayFieldDescriptionTemplate';\nimport ArrayFieldItemTemplate from './ArrayFieldItemTemplate';\nimport ArrayFieldTemplate from './ArrayFieldTemplate';\nimport ArrayFieldTitleTemplate from './ArrayFieldTitleTemplate';\nimport BaseInputTemplate from './BaseInputTemplate';\nimport ButtonTemplates from './ButtonTemplates';\nimport DescriptionField from './DescriptionField';\nimport ErrorList from './ErrorList';\nimport FieldTemplate from './FieldTemplate';\nimport FieldErrorTemplate from './FieldErrorTemplate';\nimport FieldHelpTemplate from './FieldHelpTemplate';\nimport ObjectFieldTemplate from './ObjectFieldTemplate';\nimport TitleField from './TitleField';\nimport UnsupportedField from './UnsupportedField';\nimport WrapIfAdditionalTemplate from './WrapIfAdditionalTemplate';\n\nfunction templates<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(): TemplatesType<\n  T,\n  S,\n  F\n> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport SubmitButton from './SubmitButton';\nimport AddButton from './AddButton';\nimport { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } from './IconButton';\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>['ButtonTemplates'] {\n  return {\n    SubmitButton,\n    AddButton,\n    CopyButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n","import { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport AltDateWidget from './AltDateWidget';\nimport AltDateTimeWidget from './AltDateTimeWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport CheckboxesWidget from './CheckboxesWidget';\nimport ColorWidget from './ColorWidget';\nimport DateWidget from './DateWidget';\nimport DateTimeWidget from './DateTimeWidget';\nimport EmailWidget from './EmailWidget';\nimport FileWidget from './FileWidget';\nimport HiddenWidget from './HiddenWidget';\nimport PasswordWidget from './PasswordWidget';\nimport RadioWidget from './RadioWidget';\nimport RangeWidget from './RangeWidget';\nimport SelectWidget from './SelectWidget';\nimport TextareaWidget from './TextareaWidget';\nimport TextWidget from './TextWidget';\nimport TimeWidget from './TimeWidget';\nimport URLWidget from './URLWidget';\nimport UpDownWidget from './UpDownWidget';\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    AltDateWidget,\n    AltDateTimeWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n    ColorWidget,\n    DateWidget,\n    DateTimeWidget,\n    EmailWidget,\n    FileWidget,\n    HiddenWidget,\n    PasswordWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    TextareaWidget,\n    TimeWidget,\n    UpDownWidget,\n    URLWidget,\n  };\n}\n\nexport default widgets;\n","import { Component, ElementType, FormEvent, ReactNode, Ref, RefObject, createRef } from 'react';\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  SUBMIT_BTN_OPTIONS_KEY,\n  TemplatesType,\n  toErrorList,\n  UiSchema,\n  UI_GLOBAL_OPTIONS_KEY,\n  UI_OPTIONS_KEY,\n  ValidationData,\n  validationDataMerge,\n  ValidatorType,\n  Experimental_DefaultFormStateBehavior,\n} from '@rjsf/utils';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport _pick from 'lodash/pick';\nimport _toPath from 'lodash/toPath';\n\nimport getDefaultRegistry from '../getDefaultRegistry';\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S, F>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, 'ButtonTemplates'>> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>['ButtonTemplates']>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T, S, F>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation. By default, these are non-blocking errors, meaning that you can\n   * still submit the form when these are the only errors displayed to the user.\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, causes the `extraErrors` to become blocking when the form is submitted */\n  extraErrorsBlockSubmit?: boolean;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | 'top' | 'bottom';\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer<T, S, F>;\n  /** If set to true, then the first field with an error will receive the focus when the form is submitted with errors\n   */\n  focusOnFirstError?: boolean | ((error: RJSFValidationError) => void);\n  /** Optional string translation function, if provided, allows users to change the translation of the RJSF internal\n   * strings. Some strings contain replaceable parameter values as indicated by `%1`, `%2`, etc. The number after the\n   * `%` indicates the order of the parameter. The ordering of parameters is important because some languages may choose\n   * to put the second parameter before the first in its translation.\n   */\n  translateString?: Registry['translateString'];\n  /** Optional configuration object with flags, if provided, allows users to override default form state behavior\n   * Currently only affecting minItems on array fields and handling of setting defaults based on the value of\n   * `emptyObjectFields`\n   */\n  experimental_defaultFormStateBehavior?: Experimental_DefaultFormStateBehavior;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: ElementType;\n  /** Support receiving a React ref to the Form\n   */\n  ref?: Ref<Form<T, S, F>>;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData?: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  extends Omit<FormState<T, S, F>, 'schemaValidationErrors' | 'schemaValidationErrorSchema'> {\n  /** The status of the form when submitted */\n  status?: 'submitted';\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error('A validator is required for Form functionality to work');\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (this.props.onChange && !deepEquals(this.state.formData, this.props.formData)) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(props: FormProps<T, S, F>, inputFormData?: T): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = 'schema' in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> = ('uiSchema' in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== 'undefined';\n    const liveValidate = 'liveValidate' in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    const experimental_defaultFormStateBehavior =\n      'experimental_defaultFormStateBehavior' in props\n        ? props.experimental_defaultFormStateBehavior\n        : this.props.experimental_defaultFormStateBehavior;\n    let schemaUtils: SchemaUtilsType<T, S, F> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema, experimental_defaultFormStateBehavior)\n    ) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema, experimental_defaultFormStateBehavior);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(schema, inputFormData) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] = state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> = state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = validationDataMerge({ errorSchema, errors }, props.extraErrors);\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema['ui:rootFieldId'],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(nextProps: FormProps<T, S, F>, nextState: FormState<T, S, F>): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T | undefined,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S, F>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;\n    const { customValidate, transformErrors, uiSchema } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<'ErrorListTemplate', T, S, F>('ErrorListTemplate', registry, options);\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n          registry={registry}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T | undefined, fields: string[][]): T | undefined => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== 'object') {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(formData, fields as unknown as string[]);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param [formData] - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData?: T): string[][] => {\n    const getAllPaths = (_obj: GenericObjectType, acc: string[][] = [], paths: string[][] = [[]]) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === 'object') {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (_obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== '') {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== '') {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== 'object' || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const { extraErrors, omitExtraData, liveOmit, noValidate, liveValidate, onChange } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', formData);\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = validationDataMerge(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, 'preventDuplicates') as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: toErrorList(errorSchema),\n      };\n    }\n    this.setState(state as FormState<T, S, F>, () => onChange && onChange({ ...this.state, ...state }, id));\n  };\n\n  /**\n   * Callback function to handle reset form data.\n   * - Reset all fields with default values.\n   * - Reset validations and errors\n   *\n   */\n  reset = () => {\n    const { onChange } = this.props;\n    const newState = this.getStateFromProps(this.props, undefined);\n    const newFormData = newState.formData;\n    const state = {\n      formData: newFormData,\n      errorSchema: {},\n      errors: [] as unknown,\n      schemaValidationErrors: [] as unknown,\n      schemaValidationErrorSchema: {},\n    } as FormState<T, S, F>;\n\n    this.setState(state, () => onChange && onChange({ ...this.state, ...state }));\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally, it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', newFormData);\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors ? toErrorList(extraErrors) : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit({ ...this.state, formData: newFormData, status: 'submitted' }, event);\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { translateString: customTranslateString, uiSchema = {} } = this.props;\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext, translateString } = getDefaultRegistry<T, S, F>();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n      translateString: customTranslateString || translateString,\n      globalUiOptions: uiSchema[UI_GLOBAL_OPTIONS_KEY],\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent('submit', {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error\n   * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that\n   * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.\n   *\n   * @param error - The error on which to focus\n   */\n  focusOnError(error: RJSFValidationError) {\n    const { idPrefix = 'root', idSeparator = '_' } = this.props;\n    const { property } = error;\n    const path = _toPath(property);\n    if (path[0] === '') {\n      // Most of the time the `.foo` property results in the first element being empty, so replace it with the idPrefix\n      path[0] = idPrefix;\n    } else {\n      // Otherwise insert the idPrefix into the first location using unshift\n      path.unshift(idPrefix);\n    }\n\n    const elementId = path.join(idSeparator);\n    let field = this.formElement.current.elements[elementId];\n    if (!field) {\n      // if not an exact match, try finding an input starting with the element id (like radio buttons or checkboxes)\n      field = this.formElement.current.querySelector(`input[id^=${elementId}`);\n    }\n    if (field && field.length) {\n      // If we got a list with length > 0\n      field = field[0];\n    }\n    if (field) {\n      field.focus();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, extraErrorsBlockSubmit, focusOnFirstError, onError } = this.props;\n    const { formData } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0 || (extraErrors && extraErrorsBlockSubmit)) {\n      if (extraErrors) {\n        const merged = validationDataMerge(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      if (focusOnFirstError) {\n        if (typeof focusOnFirstError === 'function') {\n          focusOnFirstError(errors[0]);\n        } else {\n          this.focusOnError(errors[0]);\n        }\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error('Form validation failed', errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = '',\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = 'top',\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || 'form';\n\n    let { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions = {} } = getUiOptions<T, S, F>(uiSchema);\n    if (disabled) {\n      submitOptions = { ...submitOptions, props: { ...submitOptions.props, disabled: true } };\n    }\n    const submitUiSchema = { [UI_OPTIONS_KEY]: { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions } };\n\n    return (\n      <FormTag\n        className={className ? className : 'rjsf'}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === 'top' && this.renderErrors(registry)}\n        <_SchemaField\n          name=''\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n\n        {children ? children : <SubmitButton uiSchema={submitUiSchema} registry={registry} />}\n        {showErrorList === 'bottom' && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n","import { ComponentType, ForwardedRef, forwardRef } from 'react';\nimport Form, { FormProps } from './components/Form';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  FormProps<T, S, F>,\n  'fields' | 'templates' | 'widgets' | '_internalFormWrapper'\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  themeProps: ThemeProps<T, S, F>\n): ComponentType<FormProps<T, S, F>> {\n  return forwardRef(\n    ({ fields, widgets, templates, ...directProps }: FormProps<T, S, F>, ref: ForwardedRef<Form<T, S, F>>) => {\n      fields = { ...themeProps?.fields, ...fields };\n      widgets = { ...themeProps?.widgets, ...widgets };\n      templates = {\n        ...themeProps?.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","Component","constructor","props","super","this","_getNewFormDataRow","schema","registry","schemaUtils","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","_handleAddClick","onAddIndexClick","index","onCopyIndexClick","preventDefault","onChange","state","newKeyedFormDataRow","cloneDeep","newKeyedFormData","undefined","splice","push","setState","updatedKeyedFormData","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","_newKeyedFormData","slice","reOrderArray","onChangeForIndex","value","id","onSelectChange","idSchema","$id","static","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","itemTitle","translateString","get","ITEMS_KEY","TranslatableString","ArrayItemTitle","isItemRequired","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","globalUiOptions","maxItems","render","uiOptions","UnsupportedFieldTemplate","getTemplate","_jsx","reason","MissingItems","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","canAdd","arrayProps","itemCast","itemErrorSchema","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","totalItems","className","Template","hideError","placeholder","widgets","widget","uiTitle","options","Widget","getWidget","label","displayLabel","getDisplayLabel","multiple","hideLabel","enumOptions","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","copyable","has","moveUp","moveDown","copy","remove","toolbar","Object","keys","some","children","jsx","hasCopy","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","yes","YesLabel","no","NoLabel","oneOf","option","const","o","schemaWithEnumNames","enums","enum","enumNames","every","v","AnyOfField","onOptionChange","selectedOption","retrievedOptions","intOption","newOption","newFormData","sanitizeDataForNewSchema","getFieldId","opt","getMatchingOption","componentDidUpdate","prevProps","newState","deepEquals","matchingOption","discriminator","getDiscriminatorFieldFromSchema","getClosestMatchingOption","_SchemaField","autocomplete","ERRORS_KEY","fieldErrorSchema","omit","optionSchema","anyOf","remaining","unset","ADDITIONAL_PROPERTY_FLAG","isEmpty","mergeSchemas","translateEnum","TitleOptionPrefix","OptionPrefix","translateParams","String","_jsxs","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","args","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","assign","handleAddClick","apSchema","REF_KEY","$ref","ANY_OF_KEY","ONE_OF_KEY","getDefaultValue","isRequired","indexOf","NewStringDefault","rawSchema","properties","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","Markdown","InvalidObjectField","message","JSON","stringify","templateProps","PROPERTIES_KEY","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","FieldComponent","field","schemaType","getSchemaType","schemaId","componentName","UnknownFieldType","getFieldComponent","Boolean","readOnly","uiSchemaHideError","__errors","UI_OPTIONS_KEY","richDescription","enableMarkdownInDescription","help","classNames","helpComponent","hasErrors","errorsComponent","errors","fieldProps","descriptionId","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","isReplacingAnyOrOneOf","jsxs","_Fragment","isSelect","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","CopyButton","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","titleId","BaseInputTemplate","onChangeOverride","rest","console","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","examplesId","ariaDescribedByIds","example","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","IconButton","iconType","icon","otherProps","DescriptionField","ErrorList","ErrorsLabel","error","stack","REQUIRED_FIELD_SYMBOL","Label","htmlFor","WrapIfAdditionalTemplate","errorId","elem","helpId","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","UnsupportedFieldWithId","UnsupportedFieldWithReason","UnsupportedFieldWithIdAndReason","keyLabel","KeyLabel","defaultValue","border","rangeOptions","start","stop","pad","dateElementProps","time","yearsRange","Date","getFullYear","year","month","day","hour","minute","second","data","range","DateElement","select","rootId","SelectWidget","AltDateWidget","useReducer","action","parseDateString","stateValue","toDateString","values","readyForChange","property","handleSetNow","nextState","toJSON","handleClear","elemProps","hideNowButton","href","NowLabel","hideClearButton","ClearLabel","AltDateTimeWidget","CheckboxWidget","schemaRequiresTrueValue","checked","handleBlur","handleFocus","labelValue","CheckboxesWidget","inline","enumDisabled","checkboxesValues","enumOptionsValueForIndex","enumOptionsIsSelected","itemDisabled","disabledCls","checkbox","optionId","enumOptionsSelectValue","enumOptionsDeselectValue","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FileInfoPreview","fileInfo","src","maxWidth","download","PreviewLabel","FilesInfo","filesInfo","preview","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","setFilesInfo","files","all","from","then","filesInfoEvent","newValue","accept","filePreview","HiddenWidget","PasswordWidget","RadioWidget","radio","RangeWidget","getValue","selected","optEmptyVal","selectedIndexes","enumOptionsIndexForValue","TextareaWidget","rows","TextWidget","TimeWidget","URLWidget","UpDownWidget","getDefaultRegistry","MultiSchemaField","ErrorListTemplate","rootSchema","englishStringTranslator","defaultProps","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","validationDataMerge","toErrorList","reset","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","inputFormData","edit","experimental_defaultFormStateBehavior","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","getValidator","validateFormData","renderErrors","getRegistry","_this$props$templates","customTranslateString","UI_GLOBAL_OPTIONS_KEY","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","focusOnError","_toPath","unshift","elementId","elements","querySelector","focus","extraErrorsBlockSubmit","focusOnFirstError","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","showErrorList","_internalFormWrapper","as","FormTag","SUBMIT_BTN_OPTIONS_KEY","submitOptions","submitUiSchema","encType","acceptCharset","ref","themeProps","forwardRef","directProps","_themeProps$templates","_templates"],"mappings":"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"}